"use strict";(self.webpackChunkdocassemble_assembly_line_documentation=self.webpackChunkdocassemble_assembly_line_documentation||[]).push([[4864],{4137:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>h});var n=a(7294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var i=n.createContext({}),u=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},p=function(e){var t=u(e.components);return n.createElement(i.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,l=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=u(a),d=o,h=m["".concat(i,".").concat(d)]||m[d]||c[d]||l;return a?n.createElement(h,r(r({ref:t},p),{},{components:a})):n.createElement(h,r({ref:t},p))}));function h(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=a.length,r=new Array(l);r[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[m]="string"==typeof e?e:o,r[1]=s;for(var u=2;u<l;u++)r[u]=a[u];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},32:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>r,default:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>u});var n=a(7462),o=(a(7294),a(4137));const l={sidebar_label:"al_income",title:"ALToolbox.al_income"},r=void 0,s={unversionedId:"reference/ALToolbox/al_income",id:"reference/ALToolbox/al_income",title:"ALToolbox.al_income",description:"times\\per\\year",source:"@site/docs/reference/ALToolbox/al_income.md",sourceDirName:"reference/ALToolbox",slug:"/reference/ALToolbox/al_income",permalink:"/docassemble-AssemblyLine-documentation/docs/reference/ALToolbox/al_income",draft:!1,editUrl:"https://github.com/SuffolkLITLab/docassemble-AssemblyLine-documentation/edit/main/docs/reference/ALToolbox/al_income.md",tags:[],version:"current",frontMatter:{sidebar_label:"al_income",title:"ALToolbox.al_income"},sidebar:"api",next:{title:"business_days",permalink:"/docassemble-AssemblyLine-documentation/docs/reference/ALToolbox/business_days"}},i={},u=[{value:"times_per_year",id:"times_per_year",level:4},{value:"recent_years",id:"recent_years",level:4},{value:"ALPeriodicAmount Objects",id:"alperiodicamount-objects",level:2},{value:"__str__",id:"__str__",level:4},{value:"total",id:"total",level:4},{value:"ALIncome Objects",id:"alincome-objects",level:2},{value:"total",id:"total-1",level:4},{value:"ALExpense Objects",id:"alexpense-objects",level:2},{value:"ALIncomeList Objects",id:"alincomelist-objects",level:2},{value:"sources",id:"sources",level:4},{value:"matches",id:"matches",level:4},{value:"total",id:"total-2",level:4},{value:"move_checks_to_list",id:"move_checks_to_list",level:4},{value:"ALJob Objects",id:"aljob-objects",level:2},{value:"gross_total",id:"gross_total",level:4},{value:"deductions",id:"deductions",level:4},{value:"net_total",id:"net_total",level:4},{value:"employer_name_address_phone",id:"employer_name_address_phone",level:4},{value:"normalized_hours",id:"normalized_hours",level:4},{value:"ALJobList Objects",id:"aljoblist-objects",level:2},{value:"total",id:"total-3",level:4},{value:"gross_total",id:"gross_total-1",level:4},{value:"net_total",id:"net_total-1",level:4},{value:"deductions",id:"deductions-1",level:4},{value:"ALExpenseList Objects",id:"alexpenselist-objects",level:2},{value:"ALAsset Objects",id:"alasset-objects",level:2},{value:"total",id:"total-4",level:4},{value:"ALAssetList Objects",id:"alassetlist-objects",level:2},{value:"market_value",id:"market_value",level:4},{value:"balance",id:"balance",level:4},{value:"owners",id:"owners",level:4},{value:"ALVehicle Objects",id:"alvehicle-objects",level:2},{value:"year_make_model",id:"year_make_model",level:4},{value:"ALVehicleList Objects",id:"alvehiclelist-objects",level:2},{value:"ALSimpleValue Objects",id:"alsimplevalue-objects",level:2},{value:"total",id:"total-5",level:4},{value:"__str__",id:"__str__-1",level:4},{value:"ALSimpleValueList Objects",id:"alsimplevaluelist-objects",level:2},{value:"sources",id:"sources-1",level:4},{value:"total",id:"total-6",level:4},{value:"ALItemizedValue Objects",id:"alitemizedvalue-objects",level:2},{value:"income_fields",id:"income_fields",level:4},{value:"__str__",id:"__str__-2",level:4},{value:"ALItemizedValueDict Objects",id:"alitemizedvaluedict-objects",level:2},{value:"hook_after_gather",id:"hook_after_gather",level:4},{value:"__str__",id:"__str__-3",level:4},{value:"ALItemizedJob Objects",id:"alitemizedjob-objects",level:2},{value:"total",id:"total-7",level:4},{value:"gross_total",id:"gross_total-2",level:4},{value:"deduction_total",id:"deduction_total",level:4},{value:"net_total",id:"net_total-2",level:4},{value:"employer_name_address_phone",id:"employer_name_address_phone-1",level:4},{value:"normalized_hours",id:"normalized_hours-1",level:4},{value:"ALItemizedJobList Objects",id:"alitemizedjoblist-objects",level:2},{value:"sources",id:"sources-2",level:4},{value:"total",id:"total-8",level:4},{value:"gross_total",id:"gross_total-3",level:4},{value:"deduction_total",id:"deduction_total-1",level:4},{value:"net_total",id:"net_total-3",level:4}],p={toc:u};function m(e){let{components:t,...a}=e;return(0,o.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h4",{id:"times_per_year"},"times","_","per","_","year"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def times_per_year(times_per_year_list: List[Tuple[int, str]],\n                   times_per_year: float) -> str\n")),(0,o.kt)("p",null,"Get the lower-case textual description that matches a time period contained\nin a ",'"',"times per year",'"'," list."),(0,o.kt)("p",null,"The goal of this function is to allow you to reflect the user","'","s selection\nback to them, either on screen or in a document."),(0,o.kt)("p",null,"In ",(0,o.kt)("inlineCode",{parentName:"p"},"al_income.yml")," there is a default ",(0,o.kt)("inlineCode",{parentName:"p"},"times_per_year_list"),", but the list\nthat you use must be passed as a parameter as it","'","s common to want to\ncustomize this for a given financial statement."),(0,o.kt)("p",null,"For example: if the ",(0,o.kt)("inlineCode",{parentName:"p"},"times_per_year")," is 12, it will return ",'"',"monthly",'"'," from\nthe default ",(0,o.kt)("inlineCode",{parentName:"p"},"times_per_year_list"),"."),(0,o.kt)("p",null,"If the times per year does not exist in the given list, it will return a\nliteral string like ",'"',"five times per year",'"',"."),(0,o.kt)("p",null,"Fractional or floating point-based times_per_year are permissible in the\ntimes_per_year_list, although they are not commonly used. E.g., ",(0,o.kt)("inlineCode",{parentName:"p"},".5")," would\nrepresent ",'"',"every two years",'"',". Items not contained in the list (to provide a\nspecific lookup name) will have a string representation that is rounded to\nthe nearest whole integer."),(0,o.kt)("h4",{id:"recent_years"},"recent","_","years"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'def recent_years(past: int = 25,\n                 order: str = "descending",\n                 future: int = 1) -> List[int]\n')),(0,o.kt)("p",null,"Returns a list of the most recent past years, continuing into the future.\nDefaults to most recent 15 years+1. Useful to populate a combobox of years\nwhere the most recent ones are most likely. E.g. automobile years or\nbirthdate."),(0,o.kt)("p",null,"Keyword parameters:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"past {float} The number of past years to list, including the current year.\nThe default is 15"),(0,o.kt)("li",{parentName:"ul"},"order {string} ","'","descending","'"," or ","'","ascending","'",". Default is ",(0,o.kt)("inlineCode",{parentName:"li"},"descending"),"."),(0,o.kt)("li",{parentName:"ul"},"future (defaults to 1).")),(0,o.kt)("h2",{id:"alperiodicamount-objects"},"ALPeriodicAmount Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class ALPeriodicAmount(DAObject)\n")),(0,o.kt)("p",null,"Represents an amount (could be an income or an expense depending on the context)\nthat reoccurs some times per year. E.g, to express a weekly period, use 52. The default\nis 1 (a year)."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Attributes"),":"),(0,o.kt)("p",null,"  .value {str | float | Decimal} A number representing an amount of money accumulated during\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"times_per_year")," of this income.\n.times_per_year {float | Decimal} Represents a number of the annual frequency of\nthe income. E.g. 12 for a monthly income.\n.source {str} (Optional) The ",'"',"source",'"'," of the income, like a ",'"',"job",'"'," or a ",'"',"house",'"',".\n.display_name {str} (Optional) If present, will have a translated string to show the\nuser, as opposed to a raw english string from the program"),(0,o.kt)("h4",{id:"__str__"},"_","_","str","_","_"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def __str__() -> str\n")),(0,o.kt)("p",null,"Returns the income","'","s ",(0,o.kt)("inlineCode",{parentName:"p"},".total()")," as string, not its object name."),(0,o.kt)("h4",{id:"total"},"total"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def total(times_per_year: float = 1) -> Decimal\n")),(0,o.kt)("p",null,"Returns the income over the specified times_per_year,"),(0,o.kt)("p",null,"To calculate ",(0,o.kt)("inlineCode",{parentName:"p"},".total()"),", an ALPeriodicAmount must have a ",(0,o.kt)("inlineCode",{parentName:"p"},".times_per_year")," and ",(0,o.kt)("inlineCode",{parentName:"p"},".value"),"."),(0,o.kt)("h2",{id:"alincome-objects"},"ALIncome Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class ALIncome(ALPeriodicAmount)\n")),(0,o.kt)("p",null,"Represents an income which may have an hourly rate or a salary. Hourly rate\nincomes must include hours per period (times per year). Period is some\ndenominator of a year. E.g, to express a weekly period, use 52. The default\nis 1 (a year)."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Attributes"),":"),(0,o.kt)("p",null,"  .value {str | float | Decimal} A number representing an amount of money accumulated during\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"times_per_year")," of this income.\n.times_per_year {float | Decimal} Represents a number of the annual frequency of\nthe income. E.g. 12 for a monthly income.\n.is_hourly {bool} (Optional) True if the income is hourly.\n.hours_per_period {float | Decimal} (Optional) If the income is hourly, the number of\nhours during the annual frequency of this job. E.g. if the annual\nfrequency is 52 (weekly), the hours per week might be 50. That is, 50\nhours per week. This attribute is required if ",(0,o.kt)("inlineCode",{parentName:"p"},".is_hourly")," is True.\n.source {str} (Optional) The ",'"',"source",'"'," of the income, like a ",'"',"job",'"'," or a ",'"',"house",'"',".\n.owner {str} (Optional) Full name of the income","'","s owner as a single string."),(0,o.kt)("h4",{id:"total-1"},"total"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def total(times_per_year: float = 1) -> Decimal\n")),(0,o.kt)("p",null,"Returns the income over the specified times_per_year, taking into account\nhours per period for hourly items. For example, for an hourly income of 10\nan hour, 40 hours a week, ",(0,o.kt)("inlineCode",{parentName:"p"},"income.total(1)")," would be 20,800, the yearly income,\nand ",(0,o.kt)("inlineCode",{parentName:"p"},"income.total(52)")," would be 400, the weekly income."),(0,o.kt)("p",null,"To calculate ",(0,o.kt)("inlineCode",{parentName:"p"},".total()"),", an ALIncome must have a ",(0,o.kt)("inlineCode",{parentName:"p"},".times_per_year")," and ",(0,o.kt)("inlineCode",{parentName:"p"},".value"),".\nIt can also have ",(0,o.kt)("inlineCode",{parentName:"p"},".is_hourly")," and ",(0,o.kt)("inlineCode",{parentName:"p"},".hours_per_period"),"."),(0,o.kt)("h2",{id:"alexpense-objects"},"ALExpense Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class ALExpense(ALPeriodicAmount)\n")),(0,o.kt)("p",null,"Not much changes from ALPeriodic Amount, just the generic object questions"),(0,o.kt)("h2",{id:"alincomelist-objects"},"ALIncomeList Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class ALIncomeList(DAList)\n")),(0,o.kt)("p",null,"Represents a filterable DAList of incomes-type items. It can make\nuse of these attributes and methods in its items:"),(0,o.kt)("p",null,".source\n.owner\n.times_per_year\n.value\n.total()"),(0,o.kt)("h4",{id:"sources"},"sources"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def sources() -> Set[str]\n")),(0,o.kt)("p",null,"Returns a set of the unique sources in the ALIncomeList."),(0,o.kt)("h4",{id:"matches"},"matches"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'def matches(source: SourceType,\n            exclude_source: Optional[SourceType] = None) -> "ALIncomeList"\n')),(0,o.kt)("p",null,"Returns an ALIncomeList consisting only of elements matching the specified\nincome source, assisting in filling PDFs with predefined spaces. ",(0,o.kt)("inlineCode",{parentName:"p"},"source"),"\nmay be a list."),(0,o.kt)("h4",{id:"total-2"},"total"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def total(times_per_year: float = 1,\n          source: Optional[SourceType] = None,\n          exclude_source: Optional[SourceType] = None,\n          owner: Optional[str] = None) -> Decimal\n")),(0,o.kt)("p",null,"Returns the total periodic value in the list, gathering the list items\nif necessary. You can optionally filter by ",(0,o.kt)("inlineCode",{parentName:"p"},"source"),". ",(0,o.kt)("inlineCode",{parentName:"p"},"source")," can be a\nstring or a list. You can also filter by one ",(0,o.kt)("inlineCode",{parentName:"p"},"owner"),"."),(0,o.kt)("p",null,"To calculate ",(0,o.kt)("inlineCode",{parentName:"p"},".total()")," correctly, all items must have a ",(0,o.kt)("inlineCode",{parentName:"p"},".total()")," and\nit should be a positive value. Job-type incomes should automatically\nexclude deductions."),(0,o.kt)("h4",{id:"move_checks_to_list"},"move","_","checks","_","to","_","list"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def move_checks_to_list(selected_types: Optional[DADict] = None,\n                        selected_terms: Optional[Mapping] = None)\n")),(0,o.kt)("p",null,"Gives a ","'","gather by checklist","'"," option.\nIf no selected_types param is passed, requires that a .selected_types\nattribute be set by a ",(0,o.kt)("inlineCode",{parentName:"p"},"datatype: checkboxes")," fields\nIf ",'"',"other",'"'," is in the selected_types, the source will not be set directly"),(0,o.kt)("p",null,"Sets the attribute ",'"',"moved",'"'," to true, doesn","'","t set gathered, because this isn","'","t\nidempotent, so trying to also gather all info about the checks in the list doesn","'","t\nwork well."),(0,o.kt)("h2",{id:"aljob-objects"},"ALJob Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class ALJob(ALIncome)\n")),(0,o.kt)("p",null,"Represents a single job that may be hourly or pay-period based."),(0,o.kt)("p",null,"The job can have a net and gross income figure, but it does not represent\nindividual items like wages, tips or deductions that may appear on a paycheck--the\nuser must enter the total amount for ",'"',"net",'"'," and ",'"',"gross",'"'," income for a given period."),(0,o.kt)("p",null,"Can be stored in an ALJobList."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Attributes"),":"),(0,o.kt)("p",null,"  .value {float | Decimal} A number representing an amount of money accumulated during\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"times_per_year")," of this income.\n.times_per_year {float} Represents a number of the annual frequency of\nthe value. E.g. 12 for a monthly value.\n.is_hourly {bool} (Optional): Whether the gross total should be calculated based on hours\nworked per week\n.hours_per_period {float} (Optional) The number of hours during the annual\nfrequency of this job. E.g. if the annual frequency is 52 (weekly), the\nhours per week might be 50. That is, 50 hours per week.\n.deduction {float} (Optional) The amount of money deducted from the total value each period.\nIf this job is hourly, deduction is still from each period, not each hour. Used to\ncalculate the net income in ",(0,o.kt)("inlineCode",{parentName:"p"},"net_income()"),".\n.employer {Individual} (Optional) A docassemble Individual object, employer.address is the address\nand employer.phone is the phone"),(0,o.kt)("h4",{id:"gross_total"},"gross","_","total"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def gross_total(times_per_year: float = 1) -> Decimal\n")),(0,o.kt)("p",null,"Same as ALIncome total. Returns the income over the specified times_per_year,\nrepresenting the ",(0,o.kt)("inlineCode",{parentName:"p"},".value")," attribute of the item."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"times_per_year")," is some denominator of a year. E.g. to express a weekly\nperiod, use 52. The default is 1 (a year)."),(0,o.kt)("h4",{id:"deductions"},"deductions"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def deductions(times_per_year: float = 1) -> Decimal\n")),(0,o.kt)("p",null,"Returns the total deductions from someone","'","s pay over the specificed times_per_year\n(not per hour if hourly)."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"times_per_year")," is some denominator of a year. E.g. to express a weekly\nperiod, use 52. The default is 1 (a year)."),(0,o.kt)("h4",{id:"net_total"},"net","_","total"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def net_total(times_per_year: float = 1) -> Decimal\n")),(0,o.kt)("p",null,"Returns the net income over a time period, found using\n",(0,o.kt)("inlineCode",{parentName:"p"},"self.value")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"self.deduction"),"."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"times_per_year")," is some denominator of a year. E.g, to express a weekly\nperiod, use 52. The default is 1 (a year)."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"self.deduction")," is the amount deducted from one","'","s pay over a period (not\nper hour if hourly)."),(0,o.kt)("p",null,"This will force the gathering of the ALJob","'","s ",(0,o.kt)("inlineCode",{parentName:"p"},".value")," and ",(0,o.kt)("inlineCode",{parentName:"p"},".deduction")," attributes."),(0,o.kt)("h4",{id:"employer_name_address_phone"},"employer","_","name","_","address","_","phone"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def employer_name_address_phone() -> str\n")),(0,o.kt)("p",null,"Returns name, address and phone number of employer as a string. Forces\ngathering the ",(0,o.kt)("inlineCode",{parentName:"p"},".employer"),", ",(0,o.kt)("inlineCode",{parentName:"p"},".employer_address"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},".employer_phone"),"\nattributes."),(0,o.kt)("h4",{id:"normalized_hours"},"normalized","_","hours"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def normalized_hours(times_per_year: float = 1) -> float\n")),(0,o.kt)("p",null,"Returns the normalized number of hours worked in a given times_per_year,\nbased on the self.hours_per_period and self.times_per_year attributes."),(0,o.kt)("p",null,"For example, if the person works 10 hours a week, it will return\n520 when the times_per_year parameter is 1."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"times_per_year")," is some denominator of a year. E.g, to express a weekly\nperiod, use 52. The default is 1 (a year)."),(0,o.kt)("p",null,"This will force the gathering of the attributes ",(0,o.kt)("inlineCode",{parentName:"p"},".hours_per_period")," and\n",(0,o.kt)("inlineCode",{parentName:"p"},".times_per_year")),(0,o.kt)("h2",{id:"aljoblist-objects"},"ALJobList Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class ALJobList(ALIncomeList)\n")),(0,o.kt)("p",null,"Represents a list of ALJobs. Adds the ",(0,o.kt)("inlineCode",{parentName:"p"},".gross_total()")," and\n",(0,o.kt)("inlineCode",{parentName:"p"},".net_total()")," methods to the ALIncomeList class. It","'","s a more common\nway of reporting income than ALItemizedJobList."),(0,o.kt)("h4",{id:"total-3"},"total"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def total(times_per_year: float = 1,\n          source: Optional[SourceType] = None,\n          exclude_source: Optional[SourceType] = None,\n          owner: Optional[str] = None) -> Decimal\n")),(0,o.kt)("p",null,"Returns the sum of the gross incomes of its ALJobs divided by the time\ntimes_per_year. You can filter the jobs by ",(0,o.kt)("inlineCode",{parentName:"p"},"source"),". ",(0,o.kt)("inlineCode",{parentName:"p"},"source")," can be a\nstring or a list."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"times_per_year")," is some denominator of a year. E.g, to express a weekly\nperiod, use 52. The default is 1 (a year)."),(0,o.kt)("h4",{id:"gross_total-1"},"gross","_","total"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def gross_total(times_per_year: float = 1,\n                source: Optional[SourceType] = None,\n                exclude_source: Optional[SourceType] = None) -> Decimal\n")),(0,o.kt)("p",null,"Returns the sum of the gross incomes of its ALJobs divided by the time\ntimes_per_year. You can filter the jobs by ",(0,o.kt)("inlineCode",{parentName:"p"},"source"),". ",(0,o.kt)("inlineCode",{parentName:"p"},"source")," can be a\nstring or a list."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"times_per_year")," is some denominator of a year. E.g, to express a weekly\nperiod, use 52. The default is 1 (a year)."),(0,o.kt)("h4",{id:"net_total-1"},"net","_","total"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def net_total(times_per_year: float = 1,\n              source: Optional[SourceType] = None,\n              exclude_source: Optional[SourceType] = None) -> Decimal\n")),(0,o.kt)("p",null,"Returns the sum of the net incomes of its ALJobs divided by the time\ntimes_per_year. You can filter the jobs by ",(0,o.kt)("inlineCode",{parentName:"p"},"source"),". ",(0,o.kt)("inlineCode",{parentName:"p"},"source")," can be a\nstring or a list. Leaving out ",(0,o.kt)("inlineCode",{parentName:"p"},"source")," will use all sources."),(0,o.kt)("p",null,"If the job is hourly, the ",(0,o.kt)("inlineCode",{parentName:"p"},"net_total()")," may not be comparable to the\n",(0,o.kt)("inlineCode",{parentName:"p"},"gross_total()"),"."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"times_per_year")," is some denominator of a year. E.g, to express a weekly\nperiod, use 52. The default is 1 (a year)."),(0,o.kt)("h4",{id:"deductions-1"},"deductions"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def deductions(times_per_year: float = 1,\n               source: Optional[SourceType] = None,\n               exclude_source: Optional[SourceType] = None) -> Decimal\n")),(0,o.kt)("p",null,"Returns the sum of the deductions of its ALJobs divided by the time\ntimes_per_year. You can filter the jobs by ",(0,o.kt)("inlineCode",{parentName:"p"},"source"),". Leaving out ",(0,o.kt)("inlineCode",{parentName:"p"},"source"),"\nwill use all sources."),(0,o.kt)("h2",{id:"alexpenselist-objects"},"ALExpenseList Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class ALExpenseList(ALIncomeList)\n")),(0,o.kt)("p",null,"A list of expenses"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"each element has a:"),(0,o.kt)("li",{parentName:"ul"},"value"),(0,o.kt)("li",{parentName:"ul"},"source"),(0,o.kt)("li",{parentName:"ul"},"display name")),(0,o.kt)("h2",{id:"alasset-objects"},"ALAsset Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class ALAsset(ALIncome)\n")),(0,o.kt)("p",null,"An ALAsset represents an asset that has a market value, an optional income\nthat the asset earns, and an optional balance which may be helpful if the\nasset represents a financial account rather than a physical asset."),(0,o.kt)("p",null,"Can be stored in an ALAssetList."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Attributes"),":"),(0,o.kt)("p",null,"  .market_value {float | Decimal} Market value of the asset.\n.balance {float | Decimal } Current balance of the account, e.g., like\nthe balance in a checking account, but could also represent a loan\namount.\n.value {float | Decimal} (Optional) Represents the income the asset earns\nfor a given ",(0,o.kt)("inlineCode",{parentName:"p"},"times_per_year"),", such as interest earned in a checking\naccount. If not defined, the income will be set to 0, to simplify\nrepresenting the many common assets that do not earn any income.\n.times_per_year {float} (Optional) Number of times per year the asset\nearns the income listed in the ",(0,o.kt)("inlineCode",{parentName:"p"},"value")," attribute.\n.owner {str} (Optional) Full name of the asset owner as a single string.\n.source {str} (Optional) The ",'"',"source",'"'," of the asset, like ",'"',"vase",'"',"."),(0,o.kt)("h4",{id:"total-4"},"total"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def total(times_per_year: float = 1) -> Decimal\n")),(0,o.kt)("p",null,"Returns the .value attribute divided by the times per year you want to\ncalculate. The value defaults to 0."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"times_per_year")," is some denominator of a year. E.g, to express a weekly\nperiod, use 52. The default is 1 (a year)."),(0,o.kt)("h2",{id:"alassetlist-objects"},"ALAssetList Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class ALAssetList(ALIncomeList)\n")),(0,o.kt)("p",null,"A list of ALAssets. The ",(0,o.kt)("inlineCode",{parentName:"p"},"total()")," of the list will be the total income\nearned, which may not be what you want for a list of assets. To get the\ntotal value of all assets, use the ",(0,o.kt)("inlineCode",{parentName:"p"},"market_value()")," method."),(0,o.kt)("h4",{id:"market_value"},"market","_","value"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def market_value(source: Optional[SourceType] = None,\n                 exclude_source: Optional[SourceType] = None) -> Decimal\n")),(0,o.kt)("p",null,"Returns the total ",(0,o.kt)("inlineCode",{parentName:"p"},".market_value")," of assets in the list. You can filter\nthe assets by ",(0,o.kt)("inlineCode",{parentName:"p"},"source"),". ",(0,o.kt)("inlineCode",{parentName:"p"},"source")," can be a string or a list."),(0,o.kt)("h4",{id:"balance"},"balance"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def balance(source: Optional[SourceType] = None,\n            exclude_source: Optional[SourceType] = None) -> Decimal\n")),(0,o.kt)("p",null,"Returns the total ",(0,o.kt)("inlineCode",{parentName:"p"},".balance")," of assets in the list,\nwhich typically corresponds to the available funds\nin a financial account."),(0,o.kt)("p",null,"You can filter the assets by ",(0,o.kt)("inlineCode",{parentName:"p"},"source"),". ",(0,o.kt)("inlineCode",{parentName:"p"},"source")," can be a string or a list."),(0,o.kt)("h4",{id:"owners"},"owners"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def owners(source: Optional[SourceType] = None,\n           exclude_source: Optional[SourceType] = None) -> Set[str]\n")),(0,o.kt)("p",null,"Returns a set of the unique owners of the assets.  You can filter the\nassets by ",(0,o.kt)("inlineCode",{parentName:"p"},"source"),". ",(0,o.kt)("inlineCode",{parentName:"p"},"source")," can be a string or a list."),(0,o.kt)("h2",{id:"alvehicle-objects"},"ALVehicle Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class ALVehicle(ALAsset)\n")),(0,o.kt)("p",null,"An ALAsset with special attributes that help representing a vehicle."),(0,o.kt)("p",null,"Vehicles have a .year_make_model() method which facilitates\nlisting vehicles on many financial statement forms."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Attributes"),":"),(0,o.kt)("p",null,"  .year {str} The model year of the vehicle, like 2022\n.make {str} The make of the vehicle, like ",'"',"Honda",'"',"\n.model {str} The model of the vehicle, like ",'"',"Accord",'"',"\n.market_value {float | Decimal} Market value of an asset.\n.balance {float | Decimal} Balance of an asset.\n.value {float | Decimal} (Optional) Income earned by the vehicle (typically 0)\n.times_per_year {float} Time frequency over which the ",(0,o.kt)("inlineCode",{parentName:"p"},"value")," is earned\n.owner {str} Full name of the asset owner as a single string.\n.source {str} (Optional) The ",'"',"source",'"'," of the asset. Defaults to ",'"',"vehicle",'"',"."),(0,o.kt)("h4",{id:"year_make_model"},"year","_","make","_","model"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def year_make_model() -> str\n")),(0,o.kt)("p",null,"Returns a string of the format year/make/model of the vehicle. Triggers\ngathering those attributes."),(0,o.kt)("h2",{id:"alvehiclelist-objects"},"ALVehicleList Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class ALVehicleList(ALAssetList)\n")),(0,o.kt)("p",null,"List of ALVehicles. Extends ALAssetList."),(0,o.kt)("h2",{id:"alsimplevalue-objects"},"ALSimpleValue Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class ALSimpleValue(DAObject)\n")),(0,o.kt)("p",null,"Represents a currency value. It","'","s meant to be stored in a list. Can be an\nitem in an ALSimpleValueList."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Attributes"),":"),(0,o.kt)("p",null,"  .value {str | float } The monetary value of the item.\n.transaction_type {str} (Optional) Can be ",'"',"expense",'"',", which will give a\nnegative value to the total of the item.\n.source {str} (Optional) The ",'"',"source",'"'," of the item, like ",'"',"vase",'"',"."),(0,o.kt)("h4",{id:"total-5"},"total"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def total() -> Decimal\n")),(0,o.kt)("p",null,"If desired, to use as a ledger, values can be signed (mixed positive and\nnegative). Setting transaction_type = ","'","expense","'"," makes the value negative.\nUse min=0 in that case."),(0,o.kt)("p",null,"If you use signed values, be careful when placing in an ALIncomeList\nobject. The ",(0,o.kt)("inlineCode",{parentName:"p"},"total()")," method may return unexpected results in that case."),(0,o.kt)("h4",{id:"__str__-1"},"_","_","str","_","_"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def __str__() -> str\n")),(0,o.kt)("p",null,"Returns the total as a formatted string"),(0,o.kt)("h2",{id:"alsimplevaluelist-objects"},"ALSimpleValueList Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class ALSimpleValueList(DAList)\n")),(0,o.kt)("p",null,"Represents a filterable DAList of ALSimpleValues."),(0,o.kt)("h4",{id:"sources-1"},"sources"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def sources() -> Set\n")),(0,o.kt)("p",null,"Returns a set of the unique sources of values stored in the list."),(0,o.kt)("h4",{id:"total-6"},"total"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def total(source: Optional[SourceType] = None,\n          exclude_source: Optional[SourceType] = None) -> Decimal\n")),(0,o.kt)("p",null,"Returns the total value in the list, gathering the list items if\nnecessary. You can filter the values by ",(0,o.kt)("inlineCode",{parentName:"p"},"source"),". ",(0,o.kt)("inlineCode",{parentName:"p"},"source")," can be a\nstring or a list."),(0,o.kt)("h2",{id:"alitemizedvalue-objects"},"ALItemizedValue Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class ALItemizedValue(DAObject)\n")),(0,o.kt)("p",null,"An item in an ALItemizedValueDict (a line item like wages, tips or union dues).\nShould be a positive number, even if it will later be subtracted from the\njob","'","s net total."),(0,o.kt)("p",null,"WARNING: This item","'","s period-based value can","'","t be calculated correctly\noutside of an ALItemizedJob. Its value should only be accessed through the\nfiltering methods of the ALItemizedJob that contains it."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Attributes"),":"),(0,o.kt)("p",null,"  .value {float | Decimal} A number representing an amount of money accumulated\nduring the ",(0,o.kt)("inlineCode",{parentName:"p"},"times_per_year")," of this item or this item","'","s job.\n.is_hourly {bool} Whether this particular item is calculated hourly.\n.times_per_year { float} A denominator of a year representing the annual\nfrequency of the job. E.g. 12 for monthly.\n.exists {bool} (Optional) Allows an interview author to pre-define some common\ndescriptors, like ",'"',"wages",'"'," or ",'"',"union dues",'"'," without requiring the user to\nprovide a value for each item."),(0,o.kt)("p",null,"  If the ",'"',".exists",'"'," attribute is False or undefined, the item will not be used\nwhen calculating totals."),(0,o.kt)("h4",{id:"income_fields"},"income","_","fields"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def income_fields(use_exists=True) -> List[Dict[str, Any]]\n")),(0,o.kt)("p",null,"Returns a YAML structure representing the list of fields for an itemized value,\nto be passed to a ",(0,o.kt)("inlineCode",{parentName:"p"},"code")," attribute of a question","'","s fields"),(0,o.kt)("h4",{id:"__str__-2"},"_","_","str","_","_"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def __str__() -> str\n")),(0,o.kt)("p",null,"Returns a string of the value of the item with two decimal places."),(0,o.kt)("h2",{id:"alitemizedvaluedict-objects"},"ALItemizedValueDict Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class ALItemizedValueDict(DAOrderedDict)\n")),(0,o.kt)("p",null,"Dictionary that can contain ALItemizedValues (e.g. line items) for an\nALItemizedJob. E.g., wages, tips and deductions being the most common."),(0,o.kt)("p",null,"An ALItemizedJob will have two ALItemizedValueDicts, one for income\nand one for deductions."),(0,o.kt)("p",null,"WARNING: Should only be accessed through an ALItemizedJob. Otherwise\nyou may get unexpected results."),(0,o.kt)("h4",{id:"hook_after_gather"},"hook","_","after","_","gather"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def hook_after_gather() -> None\n")),(0,o.kt)("p",null,"Update item lists after they","'","ve been gathered or edited to remove non-existent\nitems. Will still allow the developer to set ",(0,o.kt)("inlineCode",{parentName:"p"},"auto_gather=False")," if they\nwant without affecting this functionality.\nSee ",(0,o.kt)("a",{parentName:"p",href:"https://docassemble.org/docs/objects.html#DAList.hook_after_gather"},"https://docassemble.org/docs/objects.html#DAList.hook_after_gather"),"."),(0,o.kt)("p",null,"If a developer wants to remove these items ",(0,o.kt)("em",{parentName:"p"},"before")," gathering is finished,\nthey can use similar code in their question","'","s ",(0,o.kt)("inlineCode",{parentName:"p"},"validation code:")),(0,o.kt)("h4",{id:"__str__-3"},"_","_","str","_","_"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def __str__() -> str\n")),(0,o.kt)("p",null,"Returns a string of the dictionary","'","s key/value pairs as two-element lists in a list.\nE.g. ","'","[",'["',"federal_taxes",'"',", ",'"',"2500.00",'"]',", ",'["',"wages",'"',", ",'"',"15.50",'"]',"]","'"),(0,o.kt)("h2",{id:"alitemizedjob-objects"},"ALItemizedJob Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class ALItemizedJob(DAObject)\n")),(0,o.kt)("p",null,"An ",'"',"Itemized",'"'," job is a job which allows the user to report very specific,\ngranular details about the money that they earn in that job and any\ndeductions that they have on their paycheck. This detailed accounting of\nmoney for each job is required on some financial statements, although in\nmany financial statements, just reporting gross and net income is sufficient."),(0,o.kt)("p",null,"For example, an ALItemizedJob can let the user report:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Wages at one hourly rate"),(0,o.kt)("li",{parentName:"ul"},"Overtime at a second hourly rate"),(0,o.kt)("li",{parentName:"ul"},"Tips earned during that time period"),(0,o.kt)("li",{parentName:"ul"},"A fixed salary earned for that pay period"),(0,o.kt)("li",{parentName:"ul"},"Union Dues"),(0,o.kt)("li",{parentName:"ul"},"Insurance"),(0,o.kt)("li",{parentName:"ul"},"Taxes")),(0,o.kt)("p",null,"If the financial statement only requires ",'"',"gross",'"'," and ",'"',"net",'"'," income, the\nALJobList has a simpler API and may be the preferred way to represent the\nincome in code."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Attributes"),":"),(0,o.kt)("p",null,"  .to_add {ALItemizedValueDict} Dict of ALItemizedValues that would be added\nto a job","'","s net total, like wages and tips.\n.to_subtract {ALItemizedValueDict} Dict of ALItemizedValues that would be\nsubtracted from a net total, like union dues or insurance premiums.\n.times_per_year {float} A denominator of a year, like 12 for monthly, that\nrepresents how frequently the income is earned\n.is_hourly {bool} (Optional) Whether the value represents a figure that the\nuser earns on an hourly basis, rather than for the full time period\n.hours_per_period {int} (Optional) If the job is hourly, how many hours the\nuser works per period.\n.employer {Individual} (Optional) Individual assumed to have a name and,\noptionally, an address and phone.\n.source {str} (Optional) The category of this item, like ",'"',"public service",'"',".\nDefaults to ",'"',"job",'"',"."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"WARNING")," - Individual items in ",(0,o.kt)("inlineCode",{parentName:"p"},".to_add")," and ",(0,o.kt)("inlineCode",{parentName:"p"},".to_subtract")," should not be used\ndirectly. They should only be accessed through the filtering methods of\nthis job."),(0,o.kt)("p",{parentName:"li"},"Fulfills these requirements:"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"A job can be hourly. Its wages will be calculated with that in mind."),(0,o.kt)("li",{parentName:"ul"},"Despite an hourly job, some individual items must be calculated using the\njob","'","s whole period."),(0,o.kt)("li",{parentName:"ul"},"Some items will have their own periods."),(0,o.kt)("li",{parentName:"ul"},"In a list of jobs, a developer may need to access full time and part time\njobs separately."),(0,o.kt)("li",{parentName:"ul"},"In a list of jobs, a developer may need to sum all items from one source,\nsuch as tips or taxes."),(0,o.kt)("li",{parentName:"ul"},"The developer needs access to total money coming in, total money going out,\nand the total of money going in and money coming out."),(0,o.kt)("li",{parentName:"ul"},"A user must be able to add their own arbitrary items.")))),(0,o.kt)("h4",{id:"total-7"},"total"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def total(times_per_year: float = 1,\n          source: Optional[SourceType] = None,\n          exclude_source: Optional[SourceType] = None) -> Decimal\n")),(0,o.kt)("p",null,"Alias for ALItemizedJob.gross_total to integrate with ALIncomeList math."),(0,o.kt)("h4",{id:"gross_total-2"},"gross","_","total"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def gross_total(times_per_year: float = 1,\n                source: Optional[SourceType] = None,\n                exclude_source: Optional[SourceType] = None) -> Decimal\n")),(0,o.kt)("p",null,"Returns the sum of positive values (payments) for a given times_per_year.\nYou can filter the items by ",(0,o.kt)("inlineCode",{parentName:"p"},"source"),". ",(0,o.kt)("inlineCode",{parentName:"p"},"source")," can be a string or a list.\nIf you use sources from deductions, they will be ignored."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"kwarg")," - times_per_year {float} (Optional) Number of times per year you\nwant to calculate. E.g, to express a weekly period, use 52. Default is 1."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"kwarg")," - source {str | ","[str]","} (Optional) Source or list of sources of desired\nitem(s).")),(0,o.kt)("h4",{id:"deduction_total"},"deduction","_","total"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def deduction_total(times_per_year: float = 1,\n                    source: Optional[SourceType] = None,\n                    exclude_source: Optional[SourceType] = None) -> Decimal\n")),(0,o.kt)("p",null,"Returns the sum of money going out (normally, deductions like union\ndues) divided by a pay times_per_year as a positive value. You can\nfilter the items by ",(0,o.kt)("inlineCode",{parentName:"p"},"source"),". ",(0,o.kt)("inlineCode",{parentName:"p"},"source")," can be a string or a list."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"kwarg")," - times_per_year {float} (Optional) Number of times per year you\nwant to calculate. E.g, to express a weekly period, use 52. Default is 1."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"kwarg")," - source {str | List","[str]","} (Optional) Source or list of sources of desired\nitem(s).")),(0,o.kt)("h4",{id:"net_total-2"},"net","_","total"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def net_total(times_per_year: float = 1,\n              source: Optional[SourceType] = None,\n              exclude_source: Optional[SourceType] = None) -> Decimal\n")),(0,o.kt)("p",null,"Returns the net (gross minus deductions) value of the job divided by\n",(0,o.kt)("inlineCode",{parentName:"p"},"times_per_year"),". You can filter the items by ",(0,o.kt)("inlineCode",{parentName:"p"},"source"),". ",(0,o.kt)("inlineCode",{parentName:"p"},"source")," can be a\nstring or a list. E.g. ",'"',"full time",'"'," or ",'["',"full time",'"',", ",'"',"union dues",'"]'),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"kwarg")," - times_per_year {float} (Optional) Number of times per year you\nwant to calculate. E.g, to express a weekly period, use 52. Default is 1."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"kwarg")," - source {str | List","[str]","} (Optional) Source or list of sources of desired\nitem(s).")),(0,o.kt)("h4",{id:"employer_name_address_phone-1"},"employer","_","name","_","address","_","phone"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def employer_name_address_phone() -> str\n")),(0,o.kt)("p",null,"Returns concatenation of employer name and, if they exist, employer\naddress and phone number."),(0,o.kt)("h4",{id:"normalized_hours-1"},"normalized","_","hours"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def normalized_hours(times_per_year: float = 1) -> float\n")),(0,o.kt)("p",null,"Returns the normalized number of hours worked in a given times_per_year,\nbased on the self.hours_per_period and self.times_per_year attributes."),(0,o.kt)("p",null,"For example, if the person works 10 hours a week, it will return\n520 when the times_per_year parameter is 1."),(0,o.kt)("h2",{id:"alitemizedjoblist-objects"},"ALItemizedJobList Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class ALItemizedJobList(DAList)\n")),(0,o.kt)("p",null,"Represents a list of ALItemizedJobs that can have both payments and money\nout. This is a less common way of reporting income."),(0,o.kt)("h4",{id:"sources-2"},"sources"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def sources(which_side: Optional[str] = None) -> Set[str]\n")),(0,o.kt)("p",null,"Returns a set of the unique sources in all of the jobs.\nBy default gets from both sides, if which_side is ",'"',"deductions",'"',", only gets from deductions."),(0,o.kt)("h4",{id:"total-8"},"total"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def total(times_per_year: float = 1,\n          source: Optional[SourceType] = None,\n          exclude_source: Optional[SourceType] = None) -> Decimal\n")),(0,o.kt)("p",null,"Alias for ALItemizedJobList.gross_total to integrate with\nALIncomeList math."),(0,o.kt)("h4",{id:"gross_total-3"},"gross","_","total"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def gross_total(times_per_year: float = 1,\n                source: Optional[SourceType] = None,\n                exclude_source: Optional[SourceType] = None) -> Decimal\n")),(0,o.kt)("p",null,"Returns the sum of the gross incomes of the list","'","s jobs divided by the\ntimes_per_year. You can filter the items by ",(0,o.kt)("inlineCode",{parentName:"p"},"source"),". ",(0,o.kt)("inlineCode",{parentName:"p"},"source")," can be a\nstring or a list."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"kwarg")," - source {str | ","[str]","} - (Optional) Source or list of sources of\ndesired job items to sum from every itemized job.\nE.g. ","['","tips","'",", ","'","commissions","']"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"kwarg")," - times_per_year {float} (Optional) Number of times per year you\nwant to calculate. E.g, to express a weekly period, use 52. Default is 1.")),(0,o.kt)("h4",{id:"deduction_total-1"},"deduction","_","total"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def deduction_total(times_per_year: float = 1,\n                    source: Optional[SourceType] = None,\n                    exclude_source: Optional[SourceType] = None) -> Decimal\n")),(0,o.kt)("p",null,"Returns the sum of the deductions of the list","'","s jobs divided by the\ntimes_per_year. You can filter the items by ",(0,o.kt)("inlineCode",{parentName:"p"},"source"),". ",(0,o.kt)("inlineCode",{parentName:"p"},"source")," can be a\nstring or a list."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"kwarg")," - source {str | ","[str]","} - (Optional) Source or list of sources of\ndesired job items to sum from every itemized job.\nE.g. ","['","taxes","'",", ","'","dues","']"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"kwarg")," - times_per_year {float} (Optional) Number of times per year you\nwant to calculate. E.g, to express a weekly period, use 52. Default is 1.")),(0,o.kt)("h4",{id:"net_total-3"},"net","_","total"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def net_total(times_per_year: float = 1,\n              source: Optional[SourceType] = None,\n              exclude_source: Optional[SourceType] = None) -> Decimal\n")),(0,o.kt)("p",null,"Returns the net of the list","'","s jobs (money in minus money out) divided by\nthe times_per_year. You can filter the items by ",(0,o.kt)("inlineCode",{parentName:"p"},"source"),". ",(0,o.kt)("inlineCode",{parentName:"p"},"source")," can be a\nstring or a list."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"kwarg")," - source {str | List","[str]","} - (Optional) Source or list of sources of\ndesired job items to sum from every itemized job.\nE.g. ","['","tips","'",", ","'","taxes","']"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"kwarg")," - times_per_year {float} (Optional) Number of times per year you\nwant to calculate. E.g, to express a weekly period, use 52. Default is 1.")))}m.isMDXComponent=!0}}]);