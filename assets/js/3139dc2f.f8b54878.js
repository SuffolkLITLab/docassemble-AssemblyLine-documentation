"use strict";(self.webpackChunkdocassemble_assembly_line_documentation=self.webpackChunkdocassemble_assembly_line_documentation||[]).push([[6016],{7718:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>n,toc:()=>o});const n=JSON.parse('{"id":"components/ALToolbox/ThreePartsDate","title":"ALToolbox.ThreePartsDate","description":"* ALToolbox.ThreePartsDate","source":"@site/docs/components/ALToolbox/ThreePartsDate.md","sourceDirName":"components/ALToolbox","slug":"/components/ALToolbox/ThreePartsDate","permalink":"/docs/components/ALToolbox/ThreePartsDate","draft":false,"unlisted":false,"editUrl":"https://github.com/SuffolkLITLab/docassemble-AssemblyLine-documentation/edit/main/docs/components/ALToolbox/ThreePartsDate.md","tags":[],"version":"current","frontMatter":{}}');var s=r(4848),a=r(8453);const i={},l="ALToolbox.ThreePartsDate",d={},o=[{value:"check_empty_parts",id:"check_empty_parts",level:3},{value:"Arguments",id:"arguments",level:4},{value:"Returns",id:"returns",level:4},{value:"ThreePartsDate Objects",id:"threepartsdate-objects",level:2},{value:"validate",id:"validate",level:3},{value:"Arguments",id:"arguments-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Raises",id:"raises",level:4},{value:"transform",id:"transform",level:3},{value:"Arguments",id:"arguments-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"default_for",id:"default_for",level:3},{value:"Arguments",id:"arguments-3",level:4},{value:"Returns",id:"returns-3",level:4},{value:"BirthDate Objects",id:"birthdate-objects",level:2},{value:"validate",id:"validate-1",level:3},{value:"Arguments",id:"arguments-4",level:4},{value:"Returns",id:"returns-4",level:4},{value:"Raises",id:"raises-1",level:4}];function h(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"altoolboxthreepartsdate",children:"ALToolbox.ThreePartsDate"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"#ALToolbox.ThreePartsDate",children:"ALToolbox.ThreePartsDate"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"#ALToolbox.ThreePartsDate.check_empty_parts",children:"check_empty_parts"})}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"#ALToolbox.ThreePartsDate.ThreePartsDate",children:"ThreePartsDate"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"#ALToolbox.ThreePartsDate.ThreePartsDate.validate",children:"validate"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"#ALToolbox.ThreePartsDate.ThreePartsDate.transform",children:"transform"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"#ALToolbox.ThreePartsDate.ThreePartsDate.default_for",children:"default_for"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"#ALToolbox.ThreePartsDate.BirthDate",children:"BirthDate"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"#ALToolbox.ThreePartsDate.BirthDate.validate",children:"validate"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)("a",{id:"ALToolbox.ThreePartsDate.check_empty_parts"}),"\n",(0,s.jsx)(t.h3,{id:"check_empty_parts",children:"check_empty_parts"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'def check_empty_parts(item: str,\n                      default_msg="{} is not a valid date") -> Optional[str]\n'})}),"\n",(0,s.jsx)(t.p,{children:"Validate a date string in MM/DD/YYYY format and return specific error messages for missing parts."}),"\n",(0,s.jsx)(t.p,{children:"Analyzes a date string separated by forward slashes to determine which parts\n(month, day, year) are missing and returns a helpful error message indicating\nwhat needs to be entered. Currently only handles US date format."}),"\n",(0,s.jsx)(t.h4,{id:"arguments",children:"Arguments"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"item"})," ",(0,s.jsx)(t.em,{children:"str"})," - The date string to validate, expected in MM/DD/YYYY format."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"default_msg"})," ",(0,s.jsx)(t.em,{children:"str, optional"}),' - Default error message template for invalid dates.\nDefaults to "{} is not a valid date".']}),"\n"]}),"\n",(0,s.jsx)(t.h4,{id:"returns",children:"Returns"}),"\n",(0,s.jsx)(t.p,{children:"Error message if validation fails, None if date is valid.\nReturns None when the date is complete and valid, otherwise returns\na localized error message indicating which parts need to be entered."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Example"}),":"]}),"\n",(0,s.jsx)(t.p,{children:'>>> check_empty_parts("12//2023")\n"Enter a day"\n>>> check_empty_parts("//")\n"Enter a month, a day, and a year"\n>>> check_empty_parts("12/25/2023")\nNone'}),"\n",(0,s.jsx)("a",{id:"ALToolbox.ThreePartsDate.ThreePartsDate"}),"\n",(0,s.jsx)(t.h2,{id:"threepartsdate-objects",children:"ThreePartsDate Objects"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"class ThreePartsDate(CustomDataType)\n"})}),"\n",(0,s.jsx)("a",{id:"ALToolbox.ThreePartsDate.ThreePartsDate.validate"}),"\n",(0,s.jsx)(t.h3,{id:"validate",children:"validate"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"@classmethod\ndef validate(cls, item: str) -> bool\n"})}),"\n",(0,s.jsx)(t.p,{children:"Validate a date string in MM/DD/YYYY format."}),"\n",(0,s.jsx)(t.h4,{id:"arguments-1",children:"Arguments"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"item"})," ",(0,s.jsx)(t.em,{children:"str"})," - The date string to validate."]}),"\n"]}),"\n",(0,s.jsx)(t.h4,{id:"returns-1",children:"Returns"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"bool"})," - True if valid or empty, raises DAValidationError if invalid."]}),"\n"]}),"\n",(0,s.jsx)(t.h4,{id:"raises",children:"Raises"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"DAValidationError"})," - If the date string is invalid or cannot be parsed."]}),"\n"]}),"\n",(0,s.jsx)("a",{id:"ALToolbox.ThreePartsDate.ThreePartsDate.transform"}),"\n",(0,s.jsx)(t.h3,{id:"transform",children:"transform"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"@classmethod\ndef transform(cls, item) -> Optional[datetime]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Transform a date string into a datetime object."}),"\n",(0,s.jsx)(t.h4,{id:"arguments-2",children:"Arguments"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"item"})," - The date string to transform."]}),"\n"]}),"\n",(0,s.jsx)(t.h4,{id:"returns-2",children:"Returns"}),"\n",(0,s.jsx)(t.p,{children:"datetime or None: The parsed datetime object, or None if empty."}),"\n",(0,s.jsx)("a",{id:"ALToolbox.ThreePartsDate.ThreePartsDate.default_for"}),"\n",(0,s.jsx)(t.h3,{id:"default_for",children:"default_for"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"@classmethod\ndef default_for(cls, item) -> Optional[str]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Convert a datetime object to MM/dd/yyyy format string."}),"\n",(0,s.jsx)(t.h4,{id:"arguments-3",children:"Arguments"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"item"})," - The datetime object to format."]}),"\n"]}),"\n",(0,s.jsx)(t.h4,{id:"returns-3",children:"Returns"}),"\n",(0,s.jsx)(t.p,{children:"str or None: The formatted date string, or None if empty."}),"\n",(0,s.jsx)("a",{id:"ALToolbox.ThreePartsDate.BirthDate"}),"\n",(0,s.jsx)(t.h2,{id:"birthdate-objects",children:"BirthDate Objects"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"class BirthDate(ThreePartsDate)\n"})}),"\n",(0,s.jsx)("a",{id:"ALToolbox.ThreePartsDate.BirthDate.validate"}),"\n",(0,s.jsx)(t.h3,{id:"validate-1",children:"validate"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"@classmethod\ndef validate(cls, item: str) -> bool\n"})}),"\n",(0,s.jsx)(t.p,{children:"Validate a birth date string ensuring it's a valid past date."}),"\n",(0,s.jsx)(t.p,{children:"Validates that the input is a properly formatted date string in MM/DD/YYYY\nformat that represents a date on or before today and after the year 1000.\nEmpty or None values are considered valid."}),"\n",(0,s.jsx)(t.h4,{id:"arguments-4",children:"Arguments"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"item"})," ",(0,s.jsx)(t.em,{children:"str"})," - The birth date string to validate in MM/DD/YYYY format."]}),"\n"]}),"\n",(0,s.jsx)(t.h4,{id:"returns-4",children:"Returns"}),"\n",(0,s.jsx)(t.p,{children:"True if the date is valid, otherwise raises DAValidationError."}),"\n",(0,s.jsx)(t.h4,{id:"raises-1",children:"Raises"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"DAValidationError"})," - If the date is invalid, improperly formatted,\nor in the future."]}),"\n"]})]})}function c(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>i,x:()=>l});var n=r(6540);const s={},a=n.createContext(s);function i(e){const t=n.useContext(a);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);