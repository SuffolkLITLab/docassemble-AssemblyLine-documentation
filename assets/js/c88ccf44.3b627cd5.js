"use strict";(self.webpackChunkdocassemble_assembly_line_documentation=self.webpackChunkdocassemble_assembly_line_documentation||[]).push([[5681],{4137:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),c=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=c(e.components);return i.createElement(l.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,f=u["".concat(l,".").concat(m)]||u[m]||p[m]||r;return n?i.createElement(f,s(s({ref:t},d),{},{components:n})):i.createElement(f,s({ref:t},d))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,s=new Array(r);s[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:a,s[1]=o;for(var c=2;c<r;c++)s[c]=n[c];return i.createElement.apply(null,s)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7814:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var i=n(7462),a=(n(7294),n(4137));const r={id:"defense",title:'"Safe" coding\n',sidebar_label:'"Safe" coding\n',slug:"/coding_style_guide/defense"},s=void 0,o={unversionedId:"coding_style/defense",id:"coding_style/defense",title:'"Safe" coding\n',description:"Use Docassemble lists, dictionaries, and sets, or subclasses",source:"@site/docs/coding_style/defense.md",sourceDirName:"coding_style",slug:"/coding_style_guide/defense",permalink:"/docassemble-AssemblyLine-documentation/docs/coding_style_guide/defense",draft:!1,editUrl:"https://github.com/SuffolkLITLab/docassemble-AssemblyLine-documentation/edit/main/docs/coding_style/defense.md",tags:[],version:"current",frontMatter:{id:"defense",title:'"Safe" coding\n',sidebar_label:'"Safe" coding\n',slug:"/coding_style_guide/defense"},sidebar:"mainSidebar",previous:{title:"Planning for translation",permalink:"/docassemble-AssemblyLine-documentation/docs/coding_style_guide/yaml_translation"},next:{title:"Interview accessibility",permalink:"/docassemble-AssemblyLine-documentation/docs/coding_style_guide/accessibility"}},l={},c=[{value:"Use Docassemble lists, dictionaries, and sets, or subclasses",id:"use-docassemble-lists-dictionaries-and-sets-or-subclasses",level:2},{value:"Look before you leap",id:"look-before-you-leap",level:2},{value:"Use <code>skip undefined</code> on attachment blocks",id:"use-skip-undefined-on-attachment-blocks",level:2},{value:"Use Python 3.8&#39;s <code>f</code> strings when composing strings",id:"use-python-38s-f-strings-when-composing-strings",level:2},{value:"Convert types or use more abstract interfaces",id:"convert-types-or-use-more-abstract-interfaces",level:2},{value:"Check for None",id:"check-for-none",level:2},{value:"Handle API error states",id:"handle-api-error-states",level:2},{value:"Further reading and sources",id:"further-reading-and-sources",level:2}],d={toc:c};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"use-docassemble-lists-dictionaries-and-sets-or-subclasses"},"Use Docassemble lists, dictionaries, and sets, or subclasses"),(0,a.kt)("p",null,"Docassemble relies heavily on exceptions for its declarative logic\nsystem. Those work better with the DAObject class and classes that\ninherit from it. Docassemble's DAObject class adds an ",(0,a.kt)("inlineCode",{parentName:"p"},"intrinsicName"),"\nattribute to every object that helps Docassemble track down a question\nthat is able to define a variable."),(0,a.kt)("p",null,"Where you make uses of lists, dictionaries, or sets, you should\ndefault to using either a DAList, DADict, or DASet, or a class that\ninherits from one of those classes."),(0,a.kt)("h2",{id:"look-before-you-leap"},"Look before you leap"),(0,a.kt)("p",null,"Check for existence if an attribute or object may not be defined:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"use ",(0,a.kt)("inlineCode",{parentName:"p"},"hasattr")," to check if an optional attribute is defined")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"use ",(0,a.kt)("inlineCode",{parentName:"p"},"defined()")," (sparingly) to check if an object or variable has been\ndefined (note there are significant performance implications with ",(0,a.kt)("inlineCode",{parentName:"p"},"defined()"),"\nso it should be used carefully)")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"use ",(0,a.kt)("inlineCode",{parentName:"p"},".get()")," with all dictionary lookups. Include a default value of the\ncorrect type, especially for nested lookups in API results.\ne.g.:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-python"},"my_dict.get('key1',{}).get('key2','')\n# NOT\n# my_dict['key1']['key2']\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"check list length before using a list index, or if you are using a DAList,\nuse the ",(0,a.kt)("inlineCode",{parentName:"p"},".item()")," method.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"next(iter(some_list), default_value)")," pattern when trying to gather\nthe first item in a list that may be empty."))),(0,a.kt)("h2",{id:"use-skip-undefined-on-attachment-blocks"},"Use ",(0,a.kt)("inlineCode",{parentName:"h2"},"skip undefined")," on attachment blocks"),(0,a.kt)("p",null,"When assembling documents, use the ",(0,a.kt)("inlineCode",{parentName:"p"},"skip undefined")," modifier in production.\n",(0,a.kt)("inlineCode",{parentName:"p"},"skip undefined")," should be used carefully as a safety measure, but not\nto replace spelled-out logic in your interview. It leaves undefined fields\nblank rather than triggering an exception."),(0,a.kt)("p",null,"When you use ",(0,a.kt)("inlineCode",{parentName:"p"},"skip undefined")," it is important that you trigger all required\nvariables in your interview order block."),(0,a.kt)("h2",{id:"use-python-38s-f-strings-when-composing-strings"},"Use Python 3.8's ",(0,a.kt)("inlineCode",{parentName:"h2"},"f")," strings when composing strings"),(0,a.kt)("p",null,"A common runtime bug is attempting to concatenate a string with a non-string\nvalue, such as ",(0,a.kt)("inlineCode",{parentName:"p"},"None"),"."),(0,a.kt)("p",null,"You can easily avoid these runtime errors by casting values to ",(0,a.kt)("inlineCode",{parentName:"p"},"str")," explicitly.\nThe most elegant current solution is to use ",(0,a.kt)("inlineCode",{parentName:"p"},"f")," strings."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'some_new_string = f"I like {fruit} the best"\n# NOT \n# some_new_string = "I like" + fruit + " the best"\n')),(0,a.kt)("p",null,"In addition to handling converting the value ",(0,a.kt)("inlineCode",{parentName:"p"},"fruit")," to string, the ",(0,a.kt)("inlineCode",{parentName:"p"},"f")," string\nexample is often clearer and easier to read, with less punctuation."),(0,a.kt)("h2",{id:"convert-types-or-use-more-abstract-interfaces"},"Convert types or use more abstract interfaces"),(0,a.kt)("p",null,"Does your function return a list, a set, or a tuple? Be careful when working\nwith collections that you know which data structure you are using."),(0,a.kt)("p",null,"When you create a function that accepts a list, you may want to explicitly\nconvert to a list before working with it in case a developer passes in a ",(0,a.kt)("inlineCode",{parentName:"p"},"set"),"."),(0,a.kt)("h2",{id:"check-for-none"},"Check for None"),(0,a.kt)("p",null,"It is common for Python functions to return ",(0,a.kt)("inlineCode",{parentName:"p"},"None")," in certain error\nconditions. Make sure that you handle that possibility."),(0,a.kt)("h2",{id:"handle-api-error-states"},"Handle API error states"),(0,a.kt)("p",null,"When working with APIs, be careful to handle possible failures. Decide what the\nfailure state should be for your end user. Ordinarily, API integrations in\nDocassemble are for convenience and your user should be able to continue in some\nfashion. You should never drop down to a Docassemble error screen when an\nexternal dependency fails or is unavailable."),(0,a.kt)("h2",{id:"further-reading-and-sources"},"Further reading and sources"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Defensive_programming"},"Defensive Programming"),", Wikipedia")))}u.isMDXComponent=!0}}]);