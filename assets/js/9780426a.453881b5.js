"use strict";(self.webpackChunkdocassemble_assembly_line_documentation=self.webpackChunkdocassemble_assembly_line_documentation||[]).push([[8234],{4137:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var o=a.createContext({}),u=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(o.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,i=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=u(n),k=l,h=d["".concat(o,".").concat(k)]||d[k]||m[k]||i;return n?a.createElement(h,r(r({ref:t},p),{},{components:n})):a.createElement(h,r({ref:t},p))}));function h(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=n.length,r=new Array(i);r[0]=k;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[d]="string"==typeof e?e:l,r[1]=s;for(var u=2;u<i;u++)r[u]=n[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},4171:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var a=n(7462),l=(n(7294),n(4137));const i={sidebar_label:"al_general",title:"AssemblyLine.al_general"},r=void 0,s={unversionedId:"reference/AssemblyLine/al_general",id:"reference/AssemblyLine/al_general",title:"AssemblyLine.al_general",description:"safe\\subdivision\\type",source:"@site/docs/reference/AssemblyLine/al_general.md",sourceDirName:"reference/AssemblyLine",slug:"/reference/AssemblyLine/al_general",permalink:"/docassemble-AssemblyLine-documentation/docs/reference/AssemblyLine/al_general",draft:!1,editUrl:"https://github.com/SuffolkLITLab/docassemble-AssemblyLine-documentation/edit/main/docs/reference/AssemblyLine/al_general.md",tags:[],version:"current",frontMatter:{sidebar_label:"al_general",title:"AssemblyLine.al_general"},sidebar:"docs",previous:{title:"al_general 01",permalink:"/docassemble-AssemblyLine-documentation/docs/framework/algeneral"},next:{title:"al_courts",permalink:"/docassemble-AssemblyLine-documentation/docs/reference/AssemblyLine/al_courts"}},o={},u=[{value:"safe_subdivision_type",id:"safe_subdivision_type",level:4},{value:"ALAddress Objects",id:"aladdress-objects",level:2},{value:"address_fields",id:"address_fields",level:4},{value:"formatted_unit",id:"formatted_unit",level:4},{value:"block",id:"block",level:4},{value:"line_one",id:"line_one",level:4},{value:"line_two",id:"line_two",level:4},{value:"on_one_line",id:"on_one_line",level:4},{value:"normalized_address",id:"normalized_address",level:4},{value:"state_name",id:"state_name",level:4},{value:"ALAddressList Objects",id:"aladdresslist-objects",level:2},{value:"__str__",id:"__str__",level:4},{value:"ALNameList Objects",id:"alnamelist-objects",level:2},{value:"__str__",id:"__str__-1",level:4},{value:"ALPeopleList Objects",id:"alpeoplelist-objects",level:2},{value:"names_and_addresses_on_one_line",id:"names_and_addresses_on_one_line",level:4},{value:"familiar",id:"familiar",level:4},{value:"familiar_or",id:"familiar_or",level:4},{value:"short_list",id:"short_list",level:4},{value:"full_names",id:"full_names",level:4},{value:"ALIndividual Objects",id:"alindividual-objects",level:2},{value:"signature_if_final",id:"signature_if_final",level:4},{value:"phone_numbers",id:"phone_numbers",level:4},{value:"contact_methods",id:"contact_methods",level:4},{value:"merge_letters",id:"merge_letters",level:4},{value:"formatted_age",id:"formatted_age",level:4},{value:"normalized_address",id:"normalized_address-1",level:4},{value:"name_fields",id:"name_fields",level:4},{value:"address_fields",id:"address_fields-1",level:4},{value:"gender_fields",id:"gender_fields",level:4},{value:"pronoun_fields",id:"pronoun_fields",level:4},{value:"get_pronouns",id:"get_pronouns",level:4},{value:"language_fields",id:"language_fields",level:4},{value:"language_name",id:"language_name",level:4},{value:"gender_male",id:"gender_male",level:4},{value:"gender_female",id:"gender_female",level:4},{value:"gender_other",id:"gender_other",level:4},{value:"gender_nonbinary",id:"gender_nonbinary",level:4},{value:"gender_unknown",id:"gender_unknown",level:4},{value:"gender_undisclosed",id:"gender_undisclosed",level:4},{value:"gender_self_described",id:"gender_self_described",level:4},{value:"contact_fields",id:"contact_fields",level:4},{value:"initials",id:"initials",level:4},{value:"address_block",id:"address_block",level:4},{value:"pronoun",id:"pronoun",level:4},{value:"pronoun_objective",id:"pronoun_objective",level:4},{value:"pronoun_possessive",id:"pronoun_possessive",level:4},{value:"pronoun_subjective",id:"pronoun_subjective",level:4},{value:"name_full",id:"name_full",level:4},{value:"name_initials",id:"name_initials",level:4},{value:"name_short",id:"name_short",level:4},{value:"section_links",id:"section_links",level:4},{value:"will_send_to_real_court",id:"will_send_to_real_court",level:4},{value:"filter_letters",id:"filter_letters",level:4},{value:"fa_icon",id:"fa_icon",level:4},{value:"is_sms_enabled",id:"is_sms_enabled",level:4},{value:"is_phone_or_email",id:"is_phone_or_email",level:4},{value:"github_modified_date",id:"github_modified_date",level:4},{value:"language_name",id:"language_name-1",level:4},{value:"safe_states_list",id:"safe_states_list",level:4},{value:"has_parsable_pronouns",id:"has_parsable_pronouns",level:4},{value:"parse_custom_pronouns",id:"parse_custom_pronouns",level:4},{value:"get_visible_al_nav_items",id:"get_visible_al_nav_items",level:4}],p={toc:u};function d(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h4",{id:"safe_subdivision_type"},"safe","_","subdivision","_","type"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def safe_subdivision_type(country_code: str) -> Optional[str]\n")),(0,l.kt)("p",null,"Returns the subdivision type for the country with the given country code.\nIf no subdivision type is found, returns None."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"country_code")," ",(0,l.kt)("em",{parentName:"li"},"str")," - The ISO-3166-1 alpha-2 code for the country.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Optional[str]")," - The subdivision type for the country with the given country code.")),(0,l.kt)("h2",{id:"aladdress-objects"},"ALAddress Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class ALAddress(Address)\n")),(0,l.kt)("p",null,"This class is used to store addresses. The ALAddress class extends the Address\nclass with the ",(0,l.kt)("inlineCode",{parentName:"p"},"address_fields()")," method and ",'"',"smarter",'"',"\nhandling of the unit attribute when printing a formatted address."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Attributes"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"address")," ",(0,l.kt)("em",{parentName:"li"},"str")," - The street where the person lives."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"unit")," ",(0,l.kt)("em",{parentName:"li"},"str")," - The unit number where the person lives."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"city")," ",(0,l.kt)("em",{parentName:"li"},"str")," - The city where the person lives."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"state")," ",(0,l.kt)("em",{parentName:"li"},"str")," - The state where the person lives."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"zip")," ",(0,l.kt)("em",{parentName:"li"},"str")," - The zip code where the person lives."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"country")," ",(0,l.kt)("em",{parentName:"li"},"str")," - The country where the person lives."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"impounded")," ",(0,l.kt)("em",{parentName:"li"},"Optional","[bool]")," - Whether the address is impounded.")),(0,l.kt)("h4",{id:"address_fields"},"address","_","fields"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def address_fields(\n        country_code: Optional[str] = None,\n        default_state: Optional[str] = None,\n        show_country: bool = False,\n        show_county: bool = False,\n        show_if: Union[str, Dict[str, str], None] = None,\n        allow_no_address: bool = False,\n        ask_if_impounded: Optional[bool] = False) -> List[Dict[str, Any]]\n")),(0,l.kt)("p",null,"Return a YAML structure representing the list of fields for the object","'","s address."),(0,l.kt)("p",null,"Optionally, allow the user to specify they do not have an address. When using\n",(0,l.kt)("inlineCode",{parentName:"p"},"allow_no_address=True"),", ensure to trigger the question with ",(0,l.kt)("inlineCode",{parentName:"p"},"users[0].address.has_no_address"),"\nrather than ",(0,l.kt)("inlineCode",{parentName:"p"},"users[0].address.address"),". If ",(0,l.kt)("inlineCode",{parentName:"p"},"show_if")," is used, it will not be applied when\n",(0,l.kt)("inlineCode",{parentName:"p"},"allow_no_address")," is also used. Ensure ",(0,l.kt)("inlineCode",{parentName:"p"},"country_code")," adheres to ISO-3166-1 alpha-2 code standard."),(0,l.kt)("p",null,"NOTE: This function is stateful under specific conditions. Refer to the conditions mentioned below."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"country_code")," ",(0,l.kt)("em",{parentName:"li"},"Optional","[str]")," - ISO-3166-1 alpha-2 code of the country. Defaults to None."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"default_state")," ",(0,l.kt)("em",{parentName:"li"},"Optional","[str]")," - Default state to set. Defaults to None."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"show_country")," ",(0,l.kt)("em",{parentName:"li"},"bool")," - Whether to display the country field. Defaults to False."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"show_county")," ",(0,l.kt)("em",{parentName:"li"},"bool")," - Whether to display the county field. Defaults to False."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"show_if")," ",(0,l.kt)("em",{parentName:"li"},"Union[str, Dict","[str, str]",", None]")," - Condition to display each field. Defaults to None."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"allow_no_address")," ",(0,l.kt)("em",{parentName:"li"},"bool")," - Allow users to specify they don","'","t have an address. Defaults to False."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ask_if_impounded")," ",(0,l.kt)("em",{parentName:"li"},"Optional","[bool]")," - Whether to ask if the address is impounded. Defaults to False.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"list")," - A list of YAML structure representing address fields.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Notes"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The function will set the ",(0,l.kt)("inlineCode",{parentName:"li"},"country")," attribute of the Address to ",(0,l.kt)("inlineCode",{parentName:"li"},"country_code")," under these\ncircumstances:")),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"country_code")," parameter is used."),(0,l.kt)("li",{parentName:"ol"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"show_country")," parameter is not used."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"country_code")," differs from the value returned by ",(0,l.kt)("inlineCode",{parentName:"li"},"get_country()"),".")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Link to ISO-3166-1 alpha-2 codes:\n",(0,l.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements"},"Officially assigned code elements"),".")),(0,l.kt)("h4",{id:"formatted_unit"},"formatted","_","unit"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def formatted_unit(language: Optional[str] = None,\n                   require: bool = False,\n                   bare: bool = False) -> str\n")),(0,l.kt)("p",null,"Returns the unit, formatted appropriately."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"language")," ",(0,l.kt)("em",{parentName:"li"},"str, optional")," - The language in which to format the unit. Defaults to None (which uses system language)."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"require")," ",(0,l.kt)("em",{parentName:"li"},"bool, optional")," - A flag indicating whether the unit is required. If set to True, the function will\nraise an error if the unit attribute does not exist. Defaults to False."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"bare")," ",(0,l.kt)("em",{parentName:"li"},"bool, optional")," - A flag indicating whether to add the word ","'","Unit","'"," before the unit number. If set to\nTrue, the function will not add ","'","Unit","'"," regardless of other conditions. Defaults to False.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"str")," - The formatted unit. If the unit attribute does not exist and require is set to False, this will be an\nempty string. If the unit attribute exists and is not None or an empty string, the function will return\nthe unit number, possibly prefixed with ","'","Unit","'",". If the unit attribute exists and is None or an empty\nstring, the function will return an empty string.")),(0,l.kt)("h4",{id:"block"},"block"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def block(language: Optional[str] = None,\n          international: bool = False,\n          show_country: Optional[bool] = None,\n          bare: bool = False,\n          long_state: bool = False,\n          show_impounded: bool = False) -> str\n")),(0,l.kt)("p",null,"Returns a one-line formatted address, primarily for geocoding."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"language")," ",(0,l.kt)("em",{parentName:"li"},"str, optional")," - Language for the address format."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"international")," ",(0,l.kt)("em",{parentName:"li"},"bool")," - If True, formats the address as an international address. Defaults to False."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"show_country")," ",(0,l.kt)("em",{parentName:"li"},"bool, optional")," - If True, includes the country in the formatted address.\nIf None, decides based on the country attribute."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"bare")," ",(0,l.kt)("em",{parentName:"li"},"bool")," - If True, excludes certain formatting elements. Defaults to False."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"long_state")," ",(0,l.kt)("em",{parentName:"li"},"bool")," - If True, uses the full state name. Defaults to False."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"show_impounded")," ",(0,l.kt)("em",{parentName:"li"},"bool")," - If True, shows the address even if impounded. Defaults to False.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"str")," - The one-line formatted address.")),(0,l.kt)("h4",{id:"line_one"},"line","_","one"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def line_one(language: Optional[str] = None,\n             bare: bool = False,\n             show_impounded: bool = False) -> str\n")),(0,l.kt)("p",null,"Returns the first line of the address, including the unit number if it exists."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"language")," ",(0,l.kt)("em",{parentName:"li"},"str, optional")," - Language for the address format."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"bare")," ",(0,l.kt)("em",{parentName:"li"},"bool")," - If True, excludes certain formatting elements. Defaults to False."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"show_impounded")," ",(0,l.kt)("em",{parentName:"li"},"bool")," - If True, shows the address even if impounded. Defaults to False.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"str")," - The first line of the address.")),(0,l.kt)("h4",{id:"line_two"},"line","_","two"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def line_two(language: Optional[str] = None,\n             long_state: bool = False,\n             show_impounded: bool = False) -> str\n")),(0,l.kt)("p",null,"Returns the second line of the address, including city, state, and postal code."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"language")," ",(0,l.kt)("em",{parentName:"li"},"str, optional")," - Language for the address format."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"long_state")," ",(0,l.kt)("em",{parentName:"li"},"bool")," - If True, uses the full state name. Defaults to False."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"show_impounded")," ",(0,l.kt)("em",{parentName:"li"},"bool")," - If True, shows the address even if impounded. Defaults to False.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"str")," - The second line of the address.")),(0,l.kt)("h4",{id:"on_one_line"},"on","_","one","_","line"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def on_one_line(include_unit: bool = True,\n                omit_default_country: bool = True,\n                language: Optional[str] = None,\n                show_country: Optional[bool] = None,\n                bare: bool = False,\n                long_state: bool = False,\n                show_impounded: bool = False) -> str\n")),(0,l.kt)("p",null,"Returns a one-line formatted address."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"include_unit")," ",(0,l.kt)("em",{parentName:"li"},"bool")," - If True, includes the unit in the formatted address. Defaults to True."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"omit_default_country")," ",(0,l.kt)("em",{parentName:"li"},"bool")," - If True, doesn","'","t show the Docassemble default country in the formatted address. Defaults to True."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"language")," ",(0,l.kt)("em",{parentName:"li"},"str, optional")," - Language for the address format."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"show_country")," ",(0,l.kt)("em",{parentName:"li"},"bool, optional")," - If True, includes the country in the formatted address.\nIf None, decides based on the country attribute."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"bare")," ",(0,l.kt)("em",{parentName:"li"},"bool")," - If True, excludes certain formatting elements. Defaults to False."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"long_state")," ",(0,l.kt)("em",{parentName:"li"},"bool")," - If True, uses the full state name. Defaults to False."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"show_impounded")," ",(0,l.kt)("em",{parentName:"li"},"bool")," - If True, shows the address even if impounded. Defaults to False.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"str")," - The one-line formatted address.")),(0,l.kt)("h4",{id:"normalized_address"},"normalized","_","address"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def normalized_address() -> Union[Address, "ALAddress"]\n')),(0,l.kt)("p",null,"Try geocoding the address, returning the normalized version if successful."),(0,l.kt)("p",null,"If geocoding is successful, the method returns the ",'"',"long",'"'," normalized version\nof the address. All methods, such as ",(0,l.kt)("inlineCode",{parentName:"p"},"my_address.normalized_address().block()"),", are\nstill available on the returned object. However, note that the returned object will\nbe a standard Address object, not an ALAddress object. If geocoding fails, it returns\nthe version of the address as entered by the user."),(0,l.kt)("p",null,"Warning: currently the normalized address will not be redacted if the address is impounded."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  Union","[Address, ",'"',"ALAddress",'"]',": Normalized address if geocoding is successful, otherwise\nthe original address."),(0,l.kt)("h4",{id:"state_name"},"state","_","name"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def state_name(country_code: Optional[str] = None) -> str\n")),(0,l.kt)("p",null,"Returns the full state name based on the state abbreviation."),(0,l.kt)("p",null,"If a ",(0,l.kt)("inlineCode",{parentName:"p"},"country_code")," is provided, it will override the country attribute of the Address\nobject. Otherwise, the method uses, in order:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"The country code associated with the Address object, and then"),(0,l.kt)("li",{parentName:"ol"},"The country set in the global config for the server.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"country_code")," ",(0,l.kt)("em",{parentName:"li"},"str, optional")," - ISO-3166-1 alpha-2 code to override the country attribute of\nthe Address object. For valid codes, refer to:\n",(0,l.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements"},"https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements"))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"str")," - The full state name corresponding to the state abbreviation. If an error occurs\nor the full name cannot be determined, returns the state abbreviation.")),(0,l.kt)("h2",{id:"aladdresslist-objects"},"ALAddressList Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class ALAddressList(DAList)\n")),(0,l.kt)("p",null,"A class to store a list of ALAddress objects."),(0,l.kt)("p",null,"Extends the DAList class and specifically caters to ALAddress objects.\nIt provides methods to initialize the list and get a string representation\nof the list in a formatted manner."),(0,l.kt)("h4",{id:"__str__"},"_","_","str","_","_"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def __str__() -> str\n")),(0,l.kt)("p",null,"Provide a string representation of the ALAddressList."),(0,l.kt)("p",null,"This method returns the addresses in the list formatted in a\ncomma-separated manner using the on_one_line method of ALAddress."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"str")," - Formatted string of all addresses in the list.")),(0,l.kt)("h2",{id:"alnamelist-objects"},"ALNameList Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class ALNameList(DAList)\n")),(0,l.kt)("p",null,"A class to store a list of IndividualName objects."),(0,l.kt)("p",null,"Extends the DAList class and is tailored for IndividualName objects."),(0,l.kt)("h4",{id:"__str__-1"},"_","_","str","_","_"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def __str__() -> str\n")),(0,l.kt)("p",null,"Provide a string representation of the ALNameList."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"str")," - Formatted string of all names in the list.")),(0,l.kt)("h2",{id:"alpeoplelist-objects"},"ALPeopleList Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class ALPeopleList(DAList)\n")),(0,l.kt)("p",null,"Class to store a list of ALIndividual objects, representing people."),(0,l.kt)("p",null,"For example, defendants, plaintiffs, or children."),(0,l.kt)("h4",{id:"names_and_addresses_on_one_line"},"names","_","and","_","addresses","_","on","_","one","_","line"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def names_and_addresses_on_one_line(comma_string: str = "; ",\n                                    bare=False) -> str\n')),(0,l.kt)("p",null,"Provide names and addresses of individuals on one line."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"comma_string")," ",(0,l.kt)("em",{parentName:"li"},"str, optional")," - The string to use between name-address pairs. Defaults to ","'","; ","'","."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"bare")," ",(0,l.kt)("em",{parentName:"li"},"bool, optional")," - If True, prevents appending the word ",'"',"Unit",'"'," to the unit attribute. Defaults to False.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"str")," - Formatted string of names followed by addresses.")),(0,l.kt)("h4",{id:"familiar"},"familiar"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def familiar() -> str\n")),(0,l.kt)("p",null,"Provide a list of familiar forms of names of individuals."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"str")," - Formatted string of familiar names.")),(0,l.kt)("h4",{id:"familiar_or"},"familiar","_","or"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def familiar_or() -> str\n")),(0,l.kt)("p",null,"Provide a list of familiar forms of names of individuals separated by ","'","or","'","."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"str")," - Formatted string of familiar names separated by ","'","or","'",".")),(0,l.kt)("h4",{id:"short_list"},"short","_","list"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def short_list(limit: int, truncate_string: str = ", et. al.") -> str\n')),(0,l.kt)("p",null,"Return a subset of the list, truncated with ","'","et. al.","'"," if it exceeds a given limit."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"limit")," ",(0,l.kt)("em",{parentName:"li"},"int")," - The maximum number of items to display before truncating."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"truncate_string")," ",(0,l.kt)("em",{parentName:"li"},"str, optional")," - The string to append when truncating. Defaults to ","'",", et. al.","'",".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"str")," - Formatted string of names, truncated if needed.")),(0,l.kt)("h4",{id:"full_names"},"full","_","names"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def full_names(comma_string=", ", and_string=word("and")) -> str\n')),(0,l.kt)("p",null,"Return a formatted list of full names of individuals."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"comma_string")," ",(0,l.kt)("em",{parentName:"li"},"str, optional")," - The string to use between names. Defaults to ","'",",","'","."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"and_string")," ",(0,l.kt)("em",{parentName:"li"},"str, optional")," - The string to use before the last name in the list. Defaults to ","'","and","'",".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"str")," - Formatted string of full names.")),(0,l.kt)("h2",{id:"alindividual-objects"},"ALIndividual Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class ALIndividual(Individual)\n")),(0,l.kt)("p",null,"Used to represent an Individual on the assembly line project."),(0,l.kt)("p",null,"This class extends the Individual class and adds more tailored attributes and methods\nrelevant for the assembly line project. Specifically, it has attributes for previous addresses,\nother addresses, mailing addresses, previous names, aliases, and a preferred name."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Attributes"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"previous_addresses")," ",(0,l.kt)("em",{parentName:"li"},"ALAddressList")," - List of previous addresses."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"other_addresses")," ",(0,l.kt)("em",{parentName:"li"},"ALAddressList")," - List of other addresses."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"mailing_address")," ",(0,l.kt)("em",{parentName:"li"},"ALAddress")," - Current mailing address."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"service_address")," ",(0,l.kt)("em",{parentName:"li"},"ALAddress")," - Service address."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"previous_names")," ",(0,l.kt)("em",{parentName:"li"},"ALNameList")," - List of previous names."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"aliases")," ",(0,l.kt)("em",{parentName:"li"},"ALNameList")," - List of aliases."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"preferred_name")," ",(0,l.kt)("em",{parentName:"li"},"IndividualName")," - The preferred name.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Notes"),":"),(0,l.kt)("p",null,"  Objects as attributes should not be passed directly to the constructor due to\ninitialization requirements in the Docassemble framework. See the ",(0,l.kt)("inlineCode",{parentName:"p"},"init")," method."),(0,l.kt)("h4",{id:"signature_if_final"},"signature","_","if","_","final"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def signature_if_final(i: str) -> Union[DAFile, str]\n")),(0,l.kt)("p",null,"Returns the individual","'","s signature if ",(0,l.kt)("inlineCode",{parentName:"p"},"i")," is ",'"',"final",'"',", which usually means we are assembling the final version of the document (as opposed to a preview)."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"i")," ",(0,l.kt)("em",{parentName:"li"},"str")," - The condition which, if set to ",'"',"final",'"',", returns the signature.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  Union","[DAFile, str]",": The signature if the condition is met, otherwise an empty string."),(0,l.kt)("h4",{id:"phone_numbers"},"phone","_","numbers"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def phone_numbers(country: Optional[str] = None,\n                  show_impounded: bool = False) -> str\n")),(0,l.kt)("p",null,"Fetches and formats the phone numbers of the individual."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"country")," ",(0,l.kt)("em",{parentName:"li"},"str, optional")," - The country for phone number formatting. Defaults to the country of the docassemble server."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"show_impounded")," ",(0,l.kt)("em",{parentName:"li"},"bool")," - If True, shows the phone numbers even if impounded. Defaults to False.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"str")," - Formatted string of phone numbers.")),(0,l.kt)("h4",{id:"contact_methods"},"contact","_","methods"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def contact_methods() -> str\n")),(0,l.kt)("p",null,"Generates a formatted string of all provided contact methods."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"str")," - A formatted string indicating the available methods to contact the individual.")),(0,l.kt)("h4",{id:"merge_letters"},"merge","_","letters"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def merge_letters(new_letters: str) -> None\n")),(0,l.kt)("p",null,"If the Individual has a child_letters attribute, add the new letters to the existing list"),(0,l.kt)("p",null,"Avoid using. Only used in 209A."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"new_letters")," ",(0,l.kt)("em",{parentName:"li"},"str")," - The new letters to add to the existing list of letters")),(0,l.kt)("h4",{id:"formatted_age"},"formatted","_","age"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def formatted_age() -> str\n")),(0,l.kt)("p",null,"Calculates and formats the age of the individual based on their birthdate."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"str")," - Formatted age string that shows the most relevant time unit; for example, if under 2 years, it will return ",'"',"X months",'"',".")),(0,l.kt)("h4",{id:"normalized_address-1"},"normalized","_","address"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def normalized_address() -> Union[Address, ALAddress]\n")),(0,l.kt)("p",null,"Fetches the normalized version of the address."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  Union","[Address, ALAddress]",": The normalized address object."),(0,l.kt)("h4",{id:"name_fields"},"name","_","fields"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def name_fields(\n        person_or_business: str = "person",\n        show_suffix: bool = True,\n        show_title: bool = False,\n        title_options: Optional[List[str]] = None,\n        show_if: Union[str, Dict[str, str],\n                       None] = None) -> List[Dict[str, str]]\n')),(0,l.kt)("p",null,"Generates suitable field prompts for a name based on the type of entity (person or business)\nand other provided parameters."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"person_or_business")," ",(0,l.kt)("em",{parentName:"li"},"str, optional")," - Specifies the entity type. It can either be ",'"',"person",'"'," or ",'"',"business",'"',".\nDefault is ",'"',"person",'"',"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"show_suffix")," ",(0,l.kt)("em",{parentName:"li"},"bool, optional")," - Determines if the name","'","s suffix (e.g., Jr., Sr.) should be included in the prompts.\nDefault is True."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"show_title")," - (bool, optional): Determines if the name","'","s title (e.g., Mr., Ms.) should be included in the prompts.\nDefault is False."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"title_options")," ",(0,l.kt)("em",{parentName:"li"},"List","[str]",", optional")," - A list of title options to use in the prompts. Default is defined as a list\nof common titles in English-speaking countries."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"show_if")," ",(0,l.kt)("em",{parentName:"li"},"Union[str, Dict","[str, str]",", None], optional")," - Condition to determine which fields to show.\nIt can be a string, a dictionary with conditions, or None. Default is None.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  List[Dict","[str, str]","]: A list of dictionaries where each dictionary contains field prompt details."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Notes"),":"),(0,l.kt)("p",null,"  If ",(0,l.kt)("inlineCode",{parentName:"p"},"person_or_business")," is set to None, the method will offer the end user a choice\nand will set appropriate ",'"',"show ifs",'"'," conditions for each type."),(0,l.kt)("h4",{id:"address_fields-1"},"address","_","fields"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def address_fields(country_code: str = "US",\n                   default_state: Optional[str] = None,\n                   show_country: bool = False,\n                   show_county: bool = False,\n                   show_if: Union[str, Dict[str, str], None] = None,\n                   allow_no_address: bool = False,\n                   ask_if_impounded: bool = False) -> List[Dict[str, str]]\n')),(0,l.kt)("p",null,"Generate field prompts for capturing an address."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"country_code")," ",(0,l.kt)("em",{parentName:"li"},"str")," - The default country for the address. Defaults to ",'"',"US",'"',"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"default_state")," ",(0,l.kt)("em",{parentName:"li"},"Optional","[str]")," - Default state if applicable. Defaults to None."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"show_country")," ",(0,l.kt)("em",{parentName:"li"},"bool")," - Whether to display the country field. Defaults to False."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"show_county")," ",(0,l.kt)("em",{parentName:"li"},"bool")," - Whether to display the county field. Defaults to False."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"show_if")," ",(0,l.kt)("em",{parentName:"li"},"Union[str, Dict","[str, str]",", None]")," - Condition to determine if the field should be shown. Defaults to None."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"allow_no_address")," ",(0,l.kt)("em",{parentName:"li"},"bool")," - Whether to permit entries with no address. Defaults to False."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ask_if_impounded")," ",(0,l.kt)("em",{parentName:"li"},"bool")," - Whether to ask if the address is impounded. Defaults to False.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  List[Dict","[str, str]","]: A list of dictionaries with field prompts for addresses."),(0,l.kt)("h4",{id:"gender_fields"},"gender","_","fields"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def gender_fields(\n        show_help=False,\n        show_if: Union[str, Dict[str, str],\n                       None] = None) -> List[Dict[str, str]]\n")),(0,l.kt)("p",null,"Generate fields for capturing gender information, including a\nself-described option."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"show_help")," ",(0,l.kt)("em",{parentName:"li"},"bool")," - Whether to show additional help text. Defaults to False."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"show_if")," ",(0,l.kt)("em",{parentName:"li"},"Union[str, Dict","[str, str]",", None]")," - Condition to determine if the field should be shown. Defaults to None.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  List[Dict","[str, str]","]: A list of dictionaries with field prompts for gender."),(0,l.kt)("h4",{id:"pronoun_fields"},"pronoun","_","fields"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def pronoun_fields(\n    show_help=False,\n    show_if: Union[str, Dict[str, str], None] = None,\n    required: bool = False,\n    shuffle: bool = False,\n    show_unknown: Optional[Union[Literal["guess"], bool]] = "guess"\n) -> List[Dict[str, str]]\n')),(0,l.kt)("p",null,"Generate fields for capturing pronoun information."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"show_help")," ",(0,l.kt)("em",{parentName:"li"},"bool")," - Whether to show additional help text. Defaults to False."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"show_if")," ",(0,l.kt)("em",{parentName:"li"},"Union[str, Dict","[str, str]",", None]")," - Condition to determine if the field should be shown. Defaults to None."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"required")," ",(0,l.kt)("em",{parentName:"li"},"bool")," - Whether the field is required. Defaults to False."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"shuffle")," ",(0,l.kt)("em",{parentName:"li"},"bool")," - Whether to shuffle the order of pronouns. Defaults to False."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"show_unknown")," ",(0,l.kt)("em",{parentName:"li"},"Union[Literal",'["',"guess",'"]',", bool]")," - Whether to show an ",'"',"unknown",'"'," option. Can be ",'"',"guess",'"',", True, or False. Defaults to ",'"',"guess",'"',".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  List[Dict","[str, str]","]: A list of dictionaries with field prompts for pronouns."),(0,l.kt)("h4",{id:"get_pronouns"},"get","_","pronouns"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def get_pronouns() -> set\n")),(0,l.kt)("p",null,"Retrieve a set of the individual","'","s pronouns."),(0,l.kt)("p",null,"If the individual has selected the ",'"',"self-described",'"'," option, it will use their custom input."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"set")," - A set of strings representing the individual","'","s pronouns.")),(0,l.kt)("h4",{id:"language_fields"},"language","_","fields"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def language_fields(\n        choices: Optional[List[Dict[str, str]]] = None,\n        style: str = "radio",\n        show_if: Union[str, Dict[str, str],\n                       None] = None) -> List[Dict[str, str]]\n')),(0,l.kt)("p",null,"Generate fields for capturing language preferences."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"choices")," ",(0,l.kt)("em",{parentName:"li"},"Optional[List[Dict","[str, str]","]]")," - A list of language choices. Defaults to None."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"style")," ",(0,l.kt)("em",{parentName:"li"},"str")," - The display style of choices. Defaults to ",'"',"radio",'"',"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"show_if")," ",(0,l.kt)("em",{parentName:"li"},"Union[str, Dict","[str, str]",", None]")," - Condition to determine if the field should be shown. Defaults to None.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  List[Dict","[str, str]","]: A list of dictionaries with field prompts for language preferences."),(0,l.kt)("h4",{id:"language_name"},"language","_","name"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def language_name() -> str\n")),(0,l.kt)("p",null,"Get the human-readable version of the individual","'","s selected language."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"str")," - The human-readable version of the language. If ","'","other","'"," is selected,\nit returns the value in ",(0,l.kt)("inlineCode",{parentName:"li"},"language_other"),". Otherwise, it uses the\n",(0,l.kt)("inlineCode",{parentName:"li"},"language_name")," function.")),(0,l.kt)("h4",{id:"gender_male"},"gender","_","male"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef gender_male() -> bool\n")),(0,l.kt)("p",null,"Returns True only if the gender is male."),(0,l.kt)("p",null,"Used to assist with checkbox filling in PDFs with ",'"',"skip undefined",'"',"\nturned on."),(0,l.kt)("h4",{id:"gender_female"},"gender","_","female"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef gender_female() -> bool\n")),(0,l.kt)("p",null,"Returns True only if the gender is female."),(0,l.kt)("p",null,"Used to assist with checkbox filling in PDFs with ",'"',"skip undefined",'"',"\nturned on."),(0,l.kt)("h4",{id:"gender_other"},"gender","_","other"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef gender_other() -> bool\n")),(0,l.kt)("p",null,"Returns True only if the gender is not male or female."),(0,l.kt)("p",null,"Used to assist with checkbox filling in PDFs with ",'"',"skip undefined",'"',"\nturned on."),(0,l.kt)("h4",{id:"gender_nonbinary"},"gender","_","nonbinary"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef gender_nonbinary() -> bool\n")),(0,l.kt)("p",null,"Returns True only if the gender is nonbinary."),(0,l.kt)("p",null,"Used to assist with checkbox filling in PDFs with ",'"',"skip undefined",'"',"\nturned on."),(0,l.kt)("h4",{id:"gender_unknown"},"gender","_","unknown"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef gender_unknown() -> bool\n")),(0,l.kt)("p",null,"Returns True only if the gender is unknown."),(0,l.kt)("p",null,"Used to assist with checkbox filling in PDFs with ",'"',"skip undefined",'"',"\nturned on."),(0,l.kt)("h4",{id:"gender_undisclosed"},"gender","_","undisclosed"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef gender_undisclosed() -> bool\n")),(0,l.kt)("p",null,"Returns True only if the gender is not disclosed (",'"',"prefer-not-to-say",'"',")"),(0,l.kt)("p",null,"Used to assist with checkbox filling in PDFs with ",'"',"skip undefined",'"',"\nturned on."),(0,l.kt)("h4",{id:"gender_self_described"},"gender","_","self","_","described"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef gender_self_described() -> bool\n")),(0,l.kt)("p",null,"Returns True only if the gender is self described."),(0,l.kt)("p",null,"Used to assist with checkbox filling in PDFs with ",'"',"skip undefined",'"',"\nturned on."),(0,l.kt)("h4",{id:"contact_fields"},"contact","_","fields"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def contact_fields() -> None\n")),(0,l.kt)("p",null,"Return field prompts for other contact info"),(0,l.kt)("h4",{id:"initials"},"initials"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef initials() -> str\n")),(0,l.kt)("p",null,"Returns the initials of the individual as a string."),(0,l.kt)("p",null,"For example, ",'"',"Quinten K Steenhuis",'"'," would return ",'"',"QKS",'"',"."),(0,l.kt)("h4",{id:"address_block"},"address","_","block"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def address_block(language=None,\n                  international=False,\n                  show_country=False,\n                  bare=False,\n                  show_impounded=False) -> str\n")),(0,l.kt)("p",null,"Generate a formatted address block for mailings."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"language")," ",(0,l.kt)("em",{parentName:"li"},"Optional")," - The language in which the address is written."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"international")," ",(0,l.kt)("em",{parentName:"li"},"bool")," - If True, format for international mailing. Defaults to False."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"show_country")," ",(0,l.kt)("em",{parentName:"li"},"bool")," - If True, include the country in the address. Defaults to False."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"bare")," ",(0,l.kt)("em",{parentName:"li"},"bool")," - If True, produce the address without additional formatting. Defaults to False."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"show_impounded")," ",(0,l.kt)("em",{parentName:"li"},"bool")," - If True, show the address even if it is impounded. Defaults to False.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"str")," - The formatted address block.")),(0,l.kt)("h4",{id:"pronoun"},"pronoun"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def pronoun(**kwargs) -> str\n")),(0,l.kt)("p",null,"Returns an objective pronoun as appropriate, based on attributes."),(0,l.kt)("p",null,"The pronoun could be ",'"',"you,",'"'," ",'"',"her,",'"'," ",'"',"him,",'"'," ",'"',"it,",'"'," or ",'"',"them",'"',". It depends\non the ",(0,l.kt)("inlineCode",{parentName:"p"},"gender")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"person_type")," attributes and whether the individual\nis the current user."),(0,l.kt)("p",null,"If the user selected specific pronouns, they take priority over\ngender (only if they chose a pronoun from the list)"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"**kwargs")," - Additional keyword arguments.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"str")," - The appropriate pronoun.")),(0,l.kt)("h4",{id:"pronoun_objective"},"pronoun","_","objective"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def pronoun_objective(**kwargs) -> str\n")),(0,l.kt)("p",null,"Returns the same pronoun as the ",(0,l.kt)("inlineCode",{parentName:"p"},"pronoun()")," method."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"**kwargs")," - Additional keyword arguments.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"str")," - The appropriate objective pronoun.")),(0,l.kt)("h4",{id:"pronoun_possessive"},"pronoun","_","possessive"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def pronoun_possessive(target, **kwargs) -> str\n")),(0,l.kt)("p",null,"Returns a possessive pronoun and a target word, based on attributes."),(0,l.kt)("p",null,"Given a target word, the function returns ",'"',"{pronoun} {target}",'"',". The pronoun could be\n",'"',"her,",'"'," ",'"',"his,",'"'," ",'"',"its,",'"'," or ",'"',"their",'"',". It depends on the ",(0,l.kt)("inlineCode",{parentName:"p"},"gender")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"person_type")," attributes\nand whether the individual is the current user."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"target")," ",(0,l.kt)("em",{parentName:"li"},"str")," - The target word to follow the pronoun."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"**kwargs")," - Additional keyword arguments.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"str")," - The appropriate possessive phrase.")),(0,l.kt)("h4",{id:"pronoun_subjective"},"pronoun","_","subjective"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def pronoun_subjective(**kwargs) -> str\n")),(0,l.kt)("p",null,"Returns a subjective pronoun, based on attributes."),(0,l.kt)("p",null,"The pronoun could be ",'"',"you,",'"'," ",'"',"she,",'"'," ",'"',"he,",'"'," ",'"',"it,",'"'," or ",'"',"they",'"',". It depends\non the ",(0,l.kt)("inlineCode",{parentName:"p"},"gender")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"person_type")," attributes and whether the individual\nis the current user."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"**kwargs")," - Additional keyword arguments.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"str")," - The appropriate subjective pronoun.")),(0,l.kt)("h4",{id:"name_full"},"name","_","full"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def name_full() -> str\n")),(0,l.kt)("p",null,"Returns the individual","'","s full name."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"str")," - The individual","'","s full name.")),(0,l.kt)("h4",{id:"name_initials"},"name","_","initials"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def name_initials() -> str\n")),(0,l.kt)("p",null,"Returns the individual","'","s name with the middle name as an initial.\nEquivalent to ",(0,l.kt)("inlineCode",{parentName:"p"},"name.full(middle=&quot;initial&quot;)"),", which is also the default.\nDefined only to make it possible to be explicit about the name form."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"str")," - The individual","'","s name with the middle name as an initial.")),(0,l.kt)("h4",{id:"name_short"},"name","_","short"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def name_short() -> str\n")),(0,l.kt)("p",null,"Returns the individual","'","s name without any middle name."),(0,l.kt)("p",null,"Equivalent to self.name.firstlast()"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"str")," - The individual","'")),(0,l.kt)("h4",{id:"section_links"},"section","_","links"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def section_links(nav) -> List[str]\n")),(0,l.kt)("p",null,"Returns a list of clickable navigation links without animation."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"nav")," - The navigation object.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"List[str]")," - A list of clickable navigation links without animation.")),(0,l.kt)("h4",{id:"will_send_to_real_court"},"will","_","send","_","to","_","real","_","court"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def will_send_to_real_court() -> bool\n")),(0,l.kt)("p",null,"For legacy email to court forms, this checks to see if the form\nis being run on the dev, test, or production server."),(0,l.kt)("p",null,"The text ",'"',"dev",'"'," or ",'"',"test",'"'," needs to be in the URL root in the DA config: can change in ",(0,l.kt)("inlineCode",{parentName:"p"},"/config"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"bool")," - True if the form is being run on the dev, test, or production server.")),(0,l.kt)("h4",{id:"filter_letters"},"filter","_","letters"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def filter_letters(letter_strings: Union[List[str], str]) -> str\n")),(0,l.kt)("p",null,"Used to take a list of letters like ",'["',"A",'"',",",'"',"ABC",'"',",",'"',"AB",'"]'," and filter out any duplicate letters."),(0,l.kt)("p",null,"Avoid using, this is created for 209A."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"letter_strings")," ",(0,l.kt)("em",{parentName:"li"},"Union[List","[str]",", str]")," - A list of letters.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"str")," - A string of unique letters.")),(0,l.kt)("h4",{id:"fa_icon"},"fa","_","icon"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def fa_icon(icon: str,\n            color: str = "primary",\n            color_css: Optional[str] = None,\n            size: str = "sm") -> str\n')),(0,l.kt)("p",null,"Return HTML for a font-awesome icon of the specified size and color. You can reference\na CSS variable (such as Bootstrap theme color) or a true CSS color reference, such as ","'","blue","'"," or\n","'",(0,l.kt)("inlineCode",{parentName:"p"},"DDDDDD"),"'",". Defaults to Bootstrap theme color ",'"',"primary",'"',"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"icon")," ",(0,l.kt)("em",{parentName:"li"},"str")," - The name of the icon to use. See ",(0,l.kt)("a",{parentName:"li",href:"https://fontawesome.com/icons"},"https://fontawesome.com/icons")," for a list of icons."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"color")," ",(0,l.kt)("em",{parentName:"li"},"str")," - The color of the icon. Defaults to ",'"',"primary",'"',"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"color_css")," ",(0,l.kt)("em",{parentName:"li"},"Optional","[str]")," - A CSS variable or color reference. Defaults to None."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"size")," ",(0,l.kt)("em",{parentName:"li"},"str")," - The size of the icon. Defaults to ",'"',"sm",'"',".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"str")," - HTML for the icon.")),(0,l.kt)("h4",{id:"is_sms_enabled"},"is","_","sms","_","enabled"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def is_sms_enabled() -> bool\n")),(0,l.kt)("p",null,"Checks if SMS (Twilio) is enabled on the server. Does not verify that it works."),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"https://docassemble.org/docs/config.html#twilio"},"https://docassemble.org/docs/config.html#twilio")," for more info."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"bool")," - True if there is a non-empty Twilio config on the server, False otherwise")),(0,l.kt)("h4",{id:"is_phone_or_email"},"is","_","phone","_","or","_","email"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def is_phone_or_email(text: str) -> bool\n")),(0,l.kt)("p",null,"Returns True if the string is either a valid phone number or a valid email address.\nIf SMS is not enabled on the server (through the Twilio config), only accepts emails.\nEmail validation is extremely minimal--just checks for an @ sign between two non-zero length\nstrings."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"text")," ",(0,l.kt)("em",{parentName:"li"},"str")," - The string to check.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"bool")," - True if the string is either a valid phone number or a valid email address.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Raises"),":"),(0,l.kt)("p",null,"  DAValidationError if the string is neither a valid phone number nor a valid email address."),(0,l.kt)("h4",{id:"github_modified_date"},"github","_","modified","_","date"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def github_modified_date(github_user: str,\n                         github_repo_name: str,\n                         auth=None) -> Union[DADateTime, None]\n")),(0,l.kt)("p",null,"Returns the date that the given GitHub repository was modified or None if API call fails."),(0,l.kt)("p",null,"Will check for the presence of credentials in the configuration labeled ",'"',"github issues",'"',"\nin this format:"),(0,l.kt)("p",null,"github issues:\nusername: YOUR_GITHUB_USERNAME\ntoken: YOUR_GITHUB_PRIVATE_TOKEN"),(0,l.kt)("p",null,"If those credentials aren","'","t found, it will then search for credentials in this format (deprecated):"),(0,l.kt)("p",null,"github readonly:\nusername: YOUR_GITHUB_USERNAME\npassword: YOUR_GITHUB_PRIVATE_TOKEN\ntype: basic"),(0,l.kt)("p",null,"If no valid auth information is in the configuration, it will fall back to anonymous authentication.\nThe GitHub API is rate-limited to 60 anonymous API queries/hour."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"github_user")," ",(0,l.kt)("em",{parentName:"li"},"str")," - The GitHub username of the repository owner."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"github_repo_name")," ",(0,l.kt)("em",{parentName:"li"},"str")," - The name of the repository."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"auth")," ",(0,l.kt)("em",{parentName:"li"},"Optional","[dict]")," - A dictionary containing authentication information. Defaults to None.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  Union","[DADateTime, None]",": The date that the given GitHub repository was modified or None if API call fails."),(0,l.kt)("h4",{id:"language_name-1"},"language","_","name"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def language_name(language_code: str) -> str\n")),(0,l.kt)("p",null,"Given a 2 digit language code abbreviation, returns the full\nname of the language. The language name will be passed through the ",(0,l.kt)("inlineCode",{parentName:"p"},"word()"),"\nfunction."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"language_code")," ",(0,l.kt)("em",{parentName:"li"},"str")," - A 2 digit language code abbreviation.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"str")," - The full name of the language.")),(0,l.kt)("h4",{id:"safe_states_list"},"safe","_","states","_","list"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def safe_states_list(country_code: str) -> List[Dict[str, str]]\n")),(0,l.kt)("p",null,"Wrapper around states_list that doesn","'","t error if passed\nan invalid country_code (e.g., a country name spelled out)"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"country_code")," ",(0,l.kt)("em",{parentName:"li"},"str")," - A 2 digit country code abbreviation.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  List[Dict","[str, str]","]: A list of dictionaries with field prompts for states."),(0,l.kt)("h4",{id:"has_parsable_pronouns"},"has","_","parsable","_","pronouns"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def has_parsable_pronouns(pronouns: str) -> bool\n")),(0,l.kt)("p",null,"Returns True if the pronouns string can be parsed into a dictionary of pronouns."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"pronouns")," - a string of pronouns in the format ",'"',"objective/subjective/possessive",'"')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  True if the pronouns string can be parsed into a dictionary of pronouns, False otherwise"),(0,l.kt)("h4",{id:"parse_custom_pronouns"},"parse","_","custom","_","pronouns"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def parse_custom_pronouns(pronouns: str) -> Dict[str, str]\n")),(0,l.kt)("p",null,"Parses a custom pronoun string into a dictionary of pronouns."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"pronouns")," - a string of pronouns in the format ",'"',"objective/subjective/possessive",'"')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  a dictionary of pronouns in the format {",'"',"o",'"',": objective, ",'"',"s",'"',": subjective, ",'"',"p",'"',": possessive}"),(0,l.kt)("h4",{id:"get_visible_al_nav_items"},"get","_","visible","_","al","_","nav","_","items"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def get_visible_al_nav_items(\n        nav_items: List[Union[str, dict]]) -> List[Union[str, dict]]\n")),(0,l.kt)("p",null,"Processes a list of nav items and returns only the ones that are not hidden.\nCan be used to control the visible nav items in a more declarative way while keeping\nthe navigation dynamic."),(0,l.kt)("p",null,"Expects a list like this:"),(0,l.kt)("p",null,"data = [\n{",'"',"key",'"',": ",'"',"value",'"',", ",'"',"hidden",'"',": True},\n",'"',"top level item",'"',",\n{",'"',"key2",'"',": ","[{",'"',"subkey",'"',": ",'"',"subvalue",'"',", ",'"',"hidden",'"',": False}, {",'"',"subkey",'"',": ",'"',"subvalue2",'"',", ",'"',"hidden",'"',": True}]","},\n]"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"nav_items")," - a list of nav items")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  a list of nav items with hidden items removed"))}d.isMDXComponent=!0}}]);