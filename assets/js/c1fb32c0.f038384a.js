"use strict";(self.webpackChunkdocassemble_assembly_line_documentation=self.webpackChunkdocassemble_assembly_line_documentation||[]).push([[6650],{4137:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>_});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=c(n),u=r,_=d["".concat(s,".").concat(u)]||d[u]||m[u]||i;return n?a.createElement(_,l(l({ref:t},p),{},{components:n})):a.createElement(_,l({ref:t},p))}));function _(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:r,l[1]=o;for(var c=2;c<i;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2353:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var a=n(7462),r=(n(7294),n(4137));const i={sidebar_label:"conversions",title:"EFSPIntegration.conversions"},l=void 0,o={unversionedId:"reference/EFSPIntegration/conversions",id:"reference/EFSPIntegration/conversions",title:"EFSPIntegration.conversions",description:"Functions that help convert the JSON-ized XML from the proxy server into usable information.",source:"@site/docs/reference/EFSPIntegration/conversions.md",sourceDirName:"reference/EFSPIntegration",slug:"/reference/EFSPIntegration/conversions",permalink:"/docassemble-AssemblyLine-documentation/docs/reference/EFSPIntegration/conversions",draft:!1,editUrl:"https://github.com/SuffolkLITLab/docassemble-AssemblyLine-documentation/edit/main/docs/reference/EFSPIntegration/conversions.md",tags:[],version:"current",frontMatter:{sidebar_label:"conversions",title:"EFSPIntegration.conversions"},sidebar:"someSidebar",previous:{title:"test_conversions",permalink:"/docassemble-AssemblyLine-documentation/docs/reference/EFSPIntegration/test/test_conversions"},next:{title:"efm_client",permalink:"/docassemble-AssemblyLine-documentation/docs/reference/EFSPIntegration/efm_client"}},s={},c=[{value:"choices_and_map",id:"choices_and_map",level:4},{value:"pretty_display",id:"pretty_display",level:4},{value:"debug_display",id:"debug_display",level:4},{value:"tyler_daterep_to_datetime",id:"tyler_daterep_to_datetime",level:4},{value:"tyler_timestamp_to_datetime",id:"tyler_timestamp_to_datetime",level:4},{value:"validate_tyler_regex",id:"validate_tyler_regex",level:4},{value:"parse_service_contacts",id:"parse_service_contacts",level:4},{value:"fetch_case_info",id:"fetch_case_info",level:4},{value:"filter_payment_accounts",id:"filter_payment_accounts",level:4},{value:"get_tyler_roles",id:"get_tyler_roles",level:4}],p={toc:c};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Functions that help convert the JSON-ized XML from the proxy server into usable information."),(0,r.kt)("h4",{id:"choices_and_map"},"choices","_","and","_","map"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def choices_and_map(codes_list: List,\n                    display: str = None,\n                    backing: str = None) -> Tuple[List[Any], Dict]\n")),(0,r.kt)("p",null,"Takes the responses from the ","'","codes","'"," service and make a DA ready list of choices and a map back\nto the full code object"),(0,r.kt)("h4",{id:"pretty_display"},"pretty","_","display"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def pretty_display(data, tab_depth=0, skip_xml=True, item_name=None) -> str\n")),(0,r.kt)("p",null,"Given an arbitrarily nested JSON structure, print it nicely.\nRecursive, for subsequent calls ",(0,r.kt)("inlineCode",{parentName:"p"},"tab_depth")," increases."),(0,r.kt)("h4",{id:"debug_display"},"debug","_","display"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def debug_display(resp: ApiResponse) -> str\n")),(0,r.kt)("p",null,"Returns a string with either the error of the response,\nor it","'","s data run through pretty_display"),(0,r.kt)("h4",{id:"tyler_daterep_to_datetime"},"tyler","_","daterep","_","to","_","datetime"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def tyler_daterep_to_datetime(tyler_daterep: Mapping) -> DADateTime\n")),(0,r.kt)("p",null,"Takes an jsonized-XML object of ",'"',"{",(0,r.kt)("a",{parentName:"p",href:"http://niem.gov/niem/niem-core/2.0%7DActivityDate"},"http://niem.gov/niem/niem-core/2.0}ActivityDate"),",\nreturns the datetime it repsents."),(0,r.kt)("h4",{id:"tyler_timestamp_to_datetime"},"tyler","_","timestamp","_","to","_","datetime"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def tyler_timestamp_to_datetime(timestamp_ms: int) -> DADateTime\n")),(0,r.kt)("p",null,"Given a timestamp in milliseconds from epoch (in UTC), make a datetime from it"),(0,r.kt)("h4",{id:"validate_tyler_regex"},"validate","_","tyler","_","regex"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def validate_tyler_regex(data_field: Mapping) -> Callable\n")),(0,r.kt)("p",null,"Return a function that validates a given input with the provided regex,\nsuitable for use with Docassemble","'","s ",(0,r.kt)("inlineCode",{parentName:"p"},"validate:")," question modifier"),(0,r.kt)("h4",{id:"parse_service_contacts"},"parse","_","service","_","contacts"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def parse_service_contacts(service_list)\n")),(0,r.kt)("p",null,"We","'","ll take both Tyler service contact lists and Niem service contact lists.\nTyler","'","s are just `{",'"',"firstName",'"',": ",'"',"Bob",'"',", ",'"',"middleName",'"',": ",'"',"P",'"',", ..., ",'"',"serviceContactId",'"',": ",'"',"abcrunh-13...",'"',"\nNiem","'","s are more complicated"),(0,r.kt)("h4",{id:"fetch_case_info"},"fetch","_","case","_","info"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def fetch_case_info(proxy_conn: ProxyConnection,\n                    new_case: DAObject,\n                    roles: dict = None)\n")),(0,r.kt)("p",null,"Fills in these attributes with the full case details:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"attorneys"),(0,r.kt)("li",{parentName:"ul"},"party_to_attorneys"),(0,r.kt)("li",{parentName:"ul"},"case_details_worked"),(0,r.kt)("li",{parentName:"ul"},"case_details"),(0,r.kt)("li",{parentName:"ul"},"case_type"),(0,r.kt)("li",{parentName:"ul"},"title"),(0,r.kt)("li",{parentName:"ul"},"date"),(0,r.kt)("li",{parentName:"ul"},"participants")),(0,r.kt)("h4",{id:"filter_payment_accounts"},"filter","_","payment","_","accounts"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def filter_payment_accounts(account_list, allowable_card_types) -> List\n")),(0,r.kt)("p",null,"Gets a list of all payment accounts and filters them by if the card is\naccepted at a particular court"),(0,r.kt)("h4",{id:"get_tyler_roles"},"get","_","tyler","_","roles"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def get_tyler_roles(proxy_conn: ProxyConnection,\n                    login_data: Mapping) -> Tuple[bool, bool]\n")),(0,r.kt)("p",null,"Gets whether or not the user of this interview is a Tyler Admin, and a ","'","global","'"," admin.\nThe global admin means that they are allowed to change specific Global payment methods,\nand can be listed under the ","'","global server admins","'"," section of the ","'","efile proxy","'"," settings in the\nDAConfig"))}d.isMDXComponent=!0}}]);