"use strict";(self.webpackChunkdocassemble_assembly_line_documentation=self.webpackChunkdocassemble_assembly_line_documentation||[]).push([[3989],{4137:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=a.createContext({}),d=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(o.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,o=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),m=d(n),c=i,h=m["".concat(o,".").concat(c)]||m[c]||u[c]||l;return n?a.createElement(h,s(s({ref:t},p),{},{components:n})):a.createElement(h,s({ref:t},p))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,s=new Array(l);s[0]=c;var r={};for(var o in t)hasOwnProperty.call(t,o)&&(r[o]=t[o]);r.originalType=e,r[m]="string"==typeof e?e:i,s[1]=r;for(var d=2;d<l;d++)s[d]=n[d];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},70:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>m,frontMatter:()=>l,metadata:()=>r,toc:()=>d});var a=n(7462),i=(n(7294),n(4137));const l={id:"algeneral",title:"ALGeneral: Python Classes representing people\n",sidebar_label:"ALGeneral: Python Classes representing people\n",slug:"/framework/algeneral"},s=void 0,r={unversionedId:"framework/algeneral",id:"framework/algeneral",title:"ALGeneral: Python Classes representing people\n",description:"The functions and classes listed on this page are always available in Assembly",source:"@site/docs/framework/algeneral.md",sourceDirName:"framework",slug:"/framework/algeneral",permalink:"/docassemble-AssemblyLine-documentation/docs/framework/algeneral",draft:!1,editUrl:"https://github.com/SuffolkLITLab/docassemble-AssemblyLine-documentation/edit/main/docs/framework/algeneral.md",tags:[],version:"current",frontMatter:{id:"algeneral",title:"ALGeneral: Python Classes representing people\n",sidebar_label:"ALGeneral: Python Classes representing people\n",slug:"/framework/algeneral"},sidebar:"mainSidebar",previous:{title:"Special variables for Assembly Line interviews",permalink:"/docassemble-AssemblyLine-documentation/docs/framework/magic_variables"},next:{title:"ALDocument: Python Classes to simplify working with multiple templates\n",permalink:"/docassemble-AssemblyLine-documentation/docs/framework/aldocument"}},o={},d=[{value:"Python classes for representing people and addresses",id:"python-classes-for-representing-people-and-addresses",level:2},{value:"ALAddress and ALAddressList classes",id:"ALAddress",level:3},{value:"ALAddressList",id:"ALAddressList",level:4},{value:"ALIndividual and ALPeopleList classes",id:"ALIndividual",level:3},{value:"Relation to the <code>Individual</code> class",id:"relation-to-the-individual-class",level:5},{value:"ALPeopleList",id:"ALPeopleList",level:4},{value:"Relation to the <code>DAList</code> class",id:"relation-to-the-dalist-class",level:5},{value:"Classes for specific kinds of people",id:"other-people",level:3}],p={toc:d};function m(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The functions and classes listed on this page are always available in Assembly\nLine interviews."),(0,i.kt)("h2",{id:"python-classes-for-representing-people-and-addresses"},"Python classes for representing people and addresses"),(0,i.kt)("h3",{id:"ALAddress"},"ALAddress and ALAddressList classes"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"ALAddress")," class is an extension of the built-in Docassemble\n",(0,i.kt)("a",{parentName:"p",href:"https://docassemble.org/docs/objects.html#Address"},(0,i.kt)("inlineCode",{parentName:"a"},"Address"))," class."),(0,i.kt)("p",null,"If an address is an ",(0,i.kt)("inlineCode",{parentName:"p"},"ALAddress"),", it has an ",(0,i.kt)("inlineCode",{parentName:"p"},"address_fields()")," method that can be used\ninside a ",(0,i.kt)("inlineCode",{parentName:"p"},"fields: code: |")," statement to insert a consistently formatted series of\naddress fields. ",(0,i.kt)("inlineCode",{parentName:"p"},"address_fields()")," will include an autocomplete method and is\ninternationalized."),(0,i.kt)("p",null,"Assembly Line question library questions use ",(0,i.kt)("inlineCode",{parentName:"p"},"ALAddress")," objects for both the\n",(0,i.kt)("inlineCode",{parentName:"p"},"address")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"mailing_address")," attributes of people."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"---\nobjects:\n  - the_address: ALAddress\n---\nid: address question\nsets:\n  - the_address.address\n  - the_address.city\nquestion: |\n  What is the address?\nfields:\n  - code: |\n      the_address.address_fields()\n")),(0,i.kt)("p",null,"See ",(0,i.kt)("a",{parentName:"p",href:"/docassemble-AssemblyLine-documentation/docs/question_library/addresses"},(0,i.kt)("inlineCode",{parentName:"a"},"Addresses"))," for more information and\nexamples."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"You must use ",(0,i.kt)("inlineCode",{parentName:"p"},"sets")," with the ",(0,i.kt)("inlineCode",{parentName:"p"},"address_fields()")," method. Otherwise\nDocassemble will not be able to find the block to provide a definition\nof the address fields.")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"address_fields()")," method includes the following optional parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"country_code"),": if provided, will be used to control the list of states that\nis displayed as well as the default country in the ",(0,i.kt)("inlineCode",{parentName:"li"},"country")," drop down. In\nthe Assembly Line question library, ",(0,i.kt)("inlineCode",{parentName:"li"},"country_code")," typically defaults to the value of\n",(0,i.kt)("inlineCode",{parentName:"li"},"AL_DEFAULT_COUNTRY")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"default_state"),": default state, province, or sub locality. In the Assembly Line\nquestion library, ",(0,i.kt)("inlineCode",{parentName:"li"},"default_state")," typically defaults to the value of\n",(0,i.kt)("inlineCode",{parentName:"li"},"AL_DEFAULT_STATE")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"show_country"),": defaults to ",(0,i.kt)("inlineCode",{parentName:"li"},"False"),". If enabled, a country drop down menu will\nbe displayed.")),(0,i.kt)("h4",{id:"ALAddressList"},"ALAddressList"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"ALAddressList")," class is a collection of ",(0,i.kt)("inlineCode",{parentName:"p"},"ALAddress"),"es. It is used to\nallow you to collect multiple addresses in one go and otherwise works exactly\nlike the built-in Docassemble ",(0,i.kt)("a",{parentName:"p",href:"https://docassemble.org/docs/objects.html#DAList"},(0,i.kt)("inlineCode",{parentName:"a"},"DAList"),"\nobject"),"."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"__str__()")," method of an ",(0,i.kt)("inlineCode",{parentName:"p"},"ALAddressList")," has been modified so that using it\ndisplays a series of addresses on one line, separated by ",(0,i.kt)("inlineCode",{parentName:"p"},";"),". This is used\nany place that Docassemble treats the variable as text, such as in a\ntemplate, attachment block, or in a ",(0,i.kt)("inlineCode",{parentName:"p"},"question")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"subquestion")," field."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"${ person.previous_addresses }")," might display ",(0,i.kt)("inlineCode",{parentName:"p"},"123 Main St, Boston, MA; 456 Broadway, Cambridge, MA"),"."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"previous_addresses")," attribute of an ",(0,i.kt)("inlineCode",{parentName:"p"},"ALIndividual")," is an ",(0,i.kt)("inlineCode",{parentName:"p"},"ALAddressList"),"."),(0,i.kt)("h3",{id:"ALIndividual"},"ALIndividual and ALPeopleList classes"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"ALIndividual")," is an extension of the Docassemble\n",(0,i.kt)("a",{parentName:"p",href:"https://docassemble.org/docs/objects.html#Individual"},(0,i.kt)("inlineCode",{parentName:"a"},"Individual"))," class. It\nshould be used to represent both natural people and businesses or other\nentities."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ALIndividual")," objects include the following methods that are not in the stock\n",(0,i.kt)("inlineCode",{parentName:"p"},"Individual")," class:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"signature_if_final(i)")," is meant to be used inside a template or attachment\nblock with the ",(0,i.kt)("inlineCode",{parentName:"li"},"ALDocument")," class. It displays the signature if and only if\n",(0,i.kt)("inlineCode",{parentName:"li"},"i")," == 'final'."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"phone_numbers()")," displays either ",(0,i.kt)("inlineCode",{parentName:"li"},"mobile_number"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"phone_number"),", or both if\nboth are present for use in a PDF form with only one space to list phone\nnumbers."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"contact_methods()"),' displays a list of the contact methods the user provided\nin the default question library "contact information" screen as a formatted\nstring. Specifically, it will display ',(0,i.kt)("inlineCode",{parentName:"li"},"mobile_number"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"phone_number"),",\n",(0,i.kt)("inlineCode",{parentName:"li"},"email"),", and ",(0,i.kt)("inlineCode",{parentName:"li"},"other_contact_method"),". This may be helpful in a formatted letter."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"age_in_years()")," returns the individual's age as an integer (whole number), calculated from the individual's ",(0,i.kt)("inlineCode",{parentName:"li"},"birthdate")," attribute."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"formatted_age()")," is like ",(0,i.kt)("inlineCode",{parentName:"li"},"age_in_years()")," but returns a formatted string with\n",(0,i.kt)("inlineCode",{parentName:"li"},"years"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"months"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"weeks"),", and ",(0,i.kt)("inlineCode",{parentName:"li"},"days")," included when relevant. The cutoff is 2\nweeks to display days, 2 years to display months, and anything over 2 years\ndisplays only years."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"name_fields(person_or_business:str = 'person', show_suffix=True)")," is like\n",(0,i.kt)("inlineCode",{parentName:"li"},"address_fields()")," and is used to display a list of either 3 or 4 fields for a\nperson's name. See ",(0,i.kt)("a",{parentName:"li",href:"/docassemble-AssemblyLine-documentation/docs/question_library/names"},(0,i.kt)("inlineCode",{parentName:"a"},"Names"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"address_fields()")," is a wrapper around the ",(0,i.kt)("inlineCode",{parentName:"li"},"address_fields()")," method of an\n",(0,i.kt)("inlineCode",{parentName:"li"},"ALAddress")," with the same parameters."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"gender_fields(show_help=False)")," is like the ",(0,i.kt)("inlineCode",{parentName:"li"},"address_fields()")," method but\ndisplays a list of vetted gender options. Read more about\n",(0,i.kt)("a",{parentName:"li",href:"/docassemble-AssemblyLine-documentation/docs/question_library/gender"},(0,i.kt)("inlineCode",{parentName:"a"},"gender"))," questions."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pronoun_fields()")," displays a question that allows the user to provide their pronouns, with multiple choice and a fill-in-the-blank option. See ",(0,i.kt)("a",{parentName:"li",href:"/docassemble-AssemblyLine-documentation/docs/question_library/pronouns"},(0,i.kt)("inlineCode",{parentName:"a"},"pronouns")),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"initials()")," is used to return a string with the 1, 2, or 3 initial letters of\na person's name. E.g., ",(0,i.kt)("inlineCode",{parentName:"li"},"QKS")," for Quinten K Steenhuis."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"language_fields(choices=List[Dict[str, str]])")," provides a language selector that sets the ",(0,i.kt)("inlineCode",{parentName:"li"},".language")," attribute of the user, together with an ",(0,i.kt)("inlineCode",{parentName:"li"},"other")," fill-in. This should be the two-letter ISO language code. We recommend defining and passing a dictionary named ",(0,i.kt)("inlineCode",{parentName:"li"},"al_language_user_choices")," which will also be used by built-in questions triggered from ",(0,i.kt)("inlineCode",{parentName:"li"},"ql_baseline.yml"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"language_name()")," will return the language name in English. If there is a system-wide translation ",(0,i.kt)("inlineCode",{parentName:"li"},"words.yml")," translation file and the user's interface is in that language, the language name will be translated. If the user selected an ",(0,i.kt)("inlineCode",{parentName:"li"},"other")," option, the ",(0,i.kt)("inlineCode",{parentName:"li"},"other")," option will be returned.")),(0,i.kt)("p",null,"Read-only attributes:"),(0,i.kt)("p",null,"The following are all read-only attributes you can use with PDF checkbox fields.\nThey return ",(0,i.kt)("inlineCode",{parentName:"p"},"True")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"False")," depending on the value of the ",(0,i.kt)("inlineCode",{parentName:"p"},"gender")," attribute."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"gender_male")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"gender_female")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"gender_nonbinary")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"gender_other")," (True if and only if the ",(0,i.kt)("inlineCode",{parentName:"li"},"gender"),' attribute is not "female" or "male")'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"gender_unknown")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"gender_self_described"))),(0,i.kt)("h5",{id:"relation-to-the-individual-class"},"Relation to the ",(0,i.kt)("inlineCode",{parentName:"h5"},"Individual")," class"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"ALIndividual")," class inherits from Docassemble's ",(0,i.kt)("a",{parentName:"p",href:"https://docassemble.org/docs/objects.html#Individual"},(0,i.kt)("inlineCode",{parentName:"a"},"Individual"))," class, and all other methods of ",(0,i.kt)("inlineCode",{parentName:"p"},"Individual")," work\nthe same way as they do in the ",(0,i.kt)("inlineCode",{parentName:"p"},"Individual")," class."),(0,i.kt)("h4",{id:"ALPeopleList"},"ALPeopleList"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"ALPeopleList")," class is used to represent a group of people. Otherwise it\nworks exactly like the built-in Docassemble ",(0,i.kt)("a",{parentName:"p",href:"https://docassemble.org/docs/objects.html#DAList"},(0,i.kt)("inlineCode",{parentName:"a"},"DAList"),"\nobject"),"."),(0,i.kt)("p",null,"It also has the following additional methods:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"familiar()")," returns a comma-separated list of just the first name of each\nmember of the list, with ",(0,i.kt)("inlineCode",{parentName:"li"},"and")," joining the last two items "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"familiar_or()")," returns a comma-separated list of just the first name of each\nmember of the list, with ",(0,i.kt)("inlineCode",{parentName:"li"},"or")," joining the last two items"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"short_list(limit:int, truncate_string:str=', et. al.')")," returns a list that\nwill be cut off at the ",(0,i.kt)("inlineCode",{parentName:"li"},"limit")," provided. By default, ",(0,i.kt)("inlineCode",{parentName:"li"},", et. al.")," is appended.\nThe text can be customized.")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"In the lists above, ",(0,i.kt)("inlineCode",{parentName:"p"},"and")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"or")," can be translated using\n",(0,i.kt)("a",{parentName:"p",href:"https://docassemble.org/docs/config.html#words"},(0,i.kt)("inlineCode",{parentName:"a"},"words.yml")),")")),(0,i.kt)("p",null,"Example:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"users.short_list(2)")," will display ",(0,i.kt)("inlineCode",{parentName:"p"},"John Smith and Jane Smith, et. al.")," if the\nlist contains John Smith, Jane Smith, and Jane Doe. ",(0,i.kt)("inlineCode",{parentName:"p"},"et al")," is not used if the\nlist is at or below the limit provided."),(0,i.kt)("h5",{id:"relation-to-the-dalist-class"},"Relation to the ",(0,i.kt)("inlineCode",{parentName:"h5"},"DAList")," class"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ALPeopleList")," inherits from Docassemble's\n",(0,i.kt)("a",{parentName:"p",href:"https://docassemble.org/docs/objects.html#DAList"},(0,i.kt)("inlineCode",{parentName:"a"},"DAList"))," class, and retains\nall methods and attributes of a ",(0,i.kt)("inlineCode",{parentName:"p"},"DAList"),"."),(0,i.kt)("p",null,"Specifically, the language methods, including the ",(0,i.kt)("inlineCode",{parentName:"p"},"pronoun()")," and related\nmethods, can be used to display the correct pronoun depending on the number and\ngender of the members of an ",(0,i.kt)("inlineCode",{parentName:"p"},"ALPeopleList"),". E.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"users.pronoun_possessive()"),"\nwill return ",(0,i.kt)("inlineCode",{parentName:"p"},"her")," if there is a single user with the ",(0,i.kt)("inlineCode",{parentName:"p"},"gender"),' attribute value\n"female", and ',(0,i.kt)("inlineCode",{parentName:"p"},"their")," if there are multiple members of the list."),(0,i.kt)("p",null,'These methods can be helpful inside single-language pleading templates but\nusually should not be used inside the interview itself, as they can make\ntranslation challenging. While there are language-specific versions of these\nmethods, they can lead to odd ungrammatical "fragments". As tedious as it may\nbe, the best practice for translation inside the interview is to use conditional\nlogic for full sentences matching each gender and number.'),(0,i.kt)("h3",{id:"other-people"},"Classes for specific kinds of people"),(0,i.kt)("p",null,"Currently, the Assembly Line interviews provide these classes that you can use\nto target questions to a specific type of person:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Tenant")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"HousingAuthority")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Applicant")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Abuser")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Survivor"))),(0,i.kt)("p",null,"Each class subclasses ",(0,i.kt)("inlineCode",{parentName:"p"},"ALIndividual")," and shares its methods and attributes.\nThere are no special attributes or methods of these classes. They are\nprovided for you to customize questions."))}m.isMDXComponent=!0}}]);