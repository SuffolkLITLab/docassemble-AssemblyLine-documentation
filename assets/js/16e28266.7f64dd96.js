"use strict";(self.webpackChunkdocassemble_assembly_line_documentation=self.webpackChunkdocassemble_assembly_line_documentation||[]).push([[6756],{4137:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},f="mdxType",_={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),f=s(n),p=o,d=f["".concat(c,".").concat(p)]||f[p]||_[p]||a;return n?r.createElement(d,i(i({ref:t},u),{},{components:n})):r.createElement(d,i({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=p;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[f]="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},9034:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>f,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var r=n(7462),o=(n(7294),n(4137));const a={sidebar_label:"interview_logic",title:"EFSPIntegration.interview_logic"},i=void 0,l={unversionedId:"reference/EFSPIntegration/interview_logic",id:"reference/EFSPIntegration/interview_logic",title:"EFSPIntegration.interview_logic",description:"A group of methods that were code blocks in various parts of the EFSP",source:"@site/docs/reference/EFSPIntegration/interview_logic.md",sourceDirName:"reference/EFSPIntegration",slug:"/reference/EFSPIntegration/interview_logic",permalink:"/docassemble-AssemblyLine-documentation/docs/reference/EFSPIntegration/interview_logic",draft:!1,editUrl:"https://github.com/SuffolkLITLab/docassemble-AssemblyLine-documentation/edit/main/docs/reference/EFSPIntegration/interview_logic.md",tags:[],version:"current",frontMatter:{sidebar_label:"interview_logic",title:"EFSPIntegration.interview_logic"},sidebar:"api",previous:{title:"efm_client",permalink:"/docassemble-AssemblyLine-documentation/docs/reference/EFSPIntegration/efm_client"},next:{title:"py_efsp_client",permalink:"/docassemble-AssemblyLine-documentation/docs/reference/EFSPIntegration/py_efsp_client"}},c={},s=[{value:"num_case_choices",id:"num_case_choices",level:4},{value:"search_case_by_name",id:"search_case_by_name",level:4},{value:"shift_case_select_window",id:"shift_case_select_window",level:4},{value:"get_full_court_info",id:"get_full_court_info",level:4},{value:"get_max_allowed_sizes",id:"get_max_allowed_sizes",level:4},{value:"filter_codes",id:"filter_codes",level:4},{value:"get_available_efile_courts",id:"get_available_efile_courts",level:4}],u={toc:s};function f(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"A group of methods that were code blocks in various parts of the EFSP\npackage, but for better python tooling support, were moved here."),(0,o.kt)("h4",{id:"num_case_choices"},"num","_","case","_","choices"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def num_case_choices() -> int\n")),(0,o.kt)("p",null,"The number of cases that someone should have to choose between if there are too many.\nMostly to limit the amount of up-front waiting someone will have to do."),(0,o.kt)("h4",{id:"search_case_by_name"},"search","_","case","_","by","_","name"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def search_case_by_name(*,\n                        proxy_conn,\n                        var_name: str = None,\n                        court_id: str,\n                        somebody,\n                        filter_fn: Callable[[Any], bool],\n                        roles=None) -> Tuple[bool, DAList]\n")),(0,o.kt)("p",null,"Searches for cases by party name. If there are more than 10 cases found, we don","'","t\nadd all of the detailed information about the case, just for the first few cases"),(0,o.kt)("h4",{id:"shift_case_select_window"},"shift","_","case","_","select","_","window"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def shift_case_select_window(proxy_conn,\n                             found_cases: DAList,\n                             *,\n                             direction: str,\n                             start_idx: int,\n                             end_idx: int,\n                             roles: dict = None) -> Tuple[int, int]\n")),(0,o.kt)("p",null,"Specifically used in case_search.yml, with an action to only fetch a detailed information\nfor a few cases at a time"),(0,o.kt)("h4",{id:"get_full_court_info"},"get","_","full","_","court","_","info"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def get_full_court_info(proxy_conn, court_id: str) -> Dict\n")),(0,o.kt)("p",null,"Gets all of the information about the court from the id"),(0,o.kt)("h4",{id:"get_max_allowed_sizes"},"get","_","max","_","allowed","_","sizes"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def get_max_allowed_sizes(proxy_conn,\n                          court_id: str) -> Optional[Tuple[int, int]]\n")),(0,o.kt)("p",null,"Returns attachment max size, then message max size"),(0,o.kt)("h4",{id:"filter_codes"},"filter","_","codes"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def filter_codes(options: Iterable, filters: Iterable,\n                 default: str) -> Tuple[List[Any], Optional[str]]\n")),(0,o.kt)("p",null,"Given a list of filter functions from most specific to least specific,\n(if true, use that code), filters a total list of codes"),(0,o.kt)("h4",{id:"get_available_efile_courts"},"get","_","available","_","efile","_","courts"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def get_available_efile_courts(proxy_conn) -> list\n")),(0,o.kt)("p",null,"Gets the list of efilable courts, if it can"))}f.isMDXComponent=!0}}]);