"use strict";(self.webpackChunkdocassemble_assembly_line_documentation=self.webpackChunkdocassemble_assembly_line_documentation||[]).push([[8500],{591:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var t=n(4848),i=n(8453);const o={sidebar_label:"al_income",title:"ALToolbox.al_income"},l=void 0,r={id:"components/ALToolbox/al_income",title:"ALToolbox.al_income",description:"times\\per\\year",source:"@site/docs/components/ALToolbox/al_income.md",sourceDirName:"components/ALToolbox",slug:"/components/ALToolbox/al_income",permalink:"/docs/components/ALToolbox/al_income",draft:!1,unlisted:!1,editUrl:"https://github.com/SuffolkLITLab/docassemble-AssemblyLine-documentation/edit/main/docs/components/ALToolbox/al_income.md",tags:[],version:"current",frontMatter:{sidebar_label:"al_income",title:"ALToolbox.al_income"},sidebar:"docs",previous:{title:"Itemized jobs",permalink:"/docs/components/ALToolbox/ALIncome/itemizedjobs"},next:{title:"business_days",permalink:"/docs/components/ALToolbox/business_days"}},a={},c=[{value:"times_per_year",id:"times_per_year",level:4},{value:"recent_years",id:"recent_years",level:4},{value:"ALPeriodicAmount Objects",id:"alperiodicamount-objects",level:2},{value:"__str__",id:"__str__",level:4},{value:"total",id:"total",level:4},{value:"ALIncome Objects",id:"alincome-objects",level:2},{value:"total",id:"total-1",level:4},{value:"ALExpense Objects",id:"alexpense-objects",level:2},{value:"ALIncomeList Objects",id:"alincomelist-objects",level:2},{value:"sources",id:"sources",level:4},{value:"matches",id:"matches",level:4},{value:"total",id:"total-2",level:4},{value:"move_checks_to_list",id:"move_checks_to_list",level:4},{value:"ALJob Objects",id:"aljob-objects",level:2},{value:"gross_total",id:"gross_total",level:4},{value:"deductions",id:"deductions",level:4},{value:"net_total",id:"net_total",level:4},{value:"employer_name_address_phone",id:"employer_name_address_phone",level:4},{value:"normalized_hours",id:"normalized_hours",level:4},{value:"ALJobList Objects",id:"aljoblist-objects",level:2},{value:"total",id:"total-3",level:4},{value:"gross_total",id:"gross_total-1",level:4},{value:"net_total",id:"net_total-1",level:4},{value:"deductions",id:"deductions-1",level:4},{value:"ALExpenseList Objects",id:"alexpenselist-objects",level:2},{value:"ALAsset Objects",id:"alasset-objects",level:2},{value:"total",id:"total-4",level:4},{value:"equity",id:"equity",level:4},{value:"ALAssetList Objects",id:"alassetlist-objects",level:2},{value:"market_value",id:"market_value",level:4},{value:"balance",id:"balance",level:4},{value:"equity",id:"equity-1",level:4},{value:"owners",id:"owners",level:4},{value:"ALVehicle Objects",id:"alvehicle-objects",level:2},{value:"year_make_model",id:"year_make_model",level:4},{value:"ALVehicleList Objects",id:"alvehiclelist-objects",level:2},{value:"ALSimpleValue Objects",id:"alsimplevalue-objects",level:2},{value:"total",id:"total-5",level:4},{value:"__str__",id:"__str__-1",level:4},{value:"ALSimpleValueList Objects",id:"alsimplevaluelist-objects",level:2},{value:"sources",id:"sources-1",level:4},{value:"total",id:"total-6",level:4},{value:"ALItemizedValue Objects",id:"alitemizedvalue-objects",level:2},{value:"income_fields",id:"income_fields",level:4},{value:"__str__",id:"__str__-2",level:4},{value:"ALItemizedValueDict Objects",id:"alitemizedvaluedict-objects",level:2},{value:"hook_after_gather",id:"hook_after_gather",level:4},{value:"__str__",id:"__str__-3",level:4},{value:"ALItemizedJob Objects",id:"alitemizedjob-objects",level:2},{value:"total",id:"total-7",level:4},{value:"gross_total",id:"gross_total-2",level:4},{value:"deduction_total",id:"deduction_total",level:4},{value:"net_total",id:"net_total-2",level:4},{value:"employer_name_address_phone",id:"employer_name_address_phone-1",level:4},{value:"normalized_hours",id:"normalized_hours-1",level:4},{value:"ALItemizedJobList Objects",id:"alitemizedjoblist-objects",level:2},{value:"sources",id:"sources-2",level:4},{value:"total",id:"total-8",level:4},{value:"gross_total",id:"gross_total-3",level:4},{value:"deduction_total",id:"deduction_total-1",level:4},{value:"net_total",id:"net_total-3",level:4}];function d(e){const s={a:"a",code:"code",em:"em",h2:"h2",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h4,{id:"times_per_year",children:"times_per_year"}),"\n",(0,t.jsx)(s.p,{children:'Get the lower-case textual description that matches a time period contained\nin a "times per year" list.'}),"\n",(0,t.jsx)(s.p,{children:"The goal of this function is to allow you to reflect the user's selection\nback to them, either on screen or in a document."}),"\n",(0,t.jsxs)(s.p,{children:["In ",(0,t.jsx)(s.code,{children:"al_income.yml"})," there is a default ",(0,t.jsx)(s.code,{children:"times_per_year_list"}),", but the list\nthat you use must be passed as a parameter as it's common to want to\ncustomize this for a given financial statement."]}),"\n",(0,t.jsxs)(s.p,{children:["For example: if the ",(0,t.jsx)(s.code,{children:"times_per_year"}),' is 12, it will return "monthly" from\nthe default ',(0,t.jsx)(s.code,{children:"times_per_year_list"}),"."]}),"\n",(0,t.jsx)(s.p,{children:'If the times per year does not exist in the given list, it will return a\nliteral string like "five times per year".'}),"\n",(0,t.jsxs)(s.p,{children:["Fractional or floating point-based times_per_year are permissible in the\ntimes_per_year_list, although they are not commonly used. E.g., ",(0,t.jsx)(s.code,{children:".5"}),' would\nrepresent "every two years". Items not contained in the list (to provide a\nspecific lookup name) will have a string representation that is rounded to\nthe nearest whole integer.']}),"\n",(0,t.jsx)(s.h4,{id:"recent_years",children:"recent_years"}),"\n",(0,t.jsx)(s.p,{children:"Returns a list of the most recent past years, continuing into the future.\nDefaults to most recent 15 years+1. Useful to populate a combobox of years\nwhere the most recent ones are most likely. E.g. automobile years or\nbirthdate."}),"\n",(0,t.jsx)(s.p,{children:"Keyword parameters:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"past {float} The number of past years to list, including the current year.\nThe default is 15"}),"\n",(0,t.jsxs)(s.li,{children:["order {string} 'descending' or 'ascending'. Default is ",(0,t.jsx)(s.code,{children:"descending"}),"."]}),"\n",(0,t.jsx)(s.li,{children:"future (defaults to 1)."}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"alperiodicamount-objects",children:"ALPeriodicAmount Objects"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"class ALPeriodicAmount(DAObject)\n"})}),"\n",(0,t.jsx)(s.p,{children:"Represents an amount (could be an income or an expense depending on the context)\nthat reoccurs some times per year. E.g, to express a weekly period, use 52. The default\nis 1 (a year)."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Attributes"}),":"]}),"\n",(0,t.jsxs)(s.p,{children:[".value {str | float | Decimal} A number representing an amount of money accumulated during\nthe ",(0,t.jsx)(s.code,{children:"times_per_year"}),' of this income.\n.times_per_year {float | Decimal} Represents a number of the annual frequency of\nthe income. E.g. 12 for a monthly income.\n.source {str} (Optional) The "source" of the income, like a "job" or a "house".\n.display_name {str} (Optional) If present, will have a translated string to show the\nuser, as opposed to a raw english string from the program']}),"\n",(0,t.jsx)(s.h4,{id:"__str__",children:"__str__"}),"\n",(0,t.jsxs)(s.p,{children:["Returns the income's ",(0,t.jsx)(s.code,{children:".total()"})," as string, not its object name."]}),"\n",(0,t.jsx)(s.h4,{id:"total",children:"total"}),"\n",(0,t.jsx)(s.p,{children:"Returns the income over the specified times_per_year,"}),"\n",(0,t.jsxs)(s.p,{children:["To calculate ",(0,t.jsx)(s.code,{children:".total()"}),", an ALPeriodicAmount must have a ",(0,t.jsx)(s.code,{children:".times_per_year"})," and ",(0,t.jsx)(s.code,{children:".value"}),"."]}),"\n",(0,t.jsx)(s.h2,{id:"alincome-objects",children:"ALIncome Objects"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"class ALIncome(ALPeriodicAmount)\n"})}),"\n",(0,t.jsx)(s.p,{children:"Represents an income which may have an hourly rate or a salary. Hourly rate\nincomes must include hours per period (times per year). Period is some\ndenominator of a year. E.g, to express a weekly period, use 52. The default\nis 1 (a year)."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Attributes"}),":"]}),"\n",(0,t.jsxs)(s.p,{children:[".value {str | float | Decimal} A number representing an amount of money accumulated during\nthe ",(0,t.jsx)(s.code,{children:"times_per_year"})," of this income.\n.times_per_year {float | Decimal} Represents a number of the annual frequency of\nthe income. E.g. 12 for a monthly income.\n.is_hourly {bool} (Optional) True if the income is hourly.\n.hours_per_period {float | Decimal} (Optional) If the income is hourly, the number of\nhours during the annual frequency of this job. E.g. if the annual\nfrequency is 52 (weekly), the hours per week might be 50. That is, 50\nhours per week. This attribute is required if ",(0,t.jsx)(s.code,{children:".is_hourly"}),' is True.\n.source {str} (Optional) The "source" of the income, like a "job" or a "house".\n.owner {str} (Optional) Full name of the income\'s owner as a single string.']}),"\n",(0,t.jsx)(s.h4,{id:"total-1",children:"total"}),"\n",(0,t.jsxs)(s.p,{children:["Returns the income over the specified times_per_year, taking into account\nhours per period for hourly items. For example, for an hourly income of 10\nan hour, 40 hours a week, ",(0,t.jsx)(s.code,{children:"income.total(1)"})," would be 20,800, the yearly income,\nand ",(0,t.jsx)(s.code,{children:"income.total(52)"})," would be 400, the weekly income."]}),"\n",(0,t.jsxs)(s.p,{children:["To calculate ",(0,t.jsx)(s.code,{children:".total()"}),", an ALIncome must have a ",(0,t.jsx)(s.code,{children:".times_per_year"})," and ",(0,t.jsx)(s.code,{children:".value"}),".\nIt can also have ",(0,t.jsx)(s.code,{children:".is_hourly"})," and ",(0,t.jsx)(s.code,{children:".hours_per_period"}),"."]}),"\n",(0,t.jsx)(s.h2,{id:"alexpense-objects",children:"ALExpense Objects"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"class ALExpense(ALPeriodicAmount)\n"})}),"\n",(0,t.jsx)(s.p,{children:"Not much changes from ALPeriodic Amount, just the generic object questions"}),"\n",(0,t.jsx)(s.h2,{id:"alincomelist-objects",children:"ALIncomeList Objects"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"class ALIncomeList(DAList)\n"})}),"\n",(0,t.jsx)(s.p,{children:"Represents a filterable DAList of incomes-type items. It can make\nuse of these attributes and methods in its items:"}),"\n",(0,t.jsx)(s.p,{children:".source\n.owner\n.times_per_year\n.value\n.total()"}),"\n",(0,t.jsx)(s.h4,{id:"sources",children:"sources"}),"\n",(0,t.jsx)(s.p,{children:"Returns a set of the unique sources in the ALIncomeList."}),"\n",(0,t.jsx)(s.h4,{id:"matches",children:"matches"}),"\n",(0,t.jsxs)(s.p,{children:["Returns an ALIncomeList consisting only of elements matching the specified\nincome source, assisting in filling PDFs with predefined spaces. ",(0,t.jsx)(s.code,{children:"source"}),"\nmay be a list."]}),"\n",(0,t.jsx)(s.h4,{id:"total-2",children:"total"}),"\n",(0,t.jsxs)(s.p,{children:["Returns the total periodic value in the list, gathering the list items\nif necessary. You can optionally filter by ",(0,t.jsx)(s.code,{children:"source"}),". ",(0,t.jsx)(s.code,{children:"source"})," can be a\nstring or a list. You can also filter by one ",(0,t.jsx)(s.code,{children:"owner"}),"."]}),"\n",(0,t.jsxs)(s.p,{children:["To calculate ",(0,t.jsx)(s.code,{children:".total()"})," correctly, all items must have a ",(0,t.jsx)(s.code,{children:".total()"})," and\nit should be a positive value. Job-type incomes should automatically\nexclude deductions."]}),"\n",(0,t.jsx)(s.h4,{id:"move_checks_to_list",children:"move_checks_to_list"}),"\n",(0,t.jsxs)(s.p,{children:["Gives a 'gather by checklist' option.\nIf no selected_types param is passed, requires that a .selected_types\nattribute be set by a ",(0,t.jsx)(s.code,{children:"datatype: checkboxes"}),' fields\nIf "other" is in the selected_types, the source will not be set directly']}),"\n",(0,t.jsx)(s.p,{children:"Sets the attribute \"moved\" to true, doesn't set gathered, because this isn't\nidempotent, so trying to also gather all info about the checks in the list doesn't\nwork well."}),"\n",(0,t.jsx)(s.h2,{id:"aljob-objects",children:"ALJob Objects"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"class ALJob(ALIncome)\n"})}),"\n",(0,t.jsx)(s.p,{children:"Represents a single job that may be hourly or pay-period based."}),"\n",(0,t.jsx)(s.p,{children:'The job can have a net and gross income figure, but it does not represent\nindividual items like wages, tips or deductions that may appear on a paycheck--the\nuser must enter the total amount for "net" and "gross" income for a given period.'}),"\n",(0,t.jsx)(s.p,{children:"Can be stored in an ALJobList."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Attributes"}),":"]}),"\n",(0,t.jsxs)(s.p,{children:[".value {float | Decimal} A number representing an amount of money accumulated during\nthe ",(0,t.jsx)(s.code,{children:"times_per_year"})," of this income.\n.times_per_year {float} Represents a number of the annual frequency of\nthe value. E.g. 12 for a monthly value.\n.is_hourly {bool} (Optional): Whether the gross total should be calculated based on hours\nworked per week\n.hours_per_period {float} (Optional) The number of hours during the annual\nfrequency of this job. E.g. if the annual frequency is 52 (weekly), the\nhours per week might be 50. That is, 50 hours per week.\n.deduction {float} (Optional) The amount of money deducted from the total value each period.\nIf this job is hourly, deduction is still from each period, not each hour. Used to\ncalculate the net income in ",(0,t.jsx)(s.code,{children:"net_income()"}),".\n.employer {Individual} (Optional) A docassemble Individual object, employer.address is the address\nand employer.phone is the phone"]}),"\n",(0,t.jsx)(s.h4,{id:"gross_total",children:"gross_total"}),"\n",(0,t.jsxs)(s.p,{children:["Same as ALIncome total. Returns the income over the specified times_per_year,\nrepresenting the ",(0,t.jsx)(s.code,{children:".value"})," attribute of the item."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"times_per_year"})," is some denominator of a year. E.g. to express a weekly\nperiod, use 52. The default is 1 (a year)."]}),"\n",(0,t.jsx)(s.h4,{id:"deductions",children:"deductions"}),"\n",(0,t.jsx)(s.p,{children:"Returns the total deductions from someone's pay over the specificed times_per_year\n(not per hour if hourly)."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"times_per_year"})," is some denominator of a year. E.g. to express a weekly\nperiod, use 52. The default is 1 (a year)."]}),"\n",(0,t.jsx)(s.h4,{id:"net_total",children:"net_total"}),"\n",(0,t.jsxs)(s.p,{children:["Returns the net income over a time period, found using\n",(0,t.jsx)(s.code,{children:"self.value"})," and ",(0,t.jsx)(s.code,{children:"self.deduction"}),"."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"times_per_year"})," is some denominator of a year. E.g, to express a weekly\nperiod, use 52. The default is 1 (a year)."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"self.deduction"})," is the amount deducted from one's pay over a period (not\nper hour if hourly)."]}),"\n",(0,t.jsxs)(s.p,{children:["This will force the gathering of the ALJob's ",(0,t.jsx)(s.code,{children:".value"})," and ",(0,t.jsx)(s.code,{children:".deduction"})," attributes."]}),"\n",(0,t.jsx)(s.h4,{id:"employer_name_address_phone",children:"employer_name_address_phone"}),"\n",(0,t.jsxs)(s.p,{children:["Returns name, address and phone number of employer as a string. Forces\ngathering the ",(0,t.jsx)(s.code,{children:".employer"}),", ",(0,t.jsx)(s.code,{children:".employer_address"}),", and ",(0,t.jsx)(s.code,{children:".employer_phone"}),"\nattributes."]}),"\n",(0,t.jsx)(s.h4,{id:"normalized_hours",children:"normalized_hours"}),"\n",(0,t.jsx)(s.p,{children:"Returns the normalized number of hours worked in a given times_per_year,\nbased on the self.hours_per_period and self.times_per_year attributes."}),"\n",(0,t.jsx)(s.p,{children:"For example, if the person works 10 hours a week, it will return\n520 when the times_per_year parameter is 1."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"times_per_year"})," is some denominator of a year. E.g, to express a weekly\nperiod, use 52. The default is 1 (a year)."]}),"\n",(0,t.jsxs)(s.p,{children:["This will force the gathering of the attributes ",(0,t.jsx)(s.code,{children:".hours_per_period"})," and\n",(0,t.jsx)(s.code,{children:".times_per_year"})]}),"\n",(0,t.jsx)(s.h2,{id:"aljoblist-objects",children:"ALJobList Objects"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"class ALJobList(ALIncomeList)\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Represents a list of ALJobs. Adds the ",(0,t.jsx)(s.code,{children:".gross_total()"})," and\n",(0,t.jsx)(s.code,{children:".net_total()"})," methods to the ALIncomeList class. It's a more common\nway of reporting income than ALItemizedJobList."]}),"\n",(0,t.jsx)(s.h4,{id:"total-3",children:"total"}),"\n",(0,t.jsxs)(s.p,{children:["Returns the sum of the gross incomes of its ALJobs divided by the time\ntimes_per_year. You can filter the jobs by ",(0,t.jsx)(s.code,{children:"source"}),". ",(0,t.jsx)(s.code,{children:"source"})," can be a\nstring or a list."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"times_per_year"})," is some denominator of a year. E.g, to express a weekly\nperiod, use 52. The default is 1 (a year)."]}),"\n",(0,t.jsx)(s.h4,{id:"gross_total-1",children:"gross_total"}),"\n",(0,t.jsxs)(s.p,{children:["Returns the sum of the gross incomes of its ALJobs divided by the time\ntimes_per_year. You can filter the jobs by ",(0,t.jsx)(s.code,{children:"source"}),". ",(0,t.jsx)(s.code,{children:"source"})," can be a\nstring or a list."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"times_per_year"})," is some denominator of a year. E.g, to express a weekly\nperiod, use 52. The default is 1 (a year)."]}),"\n",(0,t.jsx)(s.h4,{id:"net_total-1",children:"net_total"}),"\n",(0,t.jsxs)(s.p,{children:["Returns the sum of the net incomes of its ALJobs divided by the time\ntimes_per_year. You can filter the jobs by ",(0,t.jsx)(s.code,{children:"source"}),". ",(0,t.jsx)(s.code,{children:"source"})," can be a\nstring or a list. Leaving out ",(0,t.jsx)(s.code,{children:"source"})," will use all sources."]}),"\n",(0,t.jsxs)(s.p,{children:["If the job is hourly, the ",(0,t.jsx)(s.code,{children:"net_total()"})," may not be comparable to the\n",(0,t.jsx)(s.code,{children:"gross_total()"}),"."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"times_per_year"})," is some denominator of a year. E.g, to express a weekly\nperiod, use 52. The default is 1 (a year)."]}),"\n",(0,t.jsx)(s.h4,{id:"deductions-1",children:"deductions"}),"\n",(0,t.jsxs)(s.p,{children:["Returns the sum of the deductions of its ALJobs divided by the time\ntimes_per_year. You can filter the jobs by ",(0,t.jsx)(s.code,{children:"source"}),". Leaving out ",(0,t.jsx)(s.code,{children:"source"}),"\nwill use all sources."]}),"\n",(0,t.jsx)(s.h2,{id:"alexpenselist-objects",children:"ALExpenseList Objects"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"class ALExpenseList(ALIncomeList)\n"})}),"\n",(0,t.jsx)(s.p,{children:"A list of expenses"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"each element has a:"}),"\n",(0,t.jsx)(s.li,{children:"value"}),"\n",(0,t.jsx)(s.li,{children:"source"}),"\n",(0,t.jsx)(s.li,{children:"display name"}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"alasset-objects",children:"ALAsset Objects"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"class ALAsset(ALIncome)\n"})}),"\n",(0,t.jsx)(s.p,{children:"An ALAsset represents an asset that has a market value, an optional income\nthat the asset earns, and an optional balance which may be helpful if the\nasset represents a financial account rather than a physical asset."}),"\n",(0,t.jsx)(s.p,{children:"Can be stored in an ALAssetList."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Attributes"}),":"]}),"\n",(0,t.jsxs)(s.p,{children:[".market_value {float | Decimal} Market value of the asset.\n.balance {float | Decimal } Current balance of the account, e.g., like\nthe balance in a checking account, but could also represent a loan\namount.\n.value {float | Decimal} (Optional) Represents the income the asset earns\nfor a given ",(0,t.jsx)(s.code,{children:"times_per_year"}),", such as interest earned in a checking\naccount. If not defined, the income will be set to 0, to simplify\nrepresenting the many common assets that do not earn any income.\n.times_per_year {float} (Optional) Number of times per year the asset\nearns the income listed in the ",(0,t.jsx)(s.code,{children:"value"}),' attribute.\n.owner {str} (Optional) Full name of the asset owner as a single string.\n.source {str} (Optional) The "source" of the asset, like "vase".']}),"\n",(0,t.jsx)(s.h4,{id:"total-4",children:"total"}),"\n",(0,t.jsx)(s.p,{children:"Returns the .value attribute divided by the times per year you want to calculate. The value defaults to 0."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"times_per_year"})," is some denominator of a year. E.g, to express a weekly period, use 52. The default is 1 (a year)."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Arguments"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"times_per_year"})," ",(0,t.jsx)(s.em,{children:"float, optional"})," - The number of times per year to calculate. Defaults to 1."]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Returns"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"Decimal"})," - The .value attribute divided by the times per year."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"equity",children:"equity"}),"\n",(0,t.jsx)(s.p,{children:"Returns the total equity in the asset (e.g., market value minus balance)."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Arguments"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"loan_attribute"})," ",(0,t.jsx)(s.em,{children:"str, optional"}),' - The attribute of the asset to use as the loan value. Defaults to "balance".']}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Returns"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"Decimal"})," - The total equity in the asset."]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"alassetlist-objects",children:"ALAssetList Objects"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"class ALAssetList(ALIncomeList)\n"})}),"\n",(0,t.jsxs)(s.p,{children:["A list of ALAssets. The ",(0,t.jsx)(s.code,{children:"total()"})," of the list will be the total income\nearned, which may not be what you want for a list of assets. To get the\ntotal value of all assets, use the ",(0,t.jsx)(s.code,{children:"market_value()"})," method."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Attributes"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"market_value"})," ",(0,t.jsx)(s.em,{children:"float | Decimal"})," - Market value of the asset."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"balance"})," ",(0,t.jsx)(s.em,{children:"float | Decimal"})," - Current balance of the account, e.g., like\nthe balance in a checking account, but could also represent a loan\namount."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"value"})," ",(0,t.jsx)(s.em,{children:"float | Decimal, optional"})," - Represents the income the asset earns\nfor a given ",(0,t.jsx)(s.code,{children:"times_per_year"}),", such as interest earned in a checking\naccount. If not defined, the income will be set to 0, to simplify\nrepresenting the many common assets that do not earn any income."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"times_per_year"})," ",(0,t.jsx)(s.em,{children:"float, optional"})," - Number of times per year the asset\nearns the income listed in the ",(0,t.jsx)(s.code,{children:"value"})," attribute."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"owner"})," ",(0,t.jsx)(s.em,{children:"str, optional"})," - Full name of the asset owner as a single string."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"source"})," ",(0,t.jsx)(s.em,{children:"str, optional"}),' - The "source" of the asset, like "vase".']}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"market_value",children:"market_value"}),"\n",(0,t.jsxs)(s.p,{children:["Returns the total ",(0,t.jsx)(s.code,{children:".market_value"})," of assets in the list."]}),"\n",(0,t.jsxs)(s.p,{children:["You can filter the assets by ",(0,t.jsx)(s.code,{children:"source"}),". ",(0,t.jsx)(s.code,{children:"source"})," can be a string or a list."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Arguments"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"source"})," ",(0,t.jsx)(s.em,{children:"Optional[SourceType]"})," - The source of the assets to include in the calculation.\nIf None, all sources are included. Can be a string or a list."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"exclude_source"})," ",(0,t.jsx)(s.em,{children:"Optional[SourceType]"})," - The source of the assets to exclude from the calculation.\nIf None, no sources are excluded."]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Returns"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"Decimal"})," - The total market value of the assets."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"balance",children:"balance"}),"\n",(0,t.jsxs)(s.p,{children:["Returns the total ",(0,t.jsx)(s.code,{children:".balance"})," of assets in the list, which typically corresponds to the available funds in a financial account."]}),"\n",(0,t.jsxs)(s.p,{children:["You can filter the assets by ",(0,t.jsx)(s.code,{children:"source"}),". ",(0,t.jsx)(s.code,{children:"source"})," can be a string or a list."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Arguments"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"source"})," ",(0,t.jsx)(s.em,{children:"Optional[SourceType]"})," - The source of the assets to include in the calculation.\nIf None, all sources are included. Can be a string or a list."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"exclude_source"})," ",(0,t.jsx)(s.em,{children:"Optional[SourceType]"})," - The source of the assets to exclude from the calculation.\nIf None, no sources are excluded."]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Returns"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"Decimal"})," - The total balance of the assets."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"equity-1",children:"equity"}),"\n",(0,t.jsx)(s.p,{children:"Calculates and returns the total equity in the assets."}),"\n",(0,t.jsx)(s.p,{children:"This method triggers the gathering of assets, then iterates over each asset. If a source or exclude_source is not\nspecified, or if the asset's source satisfies the source criteria, the equity of the asset is added to the total."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Arguments"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"source"})," ",(0,t.jsx)(s.em,{children:"Optional[SourceType]"})," - The source of the assets to include in the calculation. If None, all sources are included."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"exclude_source"})," ",(0,t.jsx)(s.em,{children:"Optional[SourceType]"})," - The source of the assets to exclude from the calculation. If None, no sources are excluded."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"loan_attribute"})," ",(0,t.jsx)(s.em,{children:"str, optional"}),' - The attribute of the asset to use as the loan value. Defaults to "balance".']}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Returns"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"Decimal"})," - The total equity in the assets."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"owners",children:"owners"}),"\n",(0,t.jsx)(s.p,{children:"Returns a set of the unique owners of the assets."}),"\n",(0,t.jsxs)(s.p,{children:["You can filter the assets by ",(0,t.jsx)(s.code,{children:"source"}),". ",(0,t.jsx)(s.code,{children:"source"})," can be a string or a list."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Arguments"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"source"})," ",(0,t.jsx)(s.em,{children:"Optional[SourceType]"})," - The source of the assets to include in the calculation.\nIf None, all sources are included. Can be a string or a list."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"exclude_source"})," ",(0,t.jsx)(s.em,{children:"Optional[SourceType]"})," - The source of the assets to exclude from the calculation.\nIf None, no sources are excluded."]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Returns"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"Set[str]"})," - A set of the unique owners of the assets."]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"alvehicle-objects",children:"ALVehicle Objects"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"class ALVehicle(ALAsset)\n"})}),"\n",(0,t.jsx)(s.p,{children:"Represents a vehicle as a specialized type of ALAsset."}),"\n",(0,t.jsx)(s.p,{children:"This subclass of ALAsset adds specific attributes relevant to vehicles,\nsuch as year, make, and model, and includes methods for representing\nthese attributes in a standardized format, as often required on financial\nstatement forms."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Attributes"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"year"})," ",(0,t.jsx)(s.em,{children:"str"})," - The model year of the vehicle, e.g., '2022'."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"make"})," ",(0,t.jsx)(s.em,{children:"str"})," - The make of the vehicle, e.g., 'Honda'."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"model"})," ",(0,t.jsx)(s.em,{children:"str"})," - The model of the vehicle, e.g., 'Accord'."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"market_value"})," ",(0,t.jsx)(s.em,{children:"float or Decimal"})," - Market value of the vehicle."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"balance"})," ",(0,t.jsx)(s.em,{children:"float or Decimal"})," - Balance of the loan on the vehicle."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"value"})," ",(0,t.jsx)(s.em,{children:"float or Decimal, optional"})," - Income earned by the vehicle, typically 0."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"times_per_year"})," ",(0,t.jsx)(s.em,{children:"int"})," - The frequency over which the ",(0,t.jsx)(s.code,{children:"value"})," is earned annually."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"owner"})," ",(0,t.jsx)(s.em,{children:"str"})," - Full name of the vehicle owner."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"source"})," ",(0,t.jsx)(s.em,{children:"str, optional"})," - The source of the asset, defaults to 'vehicle'."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"year_make_model",children:"year_make_model"}),"\n",(0,t.jsx)(s.p,{children:"Returns a string of the format year/make/model of the vehicle. Triggers\ngathering those attributes."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Arguments"}),":"]}),"\n",(0,t.jsx)(s.p,{children:"separator {str} (Optional) The separator between the year, make and model."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Returns"}),":"]}),"\n",(0,t.jsx)(s.p,{children:"A string of the format year/make/model of the vehicle."}),"\n",(0,t.jsx)(s.h2,{id:"alvehiclelist-objects",children:"ALVehicleList Objects"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"class ALVehicleList(ALAssetList)\n"})}),"\n",(0,t.jsx)(s.p,{children:"List of ALVehicles. Extends ALAssetList."}),"\n",(0,t.jsx)(s.h2,{id:"alsimplevalue-objects",children:"ALSimpleValue Objects"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"class ALSimpleValue(DAObject)\n"})}),"\n",(0,t.jsx)(s.p,{children:"Represents a currency value. It's meant to be stored in a list. Can be an\nitem in an ALSimpleValueList."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Attributes"}),":"]}),"\n",(0,t.jsx)(s.p,{children:'.value {str | float } The monetary value of the item.\n.transaction_type {str} (Optional) Can be "expense", which will give a\nnegative value to the total of the item.\n.source {str} (Optional) The "source" of the item, like "vase".'}),"\n",(0,t.jsx)(s.h4,{id:"total-5",children:"total"}),"\n",(0,t.jsx)(s.p,{children:"If desired, to use as a ledger, values can be signed (mixed positive and\nnegative). Setting transaction_type = 'expense' makes the value negative.\nUse min=0 in that case."}),"\n",(0,t.jsxs)(s.p,{children:["If you use signed values, be careful when placing in an ALIncomeList\nobject. The ",(0,t.jsx)(s.code,{children:"total()"})," method may return unexpected results in that case."]}),"\n",(0,t.jsx)(s.h4,{id:"__str__-1",children:"__str__"}),"\n",(0,t.jsx)(s.p,{children:"Returns the total as a formatted string"}),"\n",(0,t.jsx)(s.h2,{id:"alsimplevaluelist-objects",children:"ALSimpleValueList Objects"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"class ALSimpleValueList(DAList)\n"})}),"\n",(0,t.jsx)(s.p,{children:"Represents a filterable DAList of ALSimpleValues."}),"\n",(0,t.jsx)(s.h4,{id:"sources-1",children:"sources"}),"\n",(0,t.jsx)(s.p,{children:"Returns a set of the unique sources of values stored in the list."}),"\n",(0,t.jsx)(s.h4,{id:"total-6",children:"total"}),"\n",(0,t.jsxs)(s.p,{children:["Returns the total value in the list, gathering the list items if\nnecessary. You can filter the values by ",(0,t.jsx)(s.code,{children:"source"}),". ",(0,t.jsx)(s.code,{children:"source"})," can be a\nstring or a list."]}),"\n",(0,t.jsx)(s.h2,{id:"alitemizedvalue-objects",children:"ALItemizedValue Objects"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"class ALItemizedValue(DAObject)\n"})}),"\n",(0,t.jsx)(s.p,{children:"An item in an ALItemizedValueDict (a line item like wages, tips or union dues).\nShould be a positive number, even if it will later be subtracted from the\njob's net total."}),"\n",(0,t.jsx)(s.p,{children:"WARNING: This item's period-based value can't be calculated correctly\noutside of an ALItemizedJob. Its value should only be accessed through the\nfiltering methods of the ALItemizedJob that contains it."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Attributes"}),":"]}),"\n",(0,t.jsxs)(s.p,{children:[".value {float | Decimal} A number representing an amount of money accumulated\nduring the ",(0,t.jsx)(s.code,{children:"times_per_year"}),' of this item or this item\'s job.\n.is_hourly {bool} Whether this particular item is calculated hourly.\n.times_per_year { float} A denominator of a year representing the annual\nfrequency of the job. E.g. 12 for monthly.\n.exists {bool} (Optional) Allows an interview author to pre-define some common\ndescriptors, like "wages" or "union dues" without requiring the user to\nprovide a value for each item.']}),"\n",(0,t.jsx)(s.p,{children:'If the ".exists" attribute is False or undefined, the item will not be used\nwhen calculating totals.'}),"\n",(0,t.jsx)(s.h4,{id:"income_fields",children:"income_fields"}),"\n",(0,t.jsxs)(s.p,{children:["Returns a YAML structure representing the list of fields for an itemized value,\nto be passed to a ",(0,t.jsx)(s.code,{children:"code"})," attribute of a question's fields"]}),"\n",(0,t.jsx)(s.h4,{id:"__str__-2",children:"__str__"}),"\n",(0,t.jsx)(s.p,{children:"Returns a string of the value of the item with two decimal places."}),"\n",(0,t.jsx)(s.h2,{id:"alitemizedvaluedict-objects",children:"ALItemizedValueDict Objects"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"class ALItemizedValueDict(DAOrderedDict)\n"})}),"\n",(0,t.jsx)(s.p,{children:"Dictionary that can contain ALItemizedValues (e.g. line items) for an\nALItemizedJob. E.g., wages, tips and deductions being the most common."}),"\n",(0,t.jsx)(s.p,{children:"An ALItemizedJob will have two ALItemizedValueDicts, one for income\nand one for deductions."}),"\n",(0,t.jsx)(s.p,{children:"WARNING: Should only be accessed through an ALItemizedJob. Otherwise\nyou may get unexpected results."}),"\n",(0,t.jsx)(s.h4,{id:"hook_after_gather",children:"hook_after_gather"}),"\n",(0,t.jsxs)(s.p,{children:["Update item lists after they've been gathered or edited to remove non-existent\nitems. Will still allow the developer to set ",(0,t.jsx)(s.code,{children:"auto_gather=False"})," if they\nwant without affecting this functionality.\nSee ",(0,t.jsx)(s.a,{href:"https://docassemble.org/docs/objects.html#DAList.hook_after_gather",children:"https://docassemble.org/docs/objects.html#DAList.hook_after_gather"}),"."]}),"\n",(0,t.jsxs)(s.p,{children:["If a developer wants to remove these items ",(0,t.jsx)(s.em,{children:"before"})," gathering is finished,\nthey can use similar code in their question's ",(0,t.jsx)(s.code,{children:"validation code:"})]}),"\n",(0,t.jsx)(s.h4,{id:"__str__-3",children:"__str__"}),"\n",(0,t.jsx)(s.p,{children:'Returns a string of the dictionary\'s key/value pairs as two-element lists in a list.\nE.g. \'[["federal_taxes", "2500.00"], ["wages", "15.50"]]\''}),"\n",(0,t.jsx)(s.h2,{id:"alitemizedjob-objects",children:"ALItemizedJob Objects"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"class ALItemizedJob(DAObject)\n"})}),"\n",(0,t.jsx)(s.p,{children:'An "Itemized" job is a job which allows the user to report very specific,\ngranular details about the money that they earn in that job and any\ndeductions that they have on their paycheck. This detailed accounting of\nmoney for each job is required on some financial statements, although in\nmany financial statements, just reporting gross and net income is sufficient.'}),"\n",(0,t.jsx)(s.p,{children:"For example, an ALItemizedJob can let the user report:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Wages at one hourly rate"}),"\n",(0,t.jsx)(s.li,{children:"Overtime at a second hourly rate"}),"\n",(0,t.jsx)(s.li,{children:"Tips earned during that time period"}),"\n",(0,t.jsx)(s.li,{children:"A fixed salary earned for that pay period"}),"\n",(0,t.jsx)(s.li,{children:"Union Dues"}),"\n",(0,t.jsx)(s.li,{children:"Insurance"}),"\n",(0,t.jsx)(s.li,{children:"Taxes"}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:'If the financial statement only requires "gross" and "net" income, the\nALJobList has a simpler API and may be the preferred way to represent the\nincome in code.'}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Attributes"}),":"]}),"\n",(0,t.jsx)(s.p,{children:'.to_add {ALItemizedValueDict} Dict of ALItemizedValues that would be added\nto a job\'s net total, like wages and tips.\n.to_subtract {ALItemizedValueDict} Dict of ALItemizedValues that would be\nsubtracted from a net total, like union dues or insurance premiums.\n.times_per_year {float} A denominator of a year, like 12 for monthly, that\nrepresents how frequently the income is earned\n.is_hourly {bool} (Optional) Whether the value represents a figure that the\nuser earns on an hourly basis, rather than for the full time period\n.hours_per_period {int} (Optional) If the job is hourly, how many hours the\nuser works per period.\n.employer {Individual} (Optional) Individual assumed to have a name and,\noptionally, an address and phone.\n.source {str} (Optional) The category of this item, like "public service".\nDefaults to "job".'}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"WARNING"})," - Individual items in ",(0,t.jsx)(s.code,{children:".to_add"})," and ",(0,t.jsx)(s.code,{children:".to_subtract"})," should not be used\ndirectly. They should only be accessed through the filtering methods of\nthis job."]}),"\n",(0,t.jsx)(s.p,{children:"Fulfills these requirements:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"A job can be hourly. Its wages will be calculated with that in mind."}),"\n",(0,t.jsx)(s.li,{children:"Despite an hourly job, some individual items must be calculated using the\njob's whole period."}),"\n",(0,t.jsx)(s.li,{children:"Some items will have their own periods."}),"\n",(0,t.jsx)(s.li,{children:"In a list of jobs, a developer may need to access full time and part time\njobs separately."}),"\n",(0,t.jsx)(s.li,{children:"In a list of jobs, a developer may need to sum all items from one source,\nsuch as tips or taxes."}),"\n",(0,t.jsx)(s.li,{children:"The developer needs access to total money coming in, total money going out,\nand the total of money going in and money coming out."}),"\n",(0,t.jsx)(s.li,{children:"A user must be able to add their own arbitrary items."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"total-7",children:"total"}),"\n",(0,t.jsx)(s.p,{children:"Alias for ALItemizedJob.gross_total to integrate with ALIncomeList math."}),"\n",(0,t.jsx)(s.h4,{id:"gross_total-2",children:"gross_total"}),"\n",(0,t.jsxs)(s.p,{children:["Returns the sum of positive values (payments) for a given times_per_year.\nYou can filter the items by ",(0,t.jsx)(s.code,{children:"source"}),". ",(0,t.jsx)(s.code,{children:"source"})," can be a string or a list.\nIf you use sources from deductions, they will be ignored."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Arguments"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"kwarg"})," - times_per_year {float} (Optional) Number of times per year you\nwant to calculate. E.g, to express a weekly period, use 52. Default is 1."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"kwarg"})," - source {str | [str]} (Optional) Source or list of sources of desired\nitem(s)."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"deduction_total",children:"deduction_total"}),"\n",(0,t.jsxs)(s.p,{children:["Returns the sum of money going out (normally, deductions like union\ndues) divided by a pay times_per_year as a positive value. You can\nfilter the items by ",(0,t.jsx)(s.code,{children:"source"}),". ",(0,t.jsx)(s.code,{children:"source"})," can be a string or a list."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Arguments"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"kwarg"})," - times_per_year {float} (Optional) Number of times per year you\nwant to calculate. E.g, to express a weekly period, use 52. Default is 1."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"kwarg"})," - source {str | List[str]} (Optional) Source or list of sources of desired\nitem(s)."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"net_total-2",children:"net_total"}),"\n",(0,t.jsxs)(s.p,{children:["Returns the net (gross minus deductions) value of the job divided by\n",(0,t.jsx)(s.code,{children:"times_per_year"}),". You can filter the items by ",(0,t.jsx)(s.code,{children:"source"}),". ",(0,t.jsx)(s.code,{children:"source"}),' can be a\nstring or a list. E.g. "full time" or ["full time", "union dues"]']}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Arguments"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"kwarg"})," - times_per_year {float} (Optional) Number of times per year you\nwant to calculate. E.g, to express a weekly period, use 52. Default is 1."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"kwarg"})," - source {str | List[str]} (Optional) Source or list of sources of desired\nitem(s)."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"employer_name_address_phone-1",children:"employer_name_address_phone"}),"\n",(0,t.jsx)(s.p,{children:"Returns concatenation of employer name and, if they exist, employer\naddress and phone number."}),"\n",(0,t.jsx)(s.h4,{id:"normalized_hours-1",children:"normalized_hours"}),"\n",(0,t.jsx)(s.p,{children:"Returns the normalized number of hours worked in a given times_per_year,\nbased on the self.hours_per_period and self.times_per_year attributes."}),"\n",(0,t.jsx)(s.p,{children:"For example, if the person works 10 hours a week, it will return\n520 when the times_per_year parameter is 1."}),"\n",(0,t.jsx)(s.h2,{id:"alitemizedjoblist-objects",children:"ALItemizedJobList Objects"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"class ALItemizedJobList(DAList)\n"})}),"\n",(0,t.jsx)(s.p,{children:"Represents a list of ALItemizedJobs that can have both payments and money\nout. This is a less common way of reporting income."}),"\n",(0,t.jsx)(s.h4,{id:"sources-2",children:"sources"}),"\n",(0,t.jsx)(s.p,{children:'Returns a set of the unique sources in all of the jobs.\nBy default gets from both sides, if which_side is "deductions", only gets from deductions.'}),"\n",(0,t.jsx)(s.h4,{id:"total-8",children:"total"}),"\n",(0,t.jsx)(s.p,{children:"Alias for ALItemizedJobList.gross_total to integrate with\nALIncomeList math."}),"\n",(0,t.jsx)(s.h4,{id:"gross_total-3",children:"gross_total"}),"\n",(0,t.jsxs)(s.p,{children:["Returns the sum of the gross incomes of the list's jobs divided by the\ntimes_per_year. You can filter the items by ",(0,t.jsx)(s.code,{children:"source"}),". ",(0,t.jsx)(s.code,{children:"source"})," can be a\nstring or a list."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Arguments"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"kwarg"})," - source {str | [str]} - (Optional) Source or list of sources of\ndesired job items to sum from every itemized job.\nE.g. ['tips', 'commissions']"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"kwarg"})," - times_per_year {float} (Optional) Number of times per year you\nwant to calculate. E.g, to express a weekly period, use 52. Default is 1."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"deduction_total-1",children:"deduction_total"}),"\n",(0,t.jsxs)(s.p,{children:["Returns the sum of the deductions of the list's jobs divided by the\ntimes_per_year. You can filter the items by ",(0,t.jsx)(s.code,{children:"source"}),". ",(0,t.jsx)(s.code,{children:"source"})," can be a\nstring or a list."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Arguments"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"kwarg"})," - source {str | [str]} - (Optional) Source or list of sources of\ndesired job items to sum from every itemized job.\nE.g. ['taxes', 'dues']"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"kwarg"})," - times_per_year {float} (Optional) Number of times per year you\nwant to calculate. E.g, to express a weekly period, use 52. Default is 1."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"net_total-3",children:"net_total"}),"\n",(0,t.jsxs)(s.p,{children:["Returns the net of the list's jobs (money in minus money out) divided by\nthe times_per_year. You can filter the items by ",(0,t.jsx)(s.code,{children:"source"}),". ",(0,t.jsx)(s.code,{children:"source"})," can be a\nstring or a list."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Arguments"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"kwarg"})," - source {str | List[str]} - (Optional) Source or list of sources of\ndesired job items to sum from every itemized job.\nE.g. ['tips', 'taxes']"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"kwarg"})," - times_per_year {float} (Optional) Number of times per year you\nwant to calculate. E.g, to express a weekly period, use 52. Default is 1."]}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>l,x:()=>r});var t=n(6540);const i={},o=t.createContext(i);function l(e){const s=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function r(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(o.Provider,{value:s},e.children)}}}]);