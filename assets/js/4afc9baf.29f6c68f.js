"use strict";(self.webpackChunkdocassemble_assembly_line_documentation=self.webpackChunkdocassemble_assembly_line_documentation||[]).push([[7771],{5275:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"components/AssemblyLine/al_courts","title":"AssemblyLine.al_courts","description":"Package for a very simple / MVP list of courts that is mostly signature compatible w/ MACourts for now","source":"@site/docs/components/AssemblyLine/al_courts.md","sourceDirName":"components/AssemblyLine","slug":"/components/AssemblyLine/al_courts","permalink":"/docs/components/AssemblyLine/al_courts","draft":false,"unlisted":false,"editUrl":"https://github.com/SuffolkLITLab/docassemble-AssemblyLine-documentation/edit/main/docs/components/AssemblyLine/al_courts.md","tags":[],"version":"current","frontMatter":{"sidebar_label":"al_courts","title":"AssemblyLine.al_courts"},"sidebar":"docs","previous":{"title":"al_general","permalink":"/docs/components/AssemblyLine/al_general"},"next":{"title":"al_document","permalink":"/docs/components/AssemblyLine/al_document"}}');var i=s(4848),r=s(8453);const o={sidebar_label:"al_courts",title:"AssemblyLine.al_courts"},l=void 0,c={},d=[{value:"ALCourt Objects",id:"alcourt-objects",level:2},{value:"init",id:"init",level:4},{value:"short_label",id:"short_label",level:4},{value:"short_label_and_address",id:"short_label_and_address",level:4},{value:"short_description",id:"short_description",level:4},{value:"from_row",id:"from_row",level:4},{value:"geolocate",id:"geolocate",level:4},{value:"geocode",id:"geocode",level:4},{value:"ALCourtLoader Objects",id:"alcourtloader-objects",level:2},{value:"init",id:"init-1",level:4},{value:"all_courts",id:"all_courts",level:4},{value:"unique_column_values",id:"unique_column_values",level:4},{value:"county_list",id:"county_list",level:4},{value:"county_has_one_court",id:"county_has_one_court",level:4},{value:"county_court",id:"county_court",level:4},{value:"matching_courts_in_county",id:"matching_courts_in_county",level:4},{value:"filter_courts",id:"filter_courts",level:4},{value:"as_court",id:"as_court",level:4}];function a(e){const n={code:"code",em:"em",h2:"h2",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Package for a very simple / MVP list of courts that is mostly signature compatible w/ MACourts for now"}),"\n",(0,i.jsx)(n.h2,{id:"alcourt-objects",children:"ALCourt Objects"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class ALCourt(Court)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Object representing a court in Massachusetts. We use a function on the CourtList object that filters courts by\naddress and can use any of those three features of the court to do the filtering."}),"\n",(0,i.jsx)(n.p,{children:"\x3c!-- TODO: it could be interesting to store a jurisdiction on a court. But this is non-trivial. Should it be geo boundaries?\nA list of cities? A list of counties? Instead, we use a function on the CourtList object that filters courts by\naddress and can use any of those three features of the court to do the filtering.--\x3e"}),"\n",(0,i.jsx)(n.h4,{id:"init",children:"init"}),"\n",(0,i.jsx)(n.p,{children:"Create a new court object."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"*pargs"})," - Standard DAObject positional arguments"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"**kwargs"})," - Standard DAObject keyword arguments"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"short_label",children:"short_label"}),"\n",(0,i.jsx)(n.p,{children:"Returns a string that represents a nice, disambiguated label for the court.\nThis may not match the court's name. If the name omits city, we\nappend city name to the court name. This is good for a drop-down selection\nlist."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"str"})," - string representing the court's name, with city if needed to disambiguate"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"short_label_and_address",children:"short_label_and_address"}),"\n",(0,i.jsx)(n.p,{children:"Returns a markdown formatted string with the name and address of the court.\nMore concise version without description; suitable for a responsive case."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"str"})," - string representing the court's name and address"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"short_description",children:"short_description"}),"\n",(0,i.jsx)(n.p,{children:"Returns a Markdown formatted string that includes the disambiguated name and\nthe description of the court, for inclusion in the results page with radio\nbuttons."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"str"})," - string representing the court's name and description"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"from_row",children:"from_row"}),"\n",(0,i.jsx)(n.p,{children:"Loads data from a single Pandas Dataframe into the current court object.\nNote: It will try to convert column names that don't make valid\nattributes. Best practice is to use good attribute names (no spaces) that don't interfere\nwith existing attributes or methods of DAObject"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"df_row"})," - Pandas Series object"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ensure_lat_long"})," - bool, whether to use Google Maps to geocode the address if we don't have coordinates"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"geolocate",children:"geolocate"}),"\n",(0,i.jsx)(n.p,{children:"Use Google Maps to geocode the court's address and store the result in the location attribute."}),"\n",(0,i.jsx)(n.p,{children:"Deprecated: use geocode() instead."}),"\n",(0,i.jsx)(n.h4,{id:"geocode",children:"geocode"}),"\n",(0,i.jsx)(n.p,{children:"Use Google Maps to geocode the court's address and store the result in the location attribute."}),"\n",(0,i.jsx)(n.h2,{id:"alcourtloader-objects",children:"ALCourtLoader Objects"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class ALCourtLoader(DAObject)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Object to hold some methods surrounding loading/filtering courts."}),"\n",(0,i.jsx)(n.p,{children:"Built around Pandas dataframe."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Attributes"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"filename"})," ",(0,i.jsx)(n.em,{children:"str"})," - Path to the file containing court information."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"converters"})," ",(0,i.jsx)(n.em,{children:"Dict[str, Callable]"})," - A dictionary of functions to apply to columns in the dataframe."]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"init-1",children:"init"}),"\n",(0,i.jsx)(n.p,{children:"Create a new courtloader object."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"*pargs"})," - Standard DAObject positional arguments"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"**kwargs"})," - Standard DAObject keyword arguments"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"all_courts",children:"all_courts"}),"\n",(0,i.jsx)(n.p,{children:"Return a list of all courts in the spreadsheet."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,i.jsx)(n.p,{children:"List[Dict[int, str]]: List of all ALCourt instances without filtering."}),"\n",(0,i.jsx)(n.h4,{id:"unique_column_values",children:"unique_column_values"}),"\n",(0,i.jsx)(n.p,{children:"Retrieve a set of unique values present in a specified dataframe column."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"column_name"})," ",(0,i.jsx)(n.em,{children:"str"})," - The name of the column in the dataframe."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,i.jsx)(n.p,{children:"Set[str]:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"A set containing unique values from the specified column."}),"\n",(0,i.jsx)(n.li,{children:"Returns an empty set if the column does not exist or an error occurs."}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"county_list",children:"county_list"}),"\n",(0,i.jsx)(n.p,{children:"Get a set of all unique names for the specified column in the given spreadsheet.\nTypically used to get a list of all possible counties that have a court."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"column_name"})," ",(0,i.jsx)(n.em,{children:"str"})," - The name of the column in the dataframe."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Set[str]"})," - A list of all unique values in the specified row in the given spreadsheet"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"county_has_one_court",children:"county_has_one_court"}),"\n",(0,i.jsx)(n.p,{children:"Returns True if there is only one court associated with the specified county\nin the spreadsheet. Returns False otherwise."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"county_name"})," ",(0,i.jsx)(n.em,{children:"str"})," - The name of the county to check."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"county_column"})," ",(0,i.jsx)(n.em,{children:"str"}),' - The name of the column in the dataframe that contains the county names.\nDefaults to "address_county".']}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"bool"})," - True if there is only one court associated with the specified county in the spreadsheet."]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"county_court",children:"county_court"}),"\n",(0,i.jsx)(n.p,{children:"Return the first court matching the county name. Should only be used\nwhen you know there is exactly one match"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"intrinsicName"})," ",(0,i.jsx)(n.em,{children:"str"})," - The intrinsic name you want the newly returned object to have (used for DA namespace searching)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"county_name"})," ",(0,i.jsx)(n.em,{children:"str"})," - The name of the county to check."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"county_column"})," ",(0,i.jsx)(n.em,{children:"str"}),' - The name of the column in the dataframe that contains the county names.\nDefaults to "address_county".']}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ALCourt"})," - The first court matching the county name."]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"matching_courts_in_county",children:"matching_courts_in_county"}),"\n",(0,i.jsx)(n.p,{children:"Retrieve a list of all courts in the specified county."}),"\n",(0,i.jsx)(n.p,{children:"This function fetches courts suitable for displaying as a drop-down or radio button list\nin Docassemble. The results are dictionaries where the key is the index in the dataframe,\nuseful for retrieving the court's full details later using the as_court() method."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"county_name"})," ",(0,i.jsx)(n.em,{children:"str"})," - Name of the county."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"county_column"})," ",(0,i.jsx)(n.em,{children:"str, optional"}),' - Column heading which contains county name. Defaults to "address_county".']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"display_column"})," ",(0,i.jsx)(n.em,{children:"str, optional"}),' - Column heading used for display in the drop-down. Defaults to "name".']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"search_string"})," ",(0,i.jsx)(n.em,{children:"Optional[str], optional"})," - A keyword to filter the list of results. Defaults to None."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"search_columns"})," ",(0,i.jsx)(n.em,{children:"Optional[Union[List[str], str]], optional"})," - Columns to aggregate and search across with\nthe search_string in a case-insensitive manner. Defaults to None."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,i.jsx)(n.p,{children:"List[Dict[int, str]]: List of dictionaries representing matching courts."}),"\n",(0,i.jsx)(n.h4,{id:"filter_courts",children:"filter_courts"}),"\n",(0,i.jsx)(n.p,{children:"Return a filtered subset of courts represented as a list of dictionaries."}),"\n",(0,i.jsxs)(n.p,{children:['Each dictionary has the format {index: name}, where "index" refers to the dataframe index and "name"\nis determined by the ',(0,i.jsx)(n.code,{children:"display_column"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"court_types"})," ",(0,i.jsx)(n.em,{children:"Optional[Union[List[str], str]]"}),' - Exact string match or matches used to filter results\n(inclusive). Examples include "District" or ["Municipal","Superior"].']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"column"})," ",(0,i.jsx)(n.em,{children:"str, optional"}),' - Column heading to search. Defaults to "department".']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"display_column"})," ",(0,i.jsx)(n.em,{children:"str, optional"}),' - Column heading used for display in the drop-down. Defaults to "name".']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"search_string"})," ",(0,i.jsx)(n.em,{children:"Optional[str], optional"})," - A keyword to filter the list of results. Defaults to None."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"search_columns"})," ",(0,i.jsx)(n.em,{children:"Optional[Union[List[str], str]], optional"})," - Columns to aggregate and search across with\nthe search_string in a case-insensitive manner. Defaults to None."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,i.jsx)(n.p,{children:"List[Dict[int, str]]: List of dictionaries representing filtered courts."}),"\n",(0,i.jsx)(n.h4,{id:"as_court",children:"as_court"}),"\n",(0,i.jsx)(n.p,{children:"Retrieve the court at the specified index as an ALCourt object."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"intrinsicName"})," ",(0,i.jsx)(n.em,{children:"str"})," - The intrinsic name you want to assign to the returned object (used for DA namespace searching)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"index"})," ",(0,i.jsx)(n.em,{children:"Union[int, str]"})," - The index position of the court in the dataframe."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ensure_lat_long"})," ",(0,i.jsx)(n.em,{children:"bool, optional"})," - Whether to ensure the presence of latitude and longitude data. Defaults to True."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ALCourt"})," - An ALCourt object initialized with data from the specified index."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>l});var t=s(6540);const i={},r=t.createContext(i);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);