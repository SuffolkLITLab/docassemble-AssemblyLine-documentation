"use strict";(self.webpackChunkdocassemble_assembly_line_documentation=self.webpackChunkdocassemble_assembly_line_documentation||[]).push([[7079],{8309:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>r,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"components/FormFyxer/passive_voice_detection","title":"formfyxer.passive_voice_detection","description":"* formfyxer.passive\\\\voice\\\\detection","source":"@site/docs/components/FormFyxer/passive_voice_detection.md","sourceDirName":"components/FormFyxer","slug":"/components/FormFyxer/passive_voice_detection","permalink":"/docs/components/FormFyxer/passive_voice_detection","draft":false,"unlisted":false,"editUrl":"https://github.com/SuffolkLITLab/docassemble-AssemblyLine-documentation/edit/main/docs/components/FormFyxer/passive_voice_detection.md","tags":[],"version":"current","frontMatter":{}}');var i=s(4848),o=s(8453);const r={},c="formfyxer.passive_voice_detection",l={},a=[{value:"split_sentences",id:"split_sentences",level:3},{value:"Arguments",id:"arguments",level:4},{value:"Returns",id:"returns",level:4},{value:"Notes",id:"notes",level:4},{value:"detect_passive_voice_segments",id:"detect_passive_voice_segments",level:3},{value:"Arguments",id:"arguments-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Raises",id:"raises",level:4},{value:"Notes",id:"notes-1",level:4}];function d(e){const n={a:"a",code:"code",h1:"h1",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"formfyxerpassive_voice_detection",children:"formfyxer.passive_voice_detection"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#formfyxer.passive_voice_detection",children:"formfyxer.passive_voice_detection"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#formfyxer.passive_voice_detection.split_sentences",children:"split_sentences"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#formfyxer.passive_voice_detection.detect_passive_voice_segments",children:"detect_passive_voice_segments"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Passive voice detection utilities backed by OpenAI's ChatCompletion API."}),"\n",(0,i.jsx)("a",{id:"formfyxer.passive_voice_detection.split_sentences"}),"\n",(0,i.jsx)(n.h3,{id:"split_sentences",children:"split_sentences"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def split_sentences(text: str) -> List[str]\n"})}),"\n",(0,i.jsx)(n.p,{children:"Split text into sentences using regex pattern matching."}),"\n",(0,i.jsx)(n.p,{children:"It uses a regex to identify sentence boundaries\nbased on periods, exclamation marks, and question marks, while avoiding splits\non abbreviations followed by quoted words."}),"\n",(0,i.jsx)(n.h4,{id:"arguments",children:"Arguments"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"text"})," - Input text to split into sentences."]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"returns",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"List of sentence strings with leading/trailing whitespace removed.\nEmpty strings are filtered out from the results."}),"\n",(0,i.jsx)(n.h4,{id:"notes",children:"Notes"}),"\n",(0,i.jsx)(n.p,{children:"It replaces the original NLTK-based splitter to reduce dependency weight and\npackage conflicts."}),"\n",(0,i.jsx)("a",{id:"formfyxer.passive_voice_detection.detect_passive_voice_segments"}),"\n",(0,i.jsx)(n.h3,{id:"detect_passive_voice_segments",children:"detect_passive_voice_segments"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def detect_passive_voice_segments(\n        text: Union[str, Sequence[str]],\n        openai_client: Optional[OpenAI] = None,\n        model: str = DEFAULT_MODEL,\n        api_key: Optional[str] = None) -> List[Tuple[str, List[str]]]\n"})}),"\n",(0,i.jsx)(n.p,{children:"Detect passive voice constructions in text using OpenAI's language model."}),"\n",(0,i.jsx)(n.p,{children:"This function analyzes sentences to identify passive voice constructions by\nleveraging OpenAI's Chat Completions API with a simple single-prompt approach."}),"\n",(0,i.jsx)(n.h4,{id:"arguments-1",children:"Arguments"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"text"})," - Input text as either a single string (which will be split into\nsentences) or a sequence of pre-split sentences to analyze."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"openai_client"})," - Pre-configured OpenAI client instance. If None, a client\nwill be created using the api_key parameter or environment variables."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"model"})," - OpenAI model identifier to use for analysis. Defaults to the\nvalue of DEFAULT_MODEL constant (currently 'gpt-5-nano')."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"api_key"})," - Explicit OpenAI API key to use. If None, will try docassemble\nconfig (if available) then environment variables (OPENAI_API_KEY required)."]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"returns-1",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"List of tuples where each tuple contains:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"sentence (str): The original sentence text"}),"\n",(0,i.jsx)(n.li,{children:"fragments (List[str]): List of passive voice text fragments found\nin the sentence, or empty list if no passive voice detected"}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"raises",children:"Raises"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ValueError"})," - If input text contains no valid sentences (>2 words) or\nif input format is invalid."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"RuntimeError"})," - If no API key can be found from any source and no client provided."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"AuthenticationError"})," - If OpenAI API authentication fails (may retry\nonce without organization header)."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(n.p,{children:">>> detect_passive_voice_segments(\"The ball was thrown by John.\")\n[('The ball was thrown by John.', ['was thrown'])]"}),"\n",(0,i.jsx)(n.p,{children:">>> detect_passive_voice_segments(\"John threw the ball.\")\n[('John threw the ball.', [])]"}),"\n",(0,i.jsx)(n.h4,{id:"notes-1",children:"Notes"}),"\n",(0,i.jsx)(n.p,{children:"This implementation uses a single prompt per sentence to classify rather\nthan the ChatCompletion API after testing and finding better performance with this\nsimple approach."})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>c});var t=s(6540);const i={},o=t.createContext(i);function r(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);