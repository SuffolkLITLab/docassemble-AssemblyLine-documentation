"use strict";(self.webpackChunkdocassemble_assembly_line_documentation=self.webpackChunkdocassemble_assembly_line_documentation||[]).push([[8097],{4137:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,l=function(e,t){if(null==e)return{};var n,r,l={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var o=r.createContext({}),d=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=d(e.components);return r.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,l=e.mdxType,a=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=d(n),m=l,_=p["".concat(o,".").concat(m)]||p[m]||u[m]||a;return n?r.createElement(_,i(i({ref:t},c),{},{components:n})):r.createElement(_,i({ref:t},c))}));function m(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=n.length,i=new Array(a);i[0]=p;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:l,i[1]=s;for(var d=2;d<a;d++)i[d]=n[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},7982:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return o},metadata:function(){return d},toc:function(){return c},default:function(){return p}});var r=n(7462),l=n(3366),a=(n(7294),n(4137)),i=["components"],s={sidebar_label:"al_general",title:"al_general"},o=void 0,d={unversionedId:"reference/al_general",id:"reference/al_general",isDocsHomePage:!1,title:"al_general",description:"ALAddressList Objects",source:"@site/docs/reference/al_general.md",sourceDirName:"reference",slug:"/reference/al_general",permalink:"/docassemble-AssemblyLine-documentation/docs/reference/al_general",editUrl:"https://github.com/SuffolkLITLab/docassemble-AssemblyLine-documentation/edit/main/docs/reference/al_general.md",tags:[],version:"current",frontMatter:{sidebar_label:"al_general",title:"al_general"},sidebar:"someSidebar",previous:{title:"E-filing",permalink:"/docassemble-AssemblyLine-documentation/docs/framework/efiling"},next:{title:"al_courts",permalink:"/docassemble-AssemblyLine-documentation/docs/reference/al_courts"}},c=[{value:"ALAddressList Objects",id:"aladdresslist-objects",children:[],level:2},{value:"ALPeopleList Objects",id:"alpeoplelist-objects",children:[{value:"names_and_addresses_on_one_line",id:"names_and_addresses_on_one_line",children:[],level:4}],level:2},{value:"ALIndividual Objects",id:"alindividual-objects",children:[{value:"contact_methods",id:"contact_methods",children:[],level:4},{value:"merge_letters",id:"merge_letters",children:[],level:4},{value:"name_fields",id:"name_fields",children:[],level:4},{value:"address_fields",id:"address_fields",children:[],level:4},{value:"gender_fields",id:"gender_fields",children:[],level:4},{value:"contact_fields",id:"contact_fields",children:[],level:4},{value:"section_links",id:"section_links",children:[],level:4},{value:"will_send_to_real_court",id:"will_send_to_real_court",children:[],level:4},{value:"filter_letters",id:"filter_letters",children:[],level:4},{value:"fa_icon",id:"fa_icon",children:[],level:4},{value:"is_phone_or_email",id:"is_phone_or_email",children:[],level:4},{value:"github_modified_date",id:"github_modified_date",children:[],level:4}],level:2}],u={toc:c};function p(e){var t=e.components,n=(0,l.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"aladdresslist-objects"},"ALAddressList Objects"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class ALAddressList(DAList)\n")),(0,a.kt)("p",null,"Store a list of Address objects"),(0,a.kt)("h2",{id:"alpeoplelist-objects"},"ALPeopleList Objects"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class ALPeopleList(DAList)\n")),(0,a.kt)("p",null,"Used to represent a list of people. E.g., defendants, plaintiffs, children"),(0,a.kt)("h4",{id:"names_and_addresses_on_one_line"},"names","_","and","_","addresses","_","on","_","one","_","line"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"}," | names_and_addresses_on_one_line(comma_string: str = '; ') -> str\n")),(0,a.kt)("p",null,"Returns the name of each person followed by their address, separated by a semicolon"),(0,a.kt)("h2",{id:"alindividual-objects"},"ALIndividual Objects"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class ALIndividual(Individual)\n")),(0,a.kt)("p",null,"Used to represent an Individual on the assembly line project.\nTwo custom attributes are objects and so we need to initialize: ",(0,a.kt)("inlineCode",{parentName:"p"},"previous_addresses"),"\nand ",(0,a.kt)("inlineCode",{parentName:"p"},"other_addresses")),(0,a.kt)("h4",{id:"contact_methods"},"contact","_","methods"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"}," | contact_methods() -> str\n")),(0,a.kt)("p",null,"Method to return a formatted string with all provided contact methods of the individual:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Phone number(s)"),(0,a.kt)("li",{parentName:"ul"},"Email"),(0,a.kt)("li",{parentName:"ul"},"other method")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"str")," - Formatted string")),(0,a.kt)("h4",{id:"merge_letters"},"merge","_","letters"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"}," | merge_letters(new_letters: str)\n")),(0,a.kt)("p",null,"If the Individual has a child_letters attribute, add the new letters to the existing list"),(0,a.kt)("h4",{id:"name_fields"},"name","_","fields"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"}," | name_fields(person_or_business: str = 'person') -> List[Dict[str, str]]\n")),(0,a.kt)("p",null,"Return suitable field prompts for a name. If ",(0,a.kt)("inlineCode",{parentName:"p"},"uses_parts")," is None, adds the\nproper ",'"',"show ifs",'"'," and uses both the parts and the single entry"),(0,a.kt)("h4",{id:"address_fields"},"address","_","fields"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},' | address_fields(country_code: str = "US", default_state: str = None, show_country: bool = False) -> List[Dict[str, str]]\n')),(0,a.kt)("p",null,"Return field prompts for address."),(0,a.kt)("h4",{id:"gender_fields"},"gender","_","fields"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"}," | gender_fields(show_help=False)\n")),(0,a.kt)("p",null,"Return a standard gender input with ",'"',"self described",'"'," option."),(0,a.kt)("h4",{id:"contact_fields"},"contact","_","fields"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"}," | contact_fields()\n")),(0,a.kt)("p",null,"Return field prompts for other contact info"),(0,a.kt)("h4",{id:"section_links"},"section","_","links"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"section_links(nav: DANav) -> List[str]\n")),(0,a.kt)("p",null,"Returns a list of clickable navigation links without animation."),(0,a.kt)("h4",{id:"will_send_to_real_court"},"will","_","send","_","to","_","real","_","court"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"will_send_to_real_court() -> bool\n")),(0,a.kt)("p",null,"Dev or root needs to be in the URL root: can change in the config file"),(0,a.kt)("h4",{id:"filter_letters"},"filter","_","letters"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"filter_letters(letter_strings: Union[List[str], str]) -> str\n")),(0,a.kt)("p",null,"Used to take a list of letters like ",'["',"A",'"',",",'"',"ABC",'"',",",'"',"AB",'"]'," and filter out any duplicate letters."),(0,a.kt)("h4",{id:"fa_icon"},"fa","_","icon"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'fa_icon(icon: str, color: str = "primary", color_css: str = None, size: str = "sm")\n')),(0,a.kt)("p",null,"Return HTML for a font-awesome icon of the specified size and color. You can reference\na CSS variable (such as Bootstrap theme color) or a true CSS color reference, such as ","'","blue","'"," or\n","'","#DDDDDD","'",". Defaults to Bootstrap theme color ",'"',"primary",'"',"."),(0,a.kt)("h4",{id:"is_phone_or_email"},"is","_","phone","_","or","_","email"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"is_phone_or_email(text: str) -> bool\n")),(0,a.kt)("p",null,"Returns True if the string is either a valid phone number or a valid email address.\nEmail validation is extremely minimal--just checks for an @ sign between two non-zero length\nstrings."),(0,a.kt)("h4",{id:"github_modified_date"},"github","_","modified","_","date"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"github_modified_date(github_user: str, github_repo_name: str) -> Union[DADateTime, None]\n")),(0,a.kt)("p",null,"Returns the date that the given GitHub repository was modified or None if API call fails."),(0,a.kt)("p",null,"Will check for the presence of credentials in the configuration labeled ",'"',"github readonly",'"',"\nin this format:"),(0,a.kt)("p",null,"github readonly:\nusername: YOUR_GITHUB_USERNAME\npassword: YOUR_GITHUB_PRIVATE_TOKEN\ntype: basic"),(0,a.kt)("p",null,"If no valid auth information is in the configuration, it will fall back to anonymous authentication.\nThe GitHub API is rate-limited to 60 anonymous API queries/hour."))}p.isMDXComponent=!0}}]);