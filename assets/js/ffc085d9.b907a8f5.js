"use strict";(self.webpackChunkdocassemble_assembly_line_documentation=self.webpackChunkdocassemble_assembly_line_documentation||[]).push([[2506],{5538:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>a,contentTitle:()=>i,default:()=>h,frontMatter:()=>c,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"components/EFSPIntegration/test/test_conversions","title":"EFSPIntegration.test.test_conversions","description":"TestConversions Objects","source":"@site/docs/components/EFSPIntegration/test/test_conversions.md","sourceDirName":"components/EFSPIntegration/test","slug":"/components/EFSPIntegration/test/test_conversions","permalink":"/docs/components/EFSPIntegration/test/test_conversions","draft":false,"unlisted":false,"editUrl":"https://github.com/SuffolkLITLab/docassemble-AssemblyLine-documentation/edit/main/docs/components/EFSPIntegration/test/test_conversions.md","tags":[],"version":"current","frontMatter":{"sidebar_label":"test_conversions","title":"EFSPIntegration.test.test_conversions"},"sidebar":"docs","previous":{"title":"py_efsp_client","permalink":"/docs/components/EFSPIntegration/py_efsp_client"},"next":{"title":"WIP Intro","permalink":"/docs/components/ALKiln/intro"}}');var o=s(4848),r=s(8453);const c={sidebar_label:"test_conversions",title:"EFSPIntegration.test.test_conversions"},i=void 0,a={},l=[{value:"TestConversions Objects",id:"testconversions-objects",level:2},{value:"test_parse_case_info",id:"test_parse_case_info",level:4},{value:"TestNoneResp Objects",id:"testnoneresp-objects",level:2},{value:"test_none",id:"test_none",level:4},{value:"TestCourtSwitching Objects",id:"testcourtswitching-objects",level:2},{value:"test_switched_court",id:"test_switched_court",level:4},{value:"TestConversionIgnoreAttorneys Objects",id:"testconversionignoreattorneys-objects",level:2},{value:"test_ignore_attorneys",id:"test_ignore_attorneys",level:4}];function d(e){const t={code:"code",h2:"h2",h4:"h4",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{id:"testconversions-objects",children:"TestConversions Objects"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"class TestConversions(unittest.TestCase)\n"})}),"\n",(0,o.jsx)(t.p,{children:'Tests conversions.py on the "vars.json" file'}),"\n",(0,o.jsx)(t.h4,{id:"test_parse_case_info",children:"test_parse_case_info"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"def test_parse_case_info()\n"})}),"\n",(0,o.jsx)(t.p,{children:"Makes sure that participants of the case are parsed fully, needed"}),"\n",(0,o.jsx)(t.h2,{id:"testnoneresp-objects",children:"TestNoneResp Objects"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"class TestNoneResp(unittest.TestCase)\n"})}),"\n",(0,o.jsx)(t.p,{children:'Tests with none responses conversions.py on the "vars.json" file'}),"\n",(0,o.jsx)(t.h4,{id:"test_none",children:"test_none"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"def test_none()\n"})}),"\n",(0,o.jsx)(t.p,{children:"Makes sure that participants of the case are parsed fully, needed"}),"\n",(0,o.jsx)(t.h2,{id:"testcourtswitching-objects",children:"TestCourtSwitching Objects"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"class TestCourtSwitching(unittest.TestCase)\n"})}),"\n",(0,o.jsx)(t.p,{children:"Tests that if we search a case in a grouped court (say peoria) and\nget back a court from a sub court (peariacr), that the\ncourt_id from the found case reflects the sub court."}),"\n",(0,o.jsx)(t.p,{children:"This is necessary, as filings can't be accepted to the grouped court."}),"\n",(0,o.jsx)(t.h4,{id:"test_switched_court",children:"test_switched_court"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"def test_switched_court()\n"})}),"\n",(0,o.jsx)(t.p,{children:"Makes sure that participants of the case are parsed fully, needed"}),"\n",(0,o.jsx)(t.h2,{id:"testconversionignoreattorneys-objects",children:"TestConversionIgnoreAttorneys Objects"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"class TestConversionIgnoreAttorneys(unittest.TestCase)\n"})}),"\n",(0,o.jsx)(t.h4,{id:"test_ignore_attorneys",children:"test_ignore_attorneys"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"def test_ignore_attorneys()\n"})}),"\n",(0,o.jsx)(t.p,{children:"Attorneys are just stuck in the middle with normal case participants. You can't attach service contacts to them, so"})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>c,x:()=>i});var n=s(6540);const o={},r=n.createContext(o);function c(e){const t=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);