"use strict";(self.webpackChunkdocassemble_assembly_line_documentation=self.webpackChunkdocassemble_assembly_line_documentation||[]).push([[2583],{5898:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"components/ALToolbox/misc","title":"ALToolbox.misc","description":"* ALToolbox.misc","source":"@site/docs/components/ALToolbox/misc.md","sourceDirName":"components/ALToolbox","slug":"/components/ALToolbox/misc","permalink":"/docs/components/ALToolbox/misc","draft":false,"unlisted":false,"editUrl":"https://github.com/SuffolkLITLab/docassemble-AssemblyLine-documentation/edit/main/docs/components/ALToolbox/misc.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"ALToolbox.copy_button","permalink":"/docs/components/ALToolbox/copy_button"},"next":{"title":"ALToolbox.save_input_data","permalink":"/docs/components/ALToolbox/save_input_data"}}');var t=s(4848),r=s(8453);const l={},o="ALToolbox.misc",a={},d=[{value:"thousands",id:"thousands",level:3},{value:"Arguments",id:"arguments",level:4},{value:"Returns",id:"returns",level:4},{value:"tel",id:"tel",level:3},{value:"Arguments",id:"arguments-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"fa_icon",id:"fa_icon",level:3},{value:"Arguments",id:"arguments-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"space",id:"space",level:3},{value:"Arguments",id:"arguments-3",level:4},{value:"Returns",id:"returns-3",level:4},{value:"yes_no_unknown",id:"yes_no_unknown",level:3},{value:"Arguments",id:"arguments-4",level:4},{value:"Returns",id:"returns-4",level:4},{value:"number_to_letter",id:"number_to_letter",level:3},{value:"Arguments",id:"arguments-5",level:4},{value:"Returns",id:"returns-5",level:4},{value:"collapse_template",id:"collapse_template",level:3},{value:"Arguments",id:"arguments-6",level:4},{value:"Returns",id:"returns-6",level:4},{value:"tabbed_templates_html",id:"tabbed_templates_html",level:3},{value:"Arguments",id:"arguments-7",level:4},{value:"Returns",id:"returns-7",level:4},{value:"review_widget",id:"review_widget",level:3},{value:"Arguments",id:"arguments-8",level:4},{value:"Returns",id:"returns-8",level:4},{value:"sum_if_defined",id:"sum_if_defined",level:3},{value:"Arguments",id:"arguments-9",level:4},{value:"Returns",id:"returns-9",level:4},{value:"add_records",id:"add_records",level:3},{value:"Arguments",id:"arguments-10",level:4},{value:"Returns",id:"returns-10",level:4},{value:"output_checkbox",id:"output_checkbox",level:3},{value:"Arguments",id:"arguments-11",level:4},{value:"Returns",id:"returns-11",level:4},{value:"nice_county_name",id:"nice_county_name",level:3},{value:"Arguments",id:"arguments-12",level:4},{value:"Returns",id:"returns-12",level:4},{value:"button_array",id:"button_array",level:3},{value:"Arguments",id:"arguments-13",level:4},{value:"Returns",id:"returns-13",level:4},{value:"none_to_empty",id:"none_to_empty",level:3},{value:"Arguments",id:"arguments-14",level:4},{value:"Returns",id:"returns-14",level:4},{value:"option_or_other",id:"option_or_other",level:3},{value:"Arguments",id:"arguments-15",level:4},{value:"Returns",id:"returns-15",level:4},{value:"true_values_with_other",id:"true_values_with_other",level:3},{value:"Arguments",id:"arguments-16",level:4},{value:"Returns",id:"returns-16",level:4},{value:"include_a_year",id:"include_a_year",level:3},{value:"Arguments",id:"arguments-17",level:4},{value:"Returns",id:"returns-17",level:4},{value:"Raises",id:"raises",level:4},{value:"is_leap_year",id:"is_leap_year",level:3},{value:"Arguments",id:"arguments-18",level:4},{value:"Returns",id:"returns-18",level:4},{value:"age_in_years",id:"age_in_years",level:3},{value:"Arguments",id:"arguments-19",level:4},{value:"Returns",id:"returns-19",level:4},{value:"format_date_if_defined",id:"format_date_if_defined",level:3},{value:"Arguments",id:"arguments-20",level:4},{value:"Returns",id:"returns-20",level:4}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"altoolboxmisc",children:"ALToolbox.misc"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#ALToolbox.misc",children:"ALToolbox.misc"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#ALToolbox.misc.thousands",children:"thousands"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#ALToolbox.misc.tel",children:"tel"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#ALToolbox.misc.fa_icon",children:"fa_icon"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#ALToolbox.misc.space",children:"space"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#ALToolbox.misc.yes_no_unknown",children:"yes_no_unknown"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#ALToolbox.misc.number_to_letter",children:"number_to_letter"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#ALToolbox.misc.collapse_template",children:"collapse_template"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#ALToolbox.misc.tabbed_templates_html",children:"tabbed_templates_html"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#ALToolbox.misc.review_widget",children:"review_widget"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#ALToolbox.misc.sum_if_defined",children:"sum_if_defined"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#ALToolbox.misc.add_records",children:"add_records"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#ALToolbox.misc.output_checkbox",children:"output_checkbox"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#ALToolbox.misc.nice_county_name",children:"nice_county_name"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#ALToolbox.misc.button_array",children:"button_array"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#ALToolbox.misc.none_to_empty",children:"none_to_empty"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#ALToolbox.misc.option_or_other",children:"option_or_other"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#ALToolbox.misc.true_values_with_other",children:"true_values_with_other"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#ALToolbox.misc.include_a_year",children:"include_a_year"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#ALToolbox.misc.is_leap_year",children:"is_leap_year"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#ALToolbox.misc.age_in_years",children:"age_in_years"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#ALToolbox.misc.format_date_if_defined",children:"format_date_if_defined"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)("a",{id:"ALToolbox.misc.thousands"}),"\n",(0,t.jsx)(n.h3,{id:"thousands",children:"thousands"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def thousands(num: Union[float, str, Decimal], show_decimals=False) -> str\n"})}),"\n",(0,t.jsx)(n.p,{children:"Return a whole number formatted with thousands separator."}),"\n",(0,t.jsxs)(n.p,{children:["Optionally, format with 2 decimal points (for a PDF form with the\ncurrency symbol already present in the form). If ",(0,t.jsx)(n.code,{children:"show_decimals"})," is False,\nwill call ",(0,t.jsx)(n.code,{children:"int(num)"}),", truncating the decimals instead of rounding to the\nclosest int."]}),"\n",(0,t.jsx)(n.h4,{id:"arguments",children:"Arguments"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"num"})," ",(0,t.jsx)(n.em,{children:"Union[float, str, Decimal]"})," - The numeric value to format."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"show_decimals"})," ",(0,t.jsx)(n.em,{children:"bool, optional"})," - Whether to display 2 decimal places.\nDefaults to False."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"returns",children:"Returns"}),"\n",(0,t.jsx)(n.p,{children:"The formatted number string with thousands separators, optionally\nwith 2 decimal places."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,t.jsx)(n.p,{children:">>> thousands(1234.56)\n'1,234'\n>>> thousands(1234.56, show_decimals=True)\n'1,234.56'"}),"\n",(0,t.jsx)("a",{id:"ALToolbox.misc.tel"}),"\n",(0,t.jsx)(n.h3,{id:"tel",children:"tel"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def tel(phone_number) -> str\n"})}),"\n",(0,t.jsx)(n.p,{children:"Format a phone number so you can click on it to open in your phone dialer."}),"\n",(0,t.jsx)(n.p,{children:"Creates an HTML anchor tag with tel: protocol that allows users to click\nand dial the number on mobile devices or applications that support tel links."}),"\n",(0,t.jsx)(n.h4,{id:"arguments-1",children:"Arguments"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"phone_number"})," - The phone number to format. Can be string or numeric type."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"returns-1",children:"Returns"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"str"})," - HTML anchor tag with tel: link containing the phone number."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,t.jsx)(n.p,{children:'>>> tel("555-123-4567")\n\'<a href="tel:555-123-4567">555-123-4567</a>\''}),"\n",(0,t.jsx)("a",{id:"ALToolbox.misc.fa_icon"}),"\n",(0,t.jsx)(n.h3,{id:"fa_icon",children:"fa_icon"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'def fa_icon(icon: str,\n            color: Optional[str] = "primary",\n            color_css: Optional[str] = None,\n            size: Optional[str] = "sm",\n            fa_class: str = "fa-solid",\n            aria_hidden: bool = True) -> str\n'})}),"\n",(0,t.jsx)(n.p,{children:"Display a fontawesome icon inline."}),"\n",(0,t.jsxs)(n.p,{children:["Docassemble allows you to display an icon from ",(0,t.jsx)(n.a,{href:"https://fontawesome.com",children:"fontawesome"}),",\nbut it does not provide control over the size or color of the icon. This function gives\nyou more control over the icon that is inserted."]}),"\n",(0,t.jsx)(n.h4,{id:"arguments-2",children:"Arguments"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"icon"})," - a string representing a fontawesome icon. The icon needs to be in the\n",(0,t.jsx)(n.a,{href:"https://fontawesome.com/search?o=r&m=free",children:"free library"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"color"})," - can be any ",(0,t.jsx)(n.a,{href:"https://getbootstrap.com/docs/5.0/utilities/colors/",children:"Bootstrap color variable"}),".\nFor example: ",(0,t.jsx)(n.code,{children:"primary"}),", ",(0,t.jsx)(n.code,{children:"secondary"}),", ",(0,t.jsx)(n.code,{children:"warning"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"color_css"})," - allows you to use a CSS code to represent the color, e.g., ",(0,t.jsx)(n.code,{children:"blue"}),", or ",(0,t.jsx)(n.code,{children:"fff"})," for black"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"size"})," - used to control the ",(0,t.jsx)(n.a,{href:"https://fontawesome.com/v6.0/docs/web/style/size",children:"fontawesome size"}),"\n(without the ",(0,t.jsx)(n.code,{children:"fa-"})," prefix). Valid values include ",(0,t.jsx)(n.code,{children:"2xs"}),", ",(0,t.jsx)(n.code,{children:"xs"}),", the default of ",(0,t.jsx)(n.code,{children:"sm"}),",\n",(0,t.jsx)(n.code,{children:"md"}),", ",(0,t.jsx)(n.code,{children:"lg"}),", ",(0,t.jsx)(n.code,{children:"xl"}),", ",(0,t.jsx)(n.code,{children:"2x1"}),", and the python ",(0,t.jsx)(n.code,{children:"None"}),", which defaults to ",(0,t.jsx)(n.code,{children:"md"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"fa_class"})," - let's you specify the fontawesome class, needed for any icon that isn't\nthe default class of ",(0,t.jsx)(n.code,{children:"fa-solid"}),", like ",(0,t.jsx)(n.code,{children:"fa-brands"}),", or ",(0,t.jsx)(n.code,{children:"fa-regular"})," and ",(0,t.jsx)(n.code,{children:"fa-light"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"aria_hidden"})," - if True, adds ",(0,t.jsx)(n.code,{children:'aria-hidden="true"'})," to the icon, which is the default"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"returns-2",children:"Returns"}),"\n",(0,t.jsx)(n.p,{children:"HTML for a font-awesome icon of the specified size and color."}),"\n",(0,t.jsx)("a",{id:"ALToolbox.misc.space"}),"\n",(0,t.jsx)(n.h3,{id:"space",children:"space"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'def space(var_name: str, prefix=" ", suffix="") -> str\n'})}),"\n",(0,t.jsx)(n.p,{children:"If the value as a string is defined, return it prefixed/suffixed."}),"\n",(0,t.jsx)(n.p,{children:"Defaults to prefix of a space. Helps build a sentence with less cruft.\nEquivalent to SPACE function in HotDocs. Only returns the formatted value\nif the variable name is valid and the variable is defined and has a value."}),"\n",(0,t.jsx)(n.h4,{id:"arguments-3",children:"Arguments"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"var_name"})," ",(0,t.jsx)(n.em,{children:"str"})," - The name of the variable to check and format."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"prefix"})," ",(0,t.jsx)(n.em,{children:"str, optional"}),' - String to prepend to the value. Defaults to " ".']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"suffix"})," ",(0,t.jsx)(n.em,{children:"str, optional"}),' - String to append to the value. Defaults to "".']}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"returns-3",children:"Returns"}),"\n",(0,t.jsx)(n.p,{children:"The variable value with prefix and suffix if variable is defined\nand has a value, otherwise an empty string."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,t.jsx)(n.p,{children:'>>> space("user_middle_name", prefix=" ", suffix="")\n" John"  # if user_middle_name is defined as "John"\n>>> space("undefined_var")\n""  # if variable is not defined'}),"\n",(0,t.jsx)("a",{id:"ALToolbox.misc.yes_no_unknown"}),"\n",(0,t.jsx)(n.h3,{id:"yes_no_unknown",children:"yes_no_unknown"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'def yes_no_unknown(var_name: str,\n                   condition: Optional[bool],\n                   unknown="Unknown",\n                   placeholder=0) -> Any\n'})}),"\n",(0,t.jsx)(n.p,{children:"Return 'unknown' if the value is None rather than False."}),"\n",(0,t.jsx)(n.p,{children:"Helper for PDF filling with yesnomaybe fields. Distinguishes between\nFalse (explicitly no) and None (unknown/not answered)."}),"\n",(0,t.jsx)(n.h4,{id:"arguments-4",children:"Arguments"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"var_name"})," ",(0,t.jsx)(n.em,{children:"str"})," - The name of the variable to return if condition is True."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"condition"})," ",(0,t.jsx)(n.em,{children:"Optional[bool]"})," - The condition to evaluate. True returns the\nvariable value, False returns placeholder, None returns unknown."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"unknown"})," ",(0,t.jsx)(n.em,{children:"str, optional"}),' - Value to return when condition is None.\nDefaults to "Unknown".']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"placeholder"})," - Value to return when condition is False. Defaults to 0."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"returns-4",children:"Returns"}),"\n",(0,t.jsx)(n.p,{children:"The value of var_name if condition is True, the unknown string if\ncondition is None, or the placeholder value if condition is False."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,t.jsx)(n.p,{children:'>>> yes_no_unknown("user_answer", True, "Unknown", 0)'}),"\n",(0,t.jsx)(n.h1,{id:"returns-value-of-user_answer-variable",children:"Returns value of user_answer variable"}),"\n",(0,t.jsx)(n.p,{children:'>>> yes_no_unknown("user_answer", None, "Unknown", 0)\n"Unknown"\n>>> yes_no_unknown("user_answer", False, "Unknown", 0)\n0'}),"\n",(0,t.jsx)("a",{id:"ALToolbox.misc.number_to_letter"}),"\n",(0,t.jsx)(n.h3,{id:"number_to_letter",children:"number_to_letter"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def number_to_letter(n: Optional[int]) -> str\n"})}),"\n",(0,t.jsx)(n.p,{children:"Returns a capital letter representing ordinal position."}),"\n",(0,t.jsx)(n.p,{children:"E.g., 1=A, 2=B, etc. Appends letters once you reach 26 in a way compatible\nwith Excel/Google Sheets column naming conventions. 27=AA, 28=AB..."}),"\n",(0,t.jsx)(n.h4,{id:"arguments-5",children:"Arguments"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"n"})," ",(0,t.jsx)(n.em,{children:"Optional[int]"})," - The number to convert to letters. If None, treated as 0."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"returns-5",children:"Returns"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"str"})," - The letter representation of the number using Excel-style column naming."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,t.jsx)(n.p,{children:">>> number_to_letter(1)\n'A'\n>>> number_to_letter(26)\n'Z'\n>>> number_to_letter(27)\n'AA'"}),"\n",(0,t.jsx)("a",{id:"ALToolbox.misc.collapse_template"}),"\n",(0,t.jsx)(n.h3,{id:"collapse_template",children:"collapse_template"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'def collapse_template(template: DALazyTemplate,\n                      classname: str | None = None,\n                      closed_icon: str = "caret-right",\n                      open_icon: str = "caret-down",\n                      collapsed: bool = True) -> str\n'})}),"\n",(0,t.jsx)(n.p,{children:'Insert HTML for a Bootstrap "collapse" div.'}),"\n",(0,t.jsx)(n.p,{children:"Creates a collapsible section with a clickable header that shows/hides content.\nOptionally, you can specify custom icons to override the defaults."}),"\n",(0,t.jsxs)(n.p,{children:['The default icons are "right caret" which displays when the text is collapsed\n(',(0,t.jsx)(n.code,{children:"closed_icon"}),') and "down caret" which displays when the text is open (',(0,t.jsx)(n.code,{children:"open_icon"}),")."]}),"\n",(0,t.jsx)(n.h4,{id:"arguments-6",children:"Arguments"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"template"})," ",(0,t.jsx)(n.em,{children:"DALazyTemplate"})," - The docassemble template to render in the collapsible section."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"classname"})," ",(0,t.jsx)(n.em,{children:"str | None, optional"}),' - CSS class name for styling the content container.\nDefaults to None (uses "bg-light").']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"closed_icon"})," ",(0,t.jsx)(n.em,{children:"str, optional"}),' - FontAwesome icon name for collapsed state.\nDefaults to "caret-right".']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"open_icon"})," ",(0,t.jsx)(n.em,{children:"str, optional"}),' - FontAwesome icon name for expanded state.\nDefaults to "caret-down".']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"collapsed"})," ",(0,t.jsx)(n.em,{children:"bool, optional"})," - Whether the section should start collapsed.\nDefaults to True."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"returns-6",children:"Returns"}),"\n",(0,t.jsx)(n.p,{children:"Complete HTML string for the Bootstrap collapse component, or empty\nstring if template has no content."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,t.jsx)(n.p,{children:'>>> collapse_template(my_template, classname="bg-primary", collapsed=False)\n\'<div id="..." class="al_collapse_template">...</div>\''}),"\n",(0,t.jsx)("a",{id:"ALToolbox.misc.tabbed_templates_html"}),"\n",(0,t.jsx)(n.h3,{id:"tabbed_templates_html",children:"tabbed_templates_html"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def tabbed_templates_html(tab_group_name: str, *pargs) -> str\n"})}),"\n",(0,t.jsx)(n.p,{children:"Create Bootstrap v 4.5 tabs with template subjects as tab labels."}),"\n",(0,t.jsx)(n.p,{children:"Provided a list of templates, creates a tabbed interface where each template's\nsubject becomes the tab label and the content becomes the tab panel content."}),"\n",(0,t.jsx)(n.h4,{id:"arguments-7",children:"Arguments"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"tab_group_name"})," ",(0,t.jsx)(n.em,{children:"str"})," - The base name for the tab group, used to generate\nunique IDs for the tabs."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"*pargs"})," - Variable number of template objects that have subject and content_as_html\nmethods."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"returns-7",children:"Returns"}),"\n",(0,t.jsx)(n.p,{children:"Complete HTML string containing Bootstrap tabs navigation and content\npanels."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,t.jsx)(n.p,{children:'>>> tabbed_templates_html("my_tabs", template1, template2, template3)\n\'<ul class="nav nav-tabs" id="my_tabs">...</ul><div class="tab-content">...</div>\''}),"\n",(0,t.jsx)("a",{id:"ALToolbox.misc.review_widget"}),"\n",(0,t.jsx)(n.h3,{id:"review_widget",children:"review_widget"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'def review_widget(\n        *,\n        up_action: str,\n        down_action: str,\n        review_action: Optional[str] = None,\n        thumbs_display: str = "Did we help you?",\n        review_display:\n    str = "Thank you for your feedback. Let us know what we could do better",\n        submit_review_button: str = "Add your review",\n        post_review_display: str = "Thank you for your review!") -> str\n'})}),"\n",(0,t.jsx)(n.p,{children:"A widget that allows people to give a quick review (thumbs up and down, with an optional text\ncomponent) in the middle of an interview without triggering a page reload."}),"\n",(0,t.jsxs)(n.p,{children:["If ",(0,t.jsx)(n.code,{children:"review_action"})," is provided, once you press either of the thumbs, a text input screen with\na submit button appears, and once the text review is submitted (or after the thumbs, if no\n",(0,t.jsx)(n.code,{children:"review_action"}),' was provided), a final "thank you" message is displayed.']}),"\n",(0,t.jsx)(n.h4,{id:"arguments-8",children:"Arguments"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"up_action"})," - the variable name of an event to be executed on the server if the\nthumbs up is pressed"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"down_action"})," - the variable name of an event to be executed on the server if the\nthumbs down is pressed"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"review_action"})," - the variable name of an event to be execute on the\nserver when someone submits their text review"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"thumbs_display"})," - text displayed to user describing the thumbs"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"review_display"})," - text displayed to user describing the text input"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"submit_review_button"})," - text on the button to submit their text review"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"post_review_display"})," - text displayed to user after review is submitted"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"returns-8",children:"Returns"}),"\n",(0,t.jsx)(n.p,{children:"the HTML string of the widget"}),"\n",(0,t.jsx)("a",{id:"ALToolbox.misc.sum_if_defined"}),"\n",(0,t.jsx)(n.h3,{id:"sum_if_defined",children:"sum_if_defined"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def sum_if_defined(*pargs) -> Union[int, float, Decimal]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Add up the value of variables that are not in a list."}),"\n",(0,t.jsx)(n.p,{children:"Lets you sum the values of multiple variables, but only includes variables\nthat are defined. Undefined variables are skipped rather than causing errors."}),"\n",(0,t.jsx)(n.h4,{id:"arguments-9",children:"Arguments"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"*pargs"})," - Variable number of variable names (strings) to sum up."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"returns-9",children:"Returns"}),"\n",(0,t.jsx)(n.p,{children:"The sum of all defined variable values. Variables that are not defined\nare treated as 0 (skipped)."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,t.jsx)(n.p,{children:'>>> sum_if_defined("income1", "income2", "income3")'}),"\n",(0,t.jsx)(n.h1,{id:"returns-sum-of-defined-income-variables-skipping-any-undefined-ones",children:"Returns sum of defined income variables, skipping any undefined ones"}),"\n",(0,t.jsx)("a",{id:"ALToolbox.misc.add_records"}),"\n",(0,t.jsx)(n.h3,{id:"add_records",children:"add_records"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def add_records(obj, labels) -> Any\n"})}),"\n",(0,t.jsx)(n.p,{children:"List demo interviews in the current package to be run from the landing page."}),"\n",(0,t.jsx)(n.p,{children:"Populates a DAList object with records containing interview information\nincluding name, description, and reference for creating a demo landing page."}),"\n",(0,t.jsx)(n.h4,{id:"arguments-10",children:"Arguments"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"obj"})," - A DAList object to populate with interview records."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"labels"})," ",(0,t.jsx)(n.em,{children:"dict"})," - Dictionary where keys are interview names and values are\ntuples/lists containing [description, reference]."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"returns-10",children:"Returns"}),"\n",(0,t.jsx)(n.p,{children:"The populated obj (DAList) with interview records added."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,t.jsx)(n.p,{children:'>>> interviews = {"intake": ["Intake Interview", "intake.yml"]}\n>>> add_records(my_list, interviews)'}),"\n",(0,t.jsx)(n.h1,{id:"my_list0name--intake-description--intake-interview-etc",children:'my_list[0].name = "intake", description = "Intake Interview", etc.'}),"\n",(0,t.jsx)("a",{id:"ALToolbox.misc.output_checkbox"}),"\n",(0,t.jsx)(n.h3,{id:"output_checkbox",children:"output_checkbox"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'def output_checkbox(value_to_check: bool,\n                    checked_value: str = "[X]",\n                    unchecked_value: str = "[  ]") -> str\n'})}),"\n",(0,t.jsx)(n.p,{children:"Generate a conditional checkbox for docx templates."}),"\n",(0,t.jsx)(n.p,{children:"Returns different values based on whether a boolean condition is true or false,\nuseful for creating checkboxes in document templates."}),"\n",(0,t.jsx)(n.h4,{id:"arguments-11",children:"Arguments"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"value_to_check"})," ",(0,t.jsx)(n.em,{children:"bool"})," - The boolean value to evaluate."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"checked_value"})," ",(0,t.jsx)(n.em,{children:"str, optional"}),' - Value to return when condition is True.\nDefaults to "[X]". Can be any string or even a DAFile or DAStaticFile\nwith the image of a checkbox.']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"unchecked_value"})," ",(0,t.jsx)(n.em,{children:"str, optional"}),' - Value to return when condition is False.\nDefaults to "[  ]". Opposite meaning of ',(0,t.jsx)(n.code,{children:"checked_value"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"returns-11",children:"Returns"}),"\n",(0,t.jsx)(n.p,{children:"The checked_value if value_to_check is True, otherwise unchecked_value."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,t.jsx)(n.p,{children:">>> output_checkbox(True)\n'[X]'\n>>> output_checkbox(False, checked_value=\"YES\", unchecked_value=\"NO\")\n'NO'"}),"\n",(0,t.jsx)("a",{id:"ALToolbox.misc.nice_county_name"}),"\n",(0,t.jsx)(n.h3,{id:"nice_county_name",children:"nice_county_name"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def nice_county_name(address: Address) -> str\n"})}),"\n",(0,t.jsx)(n.p,{children:'Clean up county name by removing " County" suffix if present.'}),"\n",(0,t.jsx)(n.p,{children:'If the county name contains the word "County", which Google Address\nAutocomplete does by default, remove it to get a cleaner display name.'}),"\n",(0,t.jsx)(n.h4,{id:"arguments-12",children:"Arguments"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"address"})," ",(0,t.jsx)(n.em,{children:"Address"})," - A docassemble Address object that may have a county attribute."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"returns-12",children:"Returns"}),"\n",(0,t.jsx)(n.p,{children:'The county name with " County" suffix removed, or empty string if\nthe address has no county attribute.'}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,t.jsx)(n.p,{children:">>> nice_county_name(address_with_county)\n'Suffolk'  # if address.county was \"Suffolk County\"\n>>> nice_county_name(address_without_county)\n''"}),"\n",(0,t.jsx)("a",{id:"ALToolbox.misc.button_array"}),"\n",(0,t.jsx)(n.h3,{id:"button_array",children:"button_array"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'def button_array(buttons: List[ButtonDict],\n                 custom_container_class="",\n                 custom_link_class="") -> str\n'})}),"\n",(0,t.jsx)(n.p,{children:"Create a grid of da-buttons from a dictionary of links and icons"}),"\n",(0,t.jsxs)(n.p,{children:["This uses the same CSS classes to mimic the look and feel of Docassemble's ",(0,t.jsx)(n.code,{children:"buttons"})," field type, but\ndoesn't have the limits of that particular input method. This is meant to appear\non any page of an interview in the ",(0,t.jsx)(n.code,{children:"subquestion"})," area."]}),"\n",(0,t.jsx)(n.p,{children:"Optionally, you can limit access to paricular buttons by specifying a privilege or a list\nof privileges."}),"\n",(0,t.jsx)(n.h4,{id:"arguments-13",children:"Arguments"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"buttons"})," ",(0,t.jsx)(n.em,{children:"List[ButtonDict]"})," - A list of ButtonDicts (or plain dictionaries)\nwith the following keys:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"name"}),": the text to display on the button"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"image"}),": the name of a fontawesome icon to display on the button"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"url"}),": the name of the page to link to"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"privilege"}),": optional, the name of a Docassemble privilege that the\nuser must have to see the button. Can be a list or a single string."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"custom_container_class"})," ",(0,t.jsx)(n.em,{children:"str, optional"}),' - Additional CSS classes to add to\nthe container div. Defaults to "".']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"custom_link_class"})," ",(0,t.jsx)(n.em,{children:"str, optional"}),' - Additional CSS classes to add to each\nlink. Defaults to "".']}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"returns-13",children:"Returns"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"str"})," - HTML for a grid of buttons that mimics Docassemble's button field type."]}),"\n"]}),"\n",(0,t.jsx)("a",{id:"ALToolbox.misc.none_to_empty"}),"\n",(0,t.jsx)(n.h3,{id:"none_to_empty",children:"none_to_empty"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def none_to_empty(val: Any) -> Any\n"})}),"\n",(0,t.jsx)(n.p,{children:'If the value is None or "None", return a DAEmpty value. Otherwise return the value.'}),"\n",(0,t.jsx)(n.p,{children:"This is useful for filling in a template and to prevent the word None from appearing in the output. For example,\nwhen handling a radio button that is not required and left unanswered."}),"\n",(0,t.jsx)(n.p,{children:"A DAEmpty value appears as an empty string in the output. You can also safely transform it or use any method on it\nwithout raising an error."}),"\n",(0,t.jsx)(n.h4,{id:"arguments-14",children:"Arguments"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"val"})," - the value to check"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"returns-14",children:"Returns"}),"\n",(0,t.jsx)(n.p,{children:"a DAEmpty if the value is None, otherwise the value"}),"\n",(0,t.jsx)("a",{id:"ALToolbox.misc.option_or_other"}),"\n",(0,t.jsx)(n.h3,{id:"option_or_other",children:"option_or_other"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def option_or_other(variable_name: str,\n                    other_variable_name: Optional[str] = None) -> str\n"})}),"\n",(0,t.jsx)(n.p,{children:"If the variable is set to 'Other', return the value of the 'other' variable. Otherwise return the value of the variable."}),"\n",(0,t.jsx)(n.p,{children:"This is useful for filling in a template and to prevent the word 'Other' from appearing in the output."}),"\n",(0,t.jsx)(n.h4,{id:"arguments-15",children:"Arguments"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"variable_name"})," - the name of the variable to check"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"other_variable_name"})," - the name of the variable to return if the value of the first variable is 'Other'"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"returns-15",children:"Returns"}),"\n",(0,t.jsx)(n.p,{children:"the value of the variable if it is not 'Other', otherwise the value of the other variable"}),"\n",(0,t.jsx)("a",{id:"ALToolbox.misc.true_values_with_other"}),"\n",(0,t.jsx)(n.h3,{id:"true_values_with_other",children:"true_values_with_other"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def true_values_with_other(\n        variable_name: str,\n        other_variable_name: Optional[str] = None) -> List[str]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Return a list of values that are True, with the value of the 'other' variable appended to the end of the list."}),"\n",(0,t.jsx)(n.p,{children:"This is useful for filling in a template and to prevent the word 'Other' from appearing in the output."}),"\n",(0,t.jsx)(n.h4,{id:"arguments-16",children:"Arguments"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"variable_name"})," ",(0,t.jsx)(n.em,{children:"str"})," - The dictionary of variables to check."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"other_variable_name"})," ",(0,t.jsx)(n.em,{children:"Optional[str], optional"})," - The name of the variable\n(as a string) to return if the value of the first variable is 'Other'.\nDefaults to None (uses variable_name + \"_other\")."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"returns-16",children:"Returns"}),"\n",(0,t.jsx)(n.p,{children:"A list of values that are True, with the value of the 'other'\nvariable appended to the end of the list if 'other'/'Other' was selected."}),"\n",(0,t.jsx)("a",{id:"ALToolbox.misc.include_a_year"}),"\n",(0,t.jsx)(n.h3,{id:"include_a_year",children:"include_a_year"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def include_a_year(text: str, field: Optional[str] = None) -> bool\n"})}),"\n",(0,t.jsx)(n.p,{children:"Validates whether the input text contains at least one 4-digit year."}),"\n",(0,t.jsx)(n.p,{children:'Validates whether the input text contains at least one 4-digit sequence\nthat occurs within a range of ~ 200 years (1800-2199), indicating a valid\n"year" for an event that should be reported on most court forms, like a\nbirthdate or a moving date.'}),"\n",(0,t.jsx)(n.h4,{id:"arguments-17",children:"Arguments"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"text"})," ",(0,t.jsx)(n.em,{children:"str"})," - The text to search for a year pattern."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"field"})," ",(0,t.jsx)(n.em,{children:"Optional[str], optional"})," - The field name to use in validation\nerror messages. Defaults to None."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"returns-17",children:"Returns"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"bool"})," - True if a valid year is found, otherwise raises a DAValidationError."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"raises",children:"Raises"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"DAValidationError"})," - If no valid year pattern is found in the text."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,t.jsx)(n.p,{children:'>>> include_a_year("Born in 1985")\nTrue\n>>> include_a_year("Born long ago")  # raises DAValidationError'}),"\n",(0,t.jsx)("a",{id:"ALToolbox.misc.is_leap_year"}),"\n",(0,t.jsx)(n.h3,{id:"is_leap_year",children:"is_leap_year"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def is_leap_year(year: int) -> bool\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Helper function for ",(0,t.jsx)(n.code,{children:"age_in_years"})," to determine if a year is a leap year."]}),"\n",(0,t.jsx)(n.h4,{id:"arguments-18",children:"Arguments"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"year"})," - The year to check."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"returns-18",children:"Returns"}),"\n",(0,t.jsx)(n.p,{children:"True if the year is a leap year, False otherwise."}),"\n",(0,t.jsx)("a",{id:"ALToolbox.misc.age_in_years"}),"\n",(0,t.jsx)(n.h3,{id:"age_in_years",children:"age_in_years"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def age_in_years(the_date: Union[str, DADateTime]) -> int\n"})}),"\n",(0,t.jsx)(n.p,{children:"Calculate the age in years from a date (treated like a date of birth)."}),"\n",(0,t.jsx)(n.h4,{id:"arguments-19",children:"Arguments"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"the_date"})," - A string or DADateTime object representing the date of birth."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"returns-19",children:"Returns"}),"\n",(0,t.jsx)(n.p,{children:"The age in years as an integer."}),"\n",(0,t.jsx)("a",{id:"ALToolbox.misc.format_date_if_defined"}),"\n",(0,t.jsx)(n.h3,{id:"format_date_if_defined",children:"format_date_if_defined"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'def format_date_if_defined(date_object_name: str,\n                           *pargs,\n                           default: str = "",\n                           **kwargs) -> str\n'})}),"\n",(0,t.jsx)(n.p,{children:"Format a date string if it is defined, otherwise return an empty string."}),"\n",(0,t.jsxs)(n.p,{children:["Passes all additional arguments to the ",(0,t.jsx)(n.code,{children:"format_date"})," function."]}),"\n",(0,t.jsx)(n.h4,{id:"arguments-20",children:"Arguments"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"date_object_name"})," - The date string to format."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"*pargs"})," - Additional positional arguments to pass to ",(0,t.jsx)(n.code,{children:"format_date"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"default"})," - A default string to return if ",(0,t.jsx)(n.code,{children:"date_object_name"})," is not defined."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"**kwargs"})," - Additional keyword arguments to pass to ",(0,t.jsx)(n.code,{children:"format_date"}),'. E.g., format="yyyy-MM-dd"']}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"returns-20",children:"Returns"}),"\n",(0,t.jsxs)(n.p,{children:["A formatted date string if ",(0,t.jsx)(n.code,{children:"date_object_name"})," is defined, otherwise an empty string."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,t.jsx)(n.p,{children:">>> format_date_if_defined(\"users[0].birthdate\", format='yyyy-MM-dd')"}),"\n",(0,t.jsx)(n.p,{children:'Returns a formatted date string if "users[0].birthdate" is defined, otherwise returns an empty string.'}),"\n",(0,t.jsx)(n.p,{children:'>>> format_date_if_defined("users[0].birthdate", default="No date provided", format=\'yyyy-MM-dd \')'}),"\n",(0,t.jsx)(n.p,{children:'Returns a formatted date string followed by one space if "users[0].birthdate" is defined, otherwise returns "No date provided". (Note space is added to the format="..." parameter)'})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>o});var i=s(6540);const t={},r=i.createContext(t);function l(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);