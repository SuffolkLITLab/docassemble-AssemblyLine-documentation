"use strict";(self.webpackChunkdocassemble_assembly_line_documentation=self.webpackChunkdocassemble_assembly_line_documentation||[]).push([[6200],{461:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>r});const i=JSON.parse('{"id":"components/ALToolbox/Addup","title":"ALToolbox.Addup","description":"* ALToolbox.Addup","source":"@site/docs/components/ALToolbox/Addup.md","sourceDirName":"components/ALToolbox","slug":"/components/ALToolbox/Addup","permalink":"/docs/components/ALToolbox/Addup","draft":false,"unlisted":false,"editUrl":"https://github.com/SuffolkLITLab/docassemble-AssemblyLine-documentation/edit/main/docs/components/ALToolbox/Addup.md","tags":[],"version":"current","frontMatter":{}}');var l=s(4848),d=s(8453);const o={},t="ALToolbox.Addup",c={},r=[{value:"Addup Objects",id:"addup-objects",level:2},{value:"__init__",id:"__init__",level:3},{value:"Arguments",id:"arguments",level:4},{value:"g",id:"g",level:3},{value:"Arguments",id:"arguments-1",level:4},{value:"Returns",id:"returns",level:4},{value:"Raises",id:"raises",level:4}];function a(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,d.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"altoolboxaddup",children:"ALToolbox.Addup"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"#ALToolbox.Addup",children:"ALToolbox.Addup"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"#ALToolbox.Addup.Addup",children:"Addup"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#ALToolbox.Addup.Addup.__init__",children:"__init__"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#ALToolbox.Addup.Addup.g",children:"g"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)("a",{id:"ALToolbox.Addup.Addup"}),"\n",(0,l.jsx)(n.h2,{id:"addup-objects",children:"Addup Objects"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"class Addup()\n"})}),"\n",(0,l.jsx)(n.p,{children:"Utility class for calculating sums of numeric fields across DAList objects."}),"\n",(0,l.jsx)(n.p,{children:"This class provides functionality to sum specific numeric fields from all\nitems in a Docassemble DAList, which is useful for financial calculations\nand data aggregation in legal document automation."}),"\n",(0,l.jsx)("a",{id:"ALToolbox.Addup.Addup.__init__"}),"\n",(0,l.jsx)(n.h3,{id:"__init__",children:"__init__"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"def __init__(listName, varName)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Initialize the Addup calculator and compute the sum immediately."}),"\n",(0,l.jsx)(n.h4,{id:"arguments",children:"Arguments"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"self"})," - The instance being initialized."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"listName"})," - A DAList object containing items with numeric fields."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"varName"})," ",(0,l.jsx)(n.em,{children:"str"})," - The name of the field to sum across all list items."]}),"\n"]}),"\n",(0,l.jsx)("a",{id:"ALToolbox.Addup.Addup.g"}),"\n",(0,l.jsx)(n.h3,{id:"g",children:"g"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"def g(listName, varName) -> float\n"})}),"\n",(0,l.jsx)(n.p,{children:"Calculate the sum of a specific numeric field across all items in a DAList."}),"\n",(0,l.jsx)(n.p,{children:"Iterates through each item in the provided DAList, extracts the specified\nfield value, and adds all values together. Raises an error if the sum is 0,\nwhich indicates the field was not found or contained no numeric values."}),"\n",(0,l.jsx)(n.h4,{id:"arguments-1",children:"Arguments"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"listName"})," - A DAList object containing items with numeric fields."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"varName"})," ",(0,l.jsx)(n.em,{children:"str"})," - The name of the field to sum across all list items."]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"returns",children:"Returns"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"float"})," - The sum of all values for the specified field."]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"raises",children:"Raises"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"DAValidationError"})," - If the sum is 0, indicating the field was not found\nor contained no numeric values."]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,l.jsx)(n.p,{children:'>>> addup = Addup(income_list, "monthly_amount")\n>>> # Returns sum of monthly_amount fields from all items in income_list'})]})}function u(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(a,{...e})}):a(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>t});var i=s(6540);const l={},d=i.createContext(l);function o(e){const n=i.useContext(d);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:o(e.components),i.createElement(d.Provider,{value:n},e.children)}}}]);