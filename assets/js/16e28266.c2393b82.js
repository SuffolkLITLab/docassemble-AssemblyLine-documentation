"use strict";(self.webpackChunkdocassemble_assembly_line_documentation=self.webpackChunkdocassemble_assembly_line_documentation||[]).push([[6756],{4137:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},_=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(n),_=o,f=d["".concat(s,".").concat(_)]||d[_]||p[_]||r;return n?a.createElement(f,l(l({ref:t},u),{},{components:n})):a.createElement(f,l({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,l=new Array(r);l[0]=_;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:o,l[1]=i;for(var c=2;c<r;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}_.displayName="MDXCreateElement"},9034:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var a=n(7462),o=(n(7294),n(4137));const r={sidebar_label:"interview_logic",title:"EFSPIntegration.interview_logic"},l=void 0,i={unversionedId:"reference/EFSPIntegration/interview_logic",id:"reference/EFSPIntegration/interview_logic",title:"EFSPIntegration.interview_logic",description:"A group of methods that were code blocks in various parts of the EFSP",source:"@site/docs/reference/EFSPIntegration/interview_logic.md",sourceDirName:"reference/EFSPIntegration",slug:"/reference/EFSPIntegration/interview_logic",permalink:"/docassemble-AssemblyLine-documentation/docs/reference/EFSPIntegration/interview_logic",draft:!1,editUrl:"https://github.com/SuffolkLITLab/docassemble-AssemblyLine-documentation/edit/main/docs/reference/EFSPIntegration/interview_logic.md",tags:[],version:"current",frontMatter:{sidebar_label:"interview_logic",title:"EFSPIntegration.interview_logic"},sidebar:"api",previous:{title:"efm_client",permalink:"/docassemble-AssemblyLine-documentation/docs/reference/EFSPIntegration/efm_client"},next:{title:"py_efsp_client",permalink:"/docassemble-AssemblyLine-documentation/docs/reference/EFSPIntegration/py_efsp_client"}},s={},c=[{value:"EFCaseSearch Objects",id:"efcasesearch-objects",level:2},{value:"search_went_wrong",id:"search_went_wrong",level:4},{value:"get_lookup_choices",id:"get_lookup_choices",level:4},{value:"num_case_choices",id:"num_case_choices",level:4},{value:"search_case_by_name",id:"search_case_by_name",level:4},{value:"shift_case_select_window",id:"shift_case_select_window",level:4},{value:"get_full_court_info",id:"get_full_court_info",level:4},{value:"get_max_allowed_sizes",id:"get_max_allowed_sizes",level:4},{value:"make_filter",id:"make_filter",level:4},{value:"filter_codes",id:"filter_codes",level:4},{value:"get_available_efile_courts",id:"get_available_efile_courts",level:4}],u={toc:c};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"A group of methods that were code blocks in various parts of the EFSP\npackage, but for better python tooling support, were moved here."),(0,o.kt)("h2",{id:"efcasesearch-objects"},"EFCaseSearch Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class EFCaseSearch(DAObject)\n")),(0,o.kt)("p",null,"A data-class that has holds all of the information and state for a single case search"),(0,o.kt)("h4",{id:"search_went_wrong"},"search","_","went","_","wrong"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def search_went_wrong() -> bool\n")),(0,o.kt)("p",null,"Returns true if something errored during the case search process"),(0,o.kt)("h4",{id:"get_lookup_choices"},"get","_","lookup","_","choices"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def get_lookup_choices(\n        can_file_non_indexed_case: bool) -> List[Dict[str, str]]\n")),(0,o.kt)("p",null,"Returns the DA choice list of what ways you are allowed to search for a case;\nBy default, this is ",'"',"party_search",'"',", and ",'"',"docket_lookup",'"',", and depending on the\ncourt, it could also include ",'"',"non_indexed_case",'"',"."),(0,o.kt)("p",null,"Not passed as direct arguments, but the object attributes ",(0,o.kt)("inlineCode",{parentName:"p"},"party_search_choice"),",\n",(0,o.kt)("inlineCode",{parentName:"p"},"docket_lookup_choice"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"non_indexed_choice")," are the user-facing labels\nfor each choice."),(0,o.kt)("h4",{id:"num_case_choices"},"num","_","case","_","choices"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def num_case_choices() -> int\n")),(0,o.kt)("p",null,"The number of cases that someone should have to choose between if there are too many.\nMostly to limit the amount of up-front waiting someone will have to do."),(0,o.kt)("h4",{id:"search_case_by_name"},"search","_","case","_","by","_","name"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def search_case_by_name(*,\n                        proxy_conn,\n                        var_name: str = None,\n                        court_id: str,\n                        somebody,\n                        filter_fn: Callable[[Any], bool],\n                        roles=None) -> Tuple[bool, DAList]\n")),(0,o.kt)("p",null,"Searches for cases by party name. If there are more than 10 cases found, we don","'","t\nadd all of the detailed information about the case, just for the first few cases"),(0,o.kt)("h4",{id:"shift_case_select_window"},"shift","_","case","_","select","_","window"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def shift_case_select_window(proxy_conn,\n                             found_cases: DAList,\n                             *,\n                             direction: str,\n                             start_idx: int,\n                             end_idx: int,\n                             roles: dict = None) -> Tuple[int, int]\n")),(0,o.kt)("p",null,"Specifically used in case_search.yml, with an action to only fetch a detailed information\nfor a few cases at a time"),(0,o.kt)("h4",{id:"get_full_court_info"},"get","_","full","_","court","_","info"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def get_full_court_info(proxy_conn, court_id: str) -> Dict\n")),(0,o.kt)("p",null,"Gets all of the information about the court from the id"),(0,o.kt)("h4",{id:"get_max_allowed_sizes"},"get","_","max","_","allowed","_","sizes"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def get_max_allowed_sizes(proxy_conn,\n                          court_id: str) -> Optional[Tuple[int, int]]\n")),(0,o.kt)("p",null,"Returns attachment max size, then message max size"),(0,o.kt)("h4",{id:"make_filter"},"make","_","filter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def make_filter(\n    search: Union[Callable[..., bool], SearchType,\n                  None]) -> Callable[..., bool]\n")),(0,o.kt)("p",null,"Makes a ","'","filter","'"," function from some simple type."),(0,o.kt)("p",null,"Necessary because docassemble doesn","'","t store lambdas and functions well in\ninterview dicts, so the filters need to be set as primitive types and kept\nthat way until the search actually happens (in filter_codes)."),(0,o.kt)("h4",{id:"filter_codes"},"filter","_","codes"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def filter_codes(\n    options: Iterable,\n    filters: Iterable[Union[Callable[..., bool], SearchType]],\n    default: str,\n    exclude: Union[Callable[..., bool], SearchType, None] = None\n) -> Tuple[List[Any], Optional[str]]\n")),(0,o.kt)("p",null,"Given a list of filter functions from most specific to least specific,\n(if true, use that code), filters a total list of codes. If any codes match the exclude filter, won","'","t use them."),(0,o.kt)("h4",{id:"get_available_efile_courts"},"get","_","available","_","efile","_","courts"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def get_available_efile_courts(proxy_conn) -> list\n")),(0,o.kt)("p",null,"Gets the list of efilable courts, if it can"))}d.isMDXComponent=!0}}]);