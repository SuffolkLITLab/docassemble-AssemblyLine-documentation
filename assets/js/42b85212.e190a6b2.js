"use strict";(self.webpackChunkdocassemble_assembly_line_documentation=self.webpackChunkdocassemble_assembly_line_documentation||[]).push([[9338],{4137:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var l=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,l,a=function(e,t){if(null==e)return{};var n,l,a={},i=Object.keys(e);for(l=0;l<i.length;l++)n=i[l],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(l=0;l<i.length;l++)n=i[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=l.createContext({}),d=function(e){var t=l.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=d(e.components);return l.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},c=l.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),c=d(n),m=a,f=c["".concat(s,".").concat(m)]||c[m]||p[m]||i;return n?l.createElement(f,o(o({ref:t},u),{},{components:n})):l.createElement(f,o({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=c;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r.mdxType="string"==typeof e?e:a,o[1]=r;for(var d=2;d<i;d++)o[d]=n[d];return l.createElement.apply(null,o)}return l.createElement.apply(null,n)}c.displayName="MDXCreateElement"},1108:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return r},metadata:function(){return d},toc:function(){return p}});var l=n(7462),a=n(3366),i=(n(7294),n(4137)),o=["components"],r={sidebar_label:"al_document",title:"al_document"},s=void 0,d={unversionedId:"reference/al_document",id:"reference/al_document",title:"al_document",description:"html\\safe\\str",source:"@site/docs/reference/al_document.md",sourceDirName:"reference",slug:"/reference/al_document",permalink:"/docassemble-AssemblyLine-documentation/docs/reference/al_document",draft:!1,editUrl:"https://github.com/SuffolkLITLab/docassemble-AssemblyLine-documentation/edit/main/docs/reference/al_document.md",tags:[],version:"current",frontMatter:{sidebar_label:"al_document",title:"al_document"},sidebar:"someSidebar",previous:{title:"example_google",permalink:"/docassemble-AssemblyLine-documentation/docs/reference/example_google"}},u={},p=[{value:"html_safe_str",id:"html_safe_str",level:4},{value:"table_row",id:"table_row",level:4},{value:"ALAddendumField Objects",id:"aladdendumfield-objects",level:2},{value:"overflow_value",id:"overflow_value",level:4},{value:"max_lines",id:"max_lines",level:4},{value:"value",id:"value",level:4},{value:"safe_value",id:"safe_value",level:4},{value:"value_if_defined",id:"value_if_defined",level:4},{value:"columns",id:"columns",level:4},{value:"type",id:"type",level:4},{value:"is_list",id:"is_list",level:4},{value:"is_object_list",id:"is_object_list",level:4},{value:"overflow_markdown",id:"overflow_markdown",level:4},{value:"overflow_docx",id:"overflow_docx",level:4},{value:"ALAddendumFieldDict Objects",id:"aladdendumfielddict-objects",level:2},{value:"initializeObject",id:"initializeobject",level:4},{value:"defined_fields",id:"defined_fields",level:4},{value:"has_overflow",id:"has_overflow",level:4},{value:"DALazyAttribute Objects",id:"dalazyattribute-objects",level:2},{value:"ALDocument Objects",id:"aldocument-objects",level:2},{value:"as_docx",id:"as_docx",level:4},{value:"as_list",id:"as_list",level:4},{value:"safe_value",id:"safe_value-1",level:4},{value:"overflow_value",id:"overflow_value-1",level:4},{value:"ALStaticDocument Objects",id:"alstaticdocument-objects",level:2},{value:"as_docx",id:"as_docx-1",level:4},{value:"ALDocumentBundle Objects",id:"aldocumentbundle-objects",level:2},{value:"as_pdf",id:"as_pdf",level:4},{value:"as_zip",id:"as_zip",level:4},{value:"enabled_documents",id:"enabled_documents",level:4},{value:"as_flat_list",id:"as_flat_list",level:4},{value:"get_titles",id:"get_titles",level:4},{value:"as_pdf_list",id:"as_pdf_list",level:4},{value:"as_docx_list",id:"as_docx_list",level:4},{value:"as_editable_list",id:"as_editable_list",level:4},{value:"download_list_html",id:"download_list_html",level:4},{value:"download_html",id:"download_html",level:4},{value:"send_button_html",id:"send_button_html",level:4},{value:"send_email",id:"send_email",level:4}],c={toc:p};function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,l.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"html_safe_str"},"html","_","safe","_","str"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def html_safe_str(the_string: str) -> str\n")),(0,i.kt)("p",null,"Return a string that can be used as an html class or id"),(0,i.kt)("h4",{id:"table_row"},"table","_","row"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def table_row(title: str, button_htmls: List[str] = []) -> str\n")),(0,i.kt)("p",null,"Uses the provided title and list of button html strings to\nreturn the row of an AL document-styled table in HTML format."),(0,i.kt)("h2",{id:"aladdendumfield-objects"},"ALAddendumField Objects"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class ALAddendumField(DAObject)\n")),(0,i.kt)("p",null,"Object representing a single field and its attributes as related to whether\nit should be displayed in an addendum. Useful for PDF templates."),(0,i.kt)("p",null,"The items can be strings or lists/list-like objects. It does not know\nhow to handle overflow for a dictionary, e.g."),(0,i.kt)("p",null,"Required attributes:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"field_name (str): represents the name of a docassemble variable"),(0,i.kt)("li",{parentName:"ul"},"overflow_trigger (int | bool): determines when text is cut off and sent to addendum")),(0,i.kt)("p",null,"Optional/planned (not implemented yet):"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"headers-",">","dict(attribute: display label for table)"),(0,i.kt)("li",{parentName:"ul"},"field_style-",">",'"',"list",'"',"|",'"',"table",'"',"|",'"',"string",'"'," (optional: defaults to ",'"',"string",'"',")")),(0,i.kt)("h4",{id:"overflow_value"},"overflow","_","value"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def overflow_value(preserve_newlines: bool = False,\n                   input_width: int = 80,\n                   overflow_message: str = "")\n')),(0,i.kt)("p",null,"Try to return just the portion of the variable (list-like object or string)\nthat is not contained in the safe_value()."),(0,i.kt)("h4",{id:"max_lines"},"max","_","lines"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def max_lines(input_width: int = 80, overflow_message_length=0) -> int\n")),(0,i.kt)("p",null,"Estimate the number of rows in the field in the output document."),(0,i.kt)("h4",{id:"value"},"value"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def value() -> Any\n")),(0,i.kt)("p",null,"Return the full value, disregarding overflow. Could be useful in addendum\nif you want to show the whole value without making user flip back/forth between multiple\npages."),(0,i.kt)("h4",{id:"safe_value"},"safe","_","value"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def safe_value(overflow_message: str = "",\n               input_width: int = 80,\n               preserve_newlines: bool = False,\n               _original_value=None)\n')),(0,i.kt)("p",null,"Try to return just the portion of the variable\nthat is ",(0,i.kt)("em",{parentName:"p"},"shorter than")," the overflow trigger. Otherwise, return empty string."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"overflow_message")," ",(0,i.kt)("em",{parentName:"li"},"str")," - A short message to go on the page where text is cutoff."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"input_width")," ",(0,i.kt)("em",{parentName:"li"},"int")," - The width, in characters, of the input box. Defaults to 80."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"preserve_newlines")," ",(0,i.kt)("em",{parentName:"li"},"bool")," - Determines whether newlines are preserved in the ",'"',"safe",'"'," text.\nDefaults to False, which means all newlines are removed. This allows more text to appear\nbefore being sent to the addendum."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"_original_value")," ",(0,i.kt)("em",{parentName:"li"},"Any")," - for speed reasons, you can provide the full text and just use this\nmethod to determine if the overflow trigger is exceeded. If no _original_value is\nprovided, this method will determine it using the value_if_defined() method.")),(0,i.kt)("h4",{id:"value_if_defined"},"value","_","if","_","defined"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def value_if_defined() -> Any\n")),(0,i.kt)("p",null,"Return the value of the field if it is defined, otherwise return an empty string.\nAddendum should never trigger docassemble","'","s variable gathering."),(0,i.kt)("h4",{id:"columns"},"columns"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def columns(skip_empty_attributes: bool = True,\n            skip_attributes: set = {"complete"}) -> Optional[list]\n')),(0,i.kt)("p",null,"Return a list of the columns in this object."),(0,i.kt)("p",null,"By default, skip empty attributes and the ",(0,i.kt)("inlineCode",{parentName:"p"},"complete")," attribute."),(0,i.kt)("h4",{id:"type"},"type"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def type() -> str\n")),(0,i.kt)("p",null,"list | object_list | other"),(0,i.kt)("h4",{id:"is_list"},"is","_","list"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def is_list() -> bool\n")),(0,i.kt)("p",null,"Identify whether the field is a list, whether of objects/dictionaries or just plain variables."),(0,i.kt)("h4",{id:"is_object_list"},"is","_","object","_","list"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def is_object_list() -> bool\n")),(0,i.kt)("p",null,"Identify whether the field represents a list of either dictionaries or objects."),(0,i.kt)("h4",{id:"overflow_markdown"},"overflow","_","markdown"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def overflow_markdown() -> str\n")),(0,i.kt)("p",null,"Return a formatted markdown table or bulleted list representing the values in the list."),(0,i.kt)("p",null,"This method does not give you any control over the output other than labels of columns,\nbut you also do not need to use this output if you want to independently control the format\nof the table."),(0,i.kt)("h4",{id:"overflow_docx"},"overflow","_","docx"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def overflow_docx(\n    path: str = "docassemble.ALDocumentDict:data/templates/addendum_table.docx"\n)\n')),(0,i.kt)("p",null,"Light wrapper around insert_docx_template() that inserts a formatted table into a docx\nfile. If the object in the list is a plain string/int, it returns a bulleted list."),(0,i.kt)("p",null,"Using this method will not give you any control at all over the formatting, but you can directly\ncall field.overflow_value() instead of using this method."),(0,i.kt)("h2",{id:"aladdendumfielddict-objects"},"ALAddendumFieldDict Objects"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class ALAddendumFieldDict(DAOrderedDict)\n")),(0,i.kt)("p",null,"Object representing a list of fields in your output document, together\nwith the character limit for each field."),(0,i.kt)("p",null,"Provides convenient methods to determine if an addendum is needed and to\ncontrol the display of fields so the appropriate text (overflow or safe amount)\nis displayed in each context."),(0,i.kt)("p",null,"Adding a new entry will implicitly set the ",(0,i.kt)("inlineCode",{parentName:"p"},"field_name")," attribute of the field."),(0,i.kt)("p",null,"optional:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"style: if set to ",'"',"overflow_only",'"'," will only display the overflow text")),(0,i.kt)("h4",{id:"initializeobject"},"initializeObject"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def initializeObject(*pargs, **kwargs)\n")),(0,i.kt)("p",null,"When we create a new entry implicitly, make sure we also set the .field_name\nattribute to the key name so it knows its own field_name."),(0,i.kt)("h4",{id:"defined_fields"},"defined","_","fields"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def defined_fields(style="overflow_only")\n')),(0,i.kt)("p",null,"Return a filtered list of just the defined fields.\nIf the ",'"',"style",'"'," is set to overflow_only, only return the overflow values."),(0,i.kt)("h4",{id:"has_overflow"},"has","_","overflow"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def has_overflow() -> bool\n")),(0,i.kt)("p",null,"Returns True if any defined field","'","s length exceeds the overflow trigger."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returns"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bool")," - True if at least 1 field has ",'"',"overflow",'"'," content, False otherwise.")),(0,i.kt)("h2",{id:"dalazyattribute-objects"},"DALazyAttribute Objects"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class DALazyAttribute(DAObject)\n")),(0,i.kt)("p",null,"A DAObject with attributes that are reconsidered on every page load. Useful for\ncaching information on a per-page load basis."),(0,i.kt)("p",null,"Takes advantage of the way that objects are pickled in Docassemble by overriding the\n",(0,i.kt)("strong",{parentName:"p"},"getstate")," method Pickle uses."),(0,i.kt)("h2",{id:"aldocument-objects"},"ALDocument Objects"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class ALDocument(DADict)\n")),(0,i.kt)("p",null,"A dictionary of attachments, either created by a DAFile or an attachment\nblock. Typically there are three:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"The final version of a document with a signature. E.g., my_doc","['","final","']","."),(0,i.kt)("li",{parentName:"ol"},"The preview version of a document with no signature. E.g.,\nmy_doc","['","preview","']","."),(0,i.kt)("li",{parentName:"ol"},"An addendum of a document contained in the attribute ",(0,i.kt)("inlineCode",{parentName:"li"},"addendum"),". E.g.\n",(0,i.kt)("inlineCode",{parentName:"li"},"my_doc.addendum"),".")),(0,i.kt)("p",null,"There is no limit to the number of keys, but the ALDocumentBundle class\nexpects at least a ",'"',"final",'"'," key to exist, and the ",(0,i.kt)("inlineCode",{parentName:"p"},"addendum")," attribute is\nrequired if you desire to use PDF documents with text overflow. It is best\npractice to use exactly the two keys ",'"',"final",'"'," and ",'"',"preview",'"'," and the attribute\n",'"',"addendum",'"',". The ",'"',"final",'"'," and ",'"',"preview",'"'," documents will normally be the same\ntemplate, but with logic controlling the display of a particular section, such\nas the signature."),(0,i.kt)("p",null,"Each form that an interview generates should get its own ALDocument object."),(0,i.kt)("p",null,"The ",'"',"addendum",'"'," attribute can be handled in a generic object block. Multiple\ndocuments can use the same addendum template, with just the case caption\nvarying."),(0,i.kt)("p",null,"ALDocuments are designed to be used contingently as part of ALDocumentBundle\nobjects. Each ALDocument is considered to be ",'"',"enabled",'"'," or ",'"',"disabled",'"'," for a\nparticular interview user","'","s session. This allows you to always work with a\nsingle object representing all of the possible documents an interview can\ngenerate, and use encapsulated logic to trigger individual documents inclusion\non the final download screen."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Attributes"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"filename")," ",(0,i.kt)("em",{parentName:"li"},"str")," - name used for output PDF"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"title")," ",(0,i.kt)("em",{parentName:"li"},"str")," - display name for the output PDF"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"enabled")," ",(0,i.kt)("em",{parentName:"li"},"bool")," - if this document should be created. See examples."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"addendum")," ",(0,i.kt)("em",{parentName:"li"},"DAFile | DAFileCollection")," - (optional) an attachment block"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"overflow_fields")," ",(0,i.kt)("em",{parentName:"li"},"ALAddendumField")," - (optional) ALAddendumFieldDict\ninstance. These values will be used to detect and handle overflow."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"has_addendum")," ",(0,i.kt)("em",{parentName:"li"},"bool")," - (optional) Defaults to False. Set to True if the\ndocument could have overflow, like for a PDF template.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Notes"),":"),(0,i.kt)("p",null,"  The ",(0,i.kt)("inlineCode",{parentName:"p"},"enabled")," attribute should always be defined by a code block or the\nobjects block, because by default it is considered fresh on each page\nload. If your interview logic requires that you directly ask the user\nwhether or not to include a document, you can use a single intermediate\nvariable that is posed to the interview user to work around this\nlimitation."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"Examples")," - # TODO: the code blocks aren","'","t working right yet on the Docusaurus page."),(0,i.kt)("h2",{parentName:"li",id:"simple-use-where-the-document-is-always-enabled-and-will-have-no-addendum"},"Simple use where the document is always enabled and will have no addendum"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"---\nobjects:\n- my_doc: ALDocument.using(filename=&quot;myDoc.pdf&quot;, title=&quot;myDoc&quot;, enabled=True)\n---\nattachment:\nvariable name: my_doc[i]  # This same template will be used for the `preview` and `final` keys\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"content")," - |\nHere is some content"),(0,i.kt)("p",{parentName:"li"},"% if i == ","'","final","'",":\n${ users","[0]",".signature }\n% elif i == ","'","preview","'",":\n","[ Your signature here ]","\n% endif"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"\nEnable a document conditionally\n--------------------------------\n```yaml\n---\n# See that `enabled` is not defined here\nobjects:\n- affidavit_of_indigency: ALDocument.using(filename=&quot;affidavit-of-indigency.pdf&quot;, title=&quot;Affidavit of Indigency&quot;)\n---\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"code")," - |\naffidavit_of_indigency.enabled = ask_indigency_questions and is_indigent"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"\nAn example enabling with a question posed to the interview user\n----------------------------------------------------------------\nYou should always use a code block or an object block to set the &quot;enabled&quot; status;\nUse an intermediate variable if you want to ask the user directly whether or not to include a document.\n```yaml\n---\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"question")," - |\nDo you want the extra document included?")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h2",{parentName:"li",id:"yesno---include_extra_document"},(0,i.kt)("inlineCode",{parentName:"h2"},"yesno")," - include_extra_document")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"code")," - |"),(0,i.kt)("h2",{parentName:"li",id:"extra_documentenabled--include_extra_document"},"extra_document.enabled = include_extra_document"),(0,i.kt)("p",{parentName:"li"},"attachment:\nvariable name: extra_document","[i]"," # This same template will be used for ",(0,i.kt)("inlineCode",{parentName:"p"},"final")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"preview"),"\ndocx template file: extra_document.docx"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"\nFor a document that may need an addendum, you must specify this when the object is created\nor in a mandatory code block. The addendum will only be triggered if the document has &quot;overflow&quot;\nin one of the fields that you specify.\n")),(0,i.kt)("hr",{parentName:"li"}),(0,i.kt)("p",{parentName:"li"},"objects:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"my_doc: ALDocument.using(filename=",'"',"myDoc.pdf",'"',", title=",'"',"myDoc",'"',", enabled=True, has_addendum=True)")),(0,i.kt)("hr",{parentName:"li"}),(0,i.kt)("p",{parentName:"li"},"attachment:\nvariable name: my_doc","[i]"),(0,i.kt)("h2",{parentName:"li",id:""},"..."),(0,i.kt)("p",{parentName:"li"},"generic object: ALDocument\nattachment:\nvariable name: x.addendum"),(0,i.kt)("h2",{parentName:"li",id:"docx-template-file-docx_addendumdocx"},"docx template file: docx_addendum.docx")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"code")," - |\nmy_doc.overflow_fields","['","big_text_variable","']",".overflow_trigger = 640 # Characters\nmy_doc.overflow_fields","['","big_text_variable","']",".label = ",'"',"Big text label",'"'," # Optional - you may use in your addendum\nmy_doc.overflow_fields","['","list_of_objects_variable","']",".overflow_trigger = 4 # Items in the list\nmy_doc.overflow_fields.gathered = True"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"")))),(0,i.kt)("h4",{id:"as_docx"},"as","_","docx"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def as_docx(key: str = "final", refresh: bool = True) -> DAFile\n')),(0,i.kt)("p",null,"Returns the assembled document as a single DOCX file, if possible. Otherwise returns a PDF."),(0,i.kt)("h4",{id:"as_list"},"as","_","list"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def as_list(key: str = "final", refresh: bool = True) -> List[DAFile]\n')),(0,i.kt)("p",null,"Returns a list of the document and its addendum, if any.\nSpecify refresh=True if you want to generate the attachment new each time.\nThis behavior is the default."),(0,i.kt)("h4",{id:"safe_value-1"},"safe","_","value"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def safe_value(field_name: str,\n               overflow_message: str = None,\n               preserve_newlines: bool = False,\n               input_width: int = 80)\n")),(0,i.kt)("p",null,"Shortcut syntax for accessing the ",'"',"safe",'"'," (shorter than overflow trigger)\nvalue of a field that we have specified as needing an addendum."),(0,i.kt)("h4",{id:"overflow_value-1"},"overflow","_","value"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def overflow_value(field_name: str,\n                   overflow_message: str = None,\n                   preserve_newlines: bool = False,\n                   input_width: int = 80)\n")),(0,i.kt)("p",null,"Shortcut syntax for accessing the ",'"',"overflow",'"'," value (amount that exceeds overflow trigger)\nfor the given field as a string."),(0,i.kt)("p",null,"Should mirror the ",'"',"safe_value",'"'," for the same field."),(0,i.kt)("h2",{id:"alstaticdocument-objects"},"ALStaticDocument Objects"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class ALStaticDocument(DAStaticFile)\n")),(0,i.kt)("p",null,"A class that allows one-line initialization of static documents to include in an ALDocumentBundle."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Notes"),":"),(0,i.kt)("p",null,"  You should always place the static file within the /data/static folder of a package.\nALDocumentBundle relies on a publically accessible file. The /data/templates folder is private."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Attributes"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"filename(str)")," - the path to the file within /data/static/."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"title(str)")," - The title that will display as a row when invoked with ",(0,i.kt)("inlineCode",{parentName:"li"},"download_list_html()")," method\nof an ALDocumentBundle.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Examples"),":"),(0,i.kt)("p",null,"  Add a static PDF file to a document bundle.\n.. code-block:: yaml"),(0,i.kt)("hr",null),(0,i.kt)("p",null,"  objects:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h2",{parentName:"li",id:"static_test-alstaticdocumentusingtitlestatic-test-filenamestaticpdf-enabledtrue"},"static_test: ALStaticDocument.using(title=",'"',"Static Test",'"',", filename=",'"',"static.pdf",'"',", enabled=True)"),"objects:"),(0,i.kt)("li",{parentName:"ul"},"bundle: ALDocumentBundle.using(elements=","[static_test]",", filename=",'"',"bundle",'"',", title=",'"',"Documents to download now",'"',")")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Todo"),":"),(0,i.kt)("p",null,"  Handle files placed in /data/templates if that turns out to be useful. Likely by copying into\na DAFile with pdf_concatenate()."),(0,i.kt)("h4",{id:"as_docx-1"},"as","_","docx"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def as_docx(key: str = "final",\n            refresh: bool = True) -> Union[DAStaticFile, DAFile]\n')),(0,i.kt)("p",null,"Returns the assembled document as a single DOCX file, if possible. Otherwise returns a PDF."),(0,i.kt)("h2",{id:"aldocumentbundle-objects"},"ALDocumentBundle Objects"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class ALDocumentBundle(DAList)\n")),(0,i.kt)("p",null,"DAList of ALDocuments or nested ALDocumentBundles."),(0,i.kt)("p",null,"Use case: providing a list of documents in a specific order."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Cover page")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Main motion form")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Notice of Interpreter Request"),(0,i.kt)("p",{parentName:"li"},"E.g., you may bundle documents one way for the court, one way for the user, one way for the\nopposing party. ALDocuments can separately be ",'"',"enabled",'"'," or ",'"',"disabled",'"'," for a particular run, which\nwill affect their inclusion in all bundles."),(0,i.kt)("p",{parentName:"li"},"A bundle can be returned as one PDF or as a list of documents. If the list contains nested\nbundles, each nested bundle can similarly be returned as a combined PDF or a list of documents."),(0,i.kt)("p",{parentName:"li"},"required attributes:")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"filename")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"title\noptional attribute: enabled"))),(0,i.kt)("h4",{id:"as_pdf"},"as","_","pdf"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def as_pdf(key: str = "final", refresh: bool = True) -> Optional[DAFile]\n')),(0,i.kt)("p",null,"Returns the Bundle as a single PDF DAFile, or None if none of the documents are enabled."),(0,i.kt)("h4",{id:"as_zip"},"as","_","zip"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def as_zip(key: str = "final",\n           refresh: bool = True,\n           title: str = "",\n           format="pdf",\n           include_pdf=True) -> DAFile\n')),(0,i.kt)("p",null,"Returns a zip file containing the whole bundle"),(0,i.kt)("h4",{id:"enabled_documents"},"enabled","_","documents"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def enabled_documents(refresh: bool = True) -> List[Any]\n")),(0,i.kt)("p",null,"Returns the enabled documents"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"refresh(bool)")," - Controls whether the ","'","enabled","'"," attribute is reconsidered.")),(0,i.kt)("h4",{id:"as_flat_list"},"as","_","flat","_","list"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def as_flat_list(key: str = "final", refresh: bool = True) -> List[DAFile]\n')),(0,i.kt)("p",null,"Returns the nested bundle as a single flat list. This could be the preferred way to deliver forms to the\ncourt, e.g.--one file per court form/cover letter."),(0,i.kt)("h4",{id:"get_titles"},"get","_","titles"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def get_titles(key: str = "final", refresh: bool = True) -> List[str]\n')),(0,i.kt)("p",null,"Gets all of titles of the documents in a list"),(0,i.kt)("h4",{id:"as_pdf_list"},"as","_","pdf","_","list"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def as_pdf_list(key: str = "final", refresh: bool = True) -> List[DAFile]\n')),(0,i.kt)("p",null,"Returns the nested bundles as a list of PDFs that is only one level deep."),(0,i.kt)("h4",{id:"as_docx_list"},"as","_","docx","_","list"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def as_docx_list(key: str = "final", refresh: bool = True) -> List[DAFile]\n')),(0,i.kt)("p",null,"Returns the nested bundles as a list of DOCX files. If the file isn","'","t able\nto be represented as a DOCX, the original file or a PDF will be returned instead."),(0,i.kt)("h4",{id:"as_editable_list"},"as","_","editable","_","list"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def as_editable_list(key: str = "final", refresh: bool = True) -> List[DAFile]\n')),(0,i.kt)("p",null,"Return a flat list of the DOCX versions of the docs in this bundle, if they exist."),(0,i.kt)("h4",{id:"download_list_html"},"download","_","list","_","html"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def download_list_html(key: str = "final",\n                       format: str = "pdf",\n                       view: bool = True,\n                       refresh: bool = True,\n                       include_zip: bool = True,\n                       view_label="View",\n                       view_icon: str = "eye",\n                       download_label: str = "Download",\n                       download_icon: str = "download",\n                       zip_label: str = None,\n                       zip_icon: str = "file-archive") -> str\n')),(0,i.kt)("p",null,"Returns string of a table to display a list\nof pdfs with ","'","view","'"," and ","'","download","'"," buttons."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"format")," is one of:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"pdf"),(0,i.kt)("li",{parentName:"ul"},"docx"),(0,i.kt)("li",{parentName:"ul"},"original")),(0,i.kt)("h4",{id:"download_html"},"download","_","html"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def download_html(key: str = "final",\n                  format: str = "pdf",\n                  view: bool = True,\n                  refresh: bool = True,\n                  view_label: str = "View",\n                  view_icon: str = "eye",\n                  download_label: str = "Download",\n                  download_icon: str = "download") -> str\n')),(0,i.kt)("p",null,"Returns an HTML string of a table to display all the docs\ncombined into one pdf with ","'","view","'"," and ","'","download","'"," buttons."),(0,i.kt)("h4",{id:"send_button_html"},"send","_","button","_","html"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def send_button_html(key: str = "final",\n                     show_editable_checkbox: bool = True) -> str\n')),(0,i.kt)("p",null,"Generate HTML for an input box and button that allows someone to send\nthe bundle to the specified email address."),(0,i.kt)("p",null,"Optionally, display a checkbox that allows someone to decide whether or not to\ninclude an editable (Word) copy of the file, iff it is available."),(0,i.kt)("h4",{id:"send_email"},"send","_","email"))}m.isMDXComponent=!0}}]);