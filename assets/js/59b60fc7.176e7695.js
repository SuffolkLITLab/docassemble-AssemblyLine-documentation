"use strict";(self.webpackChunkdocassemble_assembly_line_documentation=self.webpackChunkdocassemble_assembly_line_documentation||[]).push([[4993],{8453:(e,n,l)=>{l.d(n,{R:()=>i,x:()=>g});var s=l(6540);const a={},t=s.createContext(a);function i(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function g(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(t.Provider,{value:n},e.children)}},9550:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>r,contentTitle:()=>g,default:()=>o,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"components/AssemblyLine/language","title":"AssemblyLine.language","description":"* AssemblyLine.language","source":"@site/docs/components/AssemblyLine/language.md","sourceDirName":"components/AssemblyLine","slug":"/components/AssemblyLine/language","permalink":"/docs/components/AssemblyLine/language","draft":false,"unlisted":false,"editUrl":"https://github.com/SuffolkLITLab/docassemble-AssemblyLine-documentation/edit/main/docs/components/AssemblyLine/language.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"AssemblyLine.al_document","permalink":"/docs/components/AssemblyLine/al_document"},"next":{"title":"AssemblyLine.sessions","permalink":"/docs/components/AssemblyLine/sessions"}}');var a=l(4848),t=l(8453);const i={},g="AssemblyLine.language",r={},d=[{value:"get_local_languages_yaml",id:"get_local_languages_yaml",level:3},{value:"Returns",id:"returns",level:4},{value:"get_tuples",id:"get_tuples",level:3},{value:"Arguments",id:"arguments",level:4},{value:"Returns",id:"returns-1",level:4},{value:"get_language_list_dropdown",id:"get_language_list_dropdown",level:3},{value:"Arguments",id:"arguments-1",level:4},{value:"Returns",id:"returns-2",level:4},{value:"get_language_list_dropdown_item",id:"get_language_list_dropdown_item",level:3},{value:"Arguments",id:"arguments-2",level:4},{value:"Returns",id:"returns-3",level:4},{value:"get_language_list",id:"get_language_list",level:3},{value:"Arguments",id:"arguments-3",level:4},{value:"Returns",id:"returns-4",level:4},{value:"get_language_list_item",id:"get_language_list_item",level:3},{value:"Arguments",id:"arguments-4",level:4},{value:"Returns",id:"returns-5",level:4}];function u(e){const n={a:"a",code:"code",h1:"h1",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"assemblylinelanguage",children:"AssemblyLine.language"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"#AssemblyLine.language",children:"AssemblyLine.language"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#AssemblyLine.language.get_local_languages_yaml",children:"get_local_languages_yaml"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#AssemblyLine.language.get_tuples",children:"get_tuples"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#AssemblyLine.language.get_language_list_dropdown",children:"get_language_list_dropdown"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#AssemblyLine.language.get_language_list_dropdown_item",children:"get_language_list_dropdown_item"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#AssemblyLine.language.get_language_list",children:"get_language_list"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#AssemblyLine.language.get_language_list_item",children:"get_language_list_item"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)("a",{id:"AssemblyLine.language.get_local_languages_yaml"}),"\n",(0,a.jsx)(n.h3,{id:"get_local_languages_yaml",children:"get_local_languages_yaml"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def get_local_languages_yaml() -> str\n"})}),"\n",(0,a.jsx)(n.p,{children:"Get the path to the local languages.yml file. If it does not exist, it will return the path to the languages.yml"}),"\n",(0,a.jsx)(n.h4,{id:"returns",children:"Returns"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"str"})," - the path to the local languages.yml file if it exists, otherwise the path to the languages.yml file"]}),"\n"]}),"\n",(0,a.jsx)("a",{id:"AssemblyLine.language.get_tuples"}),"\n",(0,a.jsx)(n.h3,{id:"get_tuples",children:"get_tuples"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def get_tuples(lang_codes: List[str],\n               languages_path: Optional[str] = None) -> List[Tuple[str, str]]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Returns a list of tuples representing the language name, followed by language ISO 639-1 code."}),"\n",(0,a.jsx)(n.p,{children:"It will use the native_name value from the languages.yml file if available, otherwise it will use the\nEnglish name from pycountry. If neither is present, it will use the language code itself."}),"\n",(0,a.jsx)(n.h4,{id:"arguments",children:"Arguments"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"lang_codes"})," - a list of ISO 639-1 language codes (e.g. ['en', 'es'])"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"languages_path"})," - the path to the languages.yml file (defaults to data/sources/languages.yml)"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"returns-1",children:"Returns"}),"\n",(0,a.jsx)(n.p,{children:"A list of tuples representing the language name, followed by language ISO 639-1 code."}),"\n",(0,a.jsx)("a",{id:"AssemblyLine.language.get_language_list_dropdown"}),"\n",(0,a.jsx)(n.h3,{id:"get_language_list_dropdown",children:"get_language_list_dropdown"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'def get_language_list_dropdown(lang_codes: List[str],\n                               current: str = "",\n                               languages_path: Optional[str] = None,\n                               event_name="al_change_language",\n                               icon="fa-solid fa-language fa-xl",\n                               extra_class: str = "text-light") -> str\n'})}),"\n",(0,a.jsx)(n.p,{children:"Get a Bootstrap 5 dropdown menu for language selection that can be added to navigation bar."}),"\n",(0,a.jsx)(n.h4,{id:"arguments-1",children:"Arguments"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"lang_codes"})," - a list of ISO 639-1 language codes (e.g. ['en', 'es'])"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"current"})," - the current language code"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"languages_path"})," - the path to the languages.yml file (defaults to data/sources/languages.yml)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"event_name"})," - the name of the event to trigger when the language is changed"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"icon"})," - the name of the icon to use for the dropdown menu (defaults to fa-solid fa-language fa-xl)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"extra_class"})," - additional classes to add to the link"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"returns-2",children:"Returns"}),"\n",(0,a.jsx)(n.p,{children:"A string containing the HTML for a dropdown menu for language selection."}),"\n",(0,a.jsx)("a",{id:"AssemblyLine.language.get_language_list_dropdown_item"}),"\n",(0,a.jsx)(n.h3,{id:"get_language_list_dropdown_item",children:"get_language_list_dropdown_item"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'def get_language_list_dropdown_item(language: Tuple[str, str],\n                                    link: bool = True,\n                                    event_name="al_change_language") -> str\n'})}),"\n",(0,a.jsx)(n.p,{children:"Given an ordered tuple, returns a link to the current interview with lang=language code and the link title\ngiven in the first part of the tuple."}),"\n",(0,a.jsx)(n.h4,{id:"arguments-2",children:"Arguments"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"language"})," - a tuple containing the language name and language code"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"link"})," - whether to return a link or just the text"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"event_name"})," - the name of the event to trigger when the language is changed"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"returns-3",children:"Returns"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"str"})," - A string containing the HTML for a dropdown menu item for language selection."]}),"\n"]}),"\n",(0,a.jsx)("a",{id:"AssemblyLine.language.get_language_list"}),"\n",(0,a.jsx)(n.h3,{id:"get_language_list",children:"get_language_list"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'def get_language_list(languages: Optional[List[Tuple[str, str]]] = None,\n                      current="",\n                      lang_codes: Optional[List[str]] = None,\n                      languages_path: Optional[str] = None,\n                      event_name="al_change_language") -> str\n'})}),"\n",(0,a.jsx)(n.p,{children:"Given a list of language codes, returns\na Bootstrap-formatted unordered inline list. The current language will not be a link."}),"\n",(0,a.jsx)(n.p,{children:"Deprecated behavior: instead of a list of language codes, you can provide list of\ntuples containing the language name and language code. This is deprecated and may be removed in a future version."}),"\n",(0,a.jsx)(n.h4,{id:"arguments-3",children:"Arguments"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"languages"})," - a list of tuples containing the language name and language code (deprecated)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"current"})," - the current language code"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"lang_codes"})," - a list of ISO 639-1 language codes (e.g. ['en', 'es'])"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"languages_path"})," - the path to the languages.yml file (defaults to data/sources/languages.yml)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"event_name"})," - the name of the event to trigger when the language is changed"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"returns-4",children:"Returns"}),"\n",(0,a.jsx)(n.p,{children:"A string containing the HTML for an unordered inline list of language selection."}),"\n",(0,a.jsx)("a",{id:"AssemblyLine.language.get_language_list_item"}),"\n",(0,a.jsx)(n.h3,{id:"get_language_list_item",children:"get_language_list_item"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'def get_language_list_item(language,\n                           link=True,\n                           event_name="al_change_language") -> str\n'})}),"\n",(0,a.jsx)(n.p,{children:"Given an ordered tuple, returns a link to the current interview with lang=language code and the link title\ngiven in the first part of the tuple."}),"\n",(0,a.jsx)(n.h4,{id:"arguments-4",children:"Arguments"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"language"})," - a tuple containing the language name and language code"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"link"})," - whether to return a link or just the text"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"event_name"})," - the name of the event to trigger when the language is changed"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"returns-5",children:"Returns"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"str"})," - A string containing the HTML for an unordered inline list item for language selection."]}),"\n"]})]})}function o(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}}}]);