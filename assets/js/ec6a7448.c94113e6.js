"use strict";(self.webpackChunkdocassemble_assembly_line_documentation=self.webpackChunkdocassemble_assembly_line_documentation||[]).push([[3705],{2077:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"components/ALToolbox/save_input_data","title":"ALToolbox.save_input_data","description":"* ALToolbox.save\\\\input\\\\data","source":"@site/docs/components/ALToolbox/save_input_data.md","sourceDirName":"components/ALToolbox","slug":"/components/ALToolbox/save_input_data","permalink":"/docs/components/ALToolbox/save_input_data","draft":false,"unlisted":false,"editUrl":"https://github.com/SuffolkLITLab/docassemble-AssemblyLine-documentation/edit/main/docs/components/ALToolbox/save_input_data.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"ALToolbox.misc","permalink":"/docs/components/ALToolbox/misc"},"next":{"title":"ALToolbox.llms","permalink":"/docs/components/ALToolbox/llms"}}');var a=n(4848),s=n(8453);const i={},l="ALToolbox.save_input_data",d={},c=[{value:"save_input_data",id:"save_input_data",level:3}];function r(e){const t={a:"a",code:"code",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"altoolboxsave_input_data",children:"ALToolbox.save_input_data"})}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.a,{href:"#ALToolbox.save_input_data",children:"ALToolbox.save_input_data"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.a,{href:"#ALToolbox.save_input_data.save_input_data",children:"save_input_data"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)("a",{id:"ALToolbox.save_input_data.save_input_data"}),"\n",(0,a.jsx)(t.h3,{id:"save_input_data",children:"save_input_data"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'def save_input_data(title: str = "",\n                    input_dict: Optional[Dict[str, Any]] = None,\n                    tags: Optional[List[str]] = None) -> None\n'})}),"\n",(0,a.jsx)(t.p,{children:"This function is used by survey type interviews to save input data for data reporting purposes."}),"\n",(0,a.jsx)(t.p,{children:"The input_dict should a dictionary where each key is a string and each value is a value from a Docassemble interview\nquestion. Typically that is a string, float, int, or a DADict."})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(r,{...e})}):r(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>l});var o=n(6540);const a={},s=o.createContext(a);function i(e){const t=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),o.createElement(s.Provider,{value:t},e.children)}}}]);