"use strict";(self.webpackChunkdocassemble_assembly_line_documentation=self.webpackChunkdocassemble_assembly_line_documentation||[]).push([[4217],{4137:(e,t,a)=>{a.d(t,{Zo:()=>h,kt:()=>c});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),u=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},h=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,h=o(e,["components","mdxType","originalType","parentName"]),p=u(a),m=i,c=p["".concat(s,".").concat(m)]||p[m]||d[m]||r;return a?n.createElement(c,l(l({ref:t},h),{},{components:a})):n.createElement(c,l({ref:t},h))}));function c(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,l=new Array(r);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[p]="string"==typeof e?e:i,l[1]=o;for(var u=2;u<r;u++)l[u]=a[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},4151:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>u});var n=a(7462),i=(a(7294),a(4137));const r={id:"alkiln_writing",title:"Writing ALKiln tests",sidebar_label:"WIP Writing tests",slug:"/alkiln/writing"},l=void 0,o={unversionedId:"alkiln/alkiln_writing",id:"alkiln/alkiln_writing",title:"Writing ALKiln tests",description:"WIP (Work in progress)",source:"@site/docs/alkiln/writing_tests.mdx",sourceDirName:"alkiln",slug:"/alkiln/writing",permalink:"/docassemble-AssemblyLine-documentation/docs/alkiln/writing",draft:!1,editUrl:"https://github.com/SuffolkLITLab/docassemble-AssemblyLine-documentation/edit/main/docs/alkiln/writing_tests.mdx",tags:[],version:"current",frontMatter:{id:"alkiln_writing",title:"Writing ALKiln tests",sidebar_label:"WIP Writing tests",slug:"/alkiln/writing"},sidebar:"docs",previous:{title:"WIP Setup/Installation",permalink:"/docassemble-AssemblyLine-documentation/docs/alkiln/setup"},next:{title:"WIP Troubleshooting & errors",permalink:"/docassemble-AssemblyLine-documentation/docs/alkiln/trouble"}},s={},u=[{value:"Do <em>I</em> need to read this?",id:"who",level:2},{value:"Quick refresher",id:"refresh",level:2},{value:"Writing test Steps overview",id:"steps",level:2},{value:"Interactive Steps",id:"interact",level:2},{value:"The Story Table Step",id:"story-table",level:3},{value:"<code>I set the variable &quot;&lt;variable name&gt;&quot; to &quot;&lt;value to set&gt;&quot;</code>",id:"set",level:3},{value:"Upload",id:"upload",level:3},{value:"Environment variables",id:"env-vars",level:3},{value:"Steps to start tests",id:"start",level:2},{value:"<code>I start the interview at &quot;&lt;YAML file name&gt;&quot;</code>",id:"start-interview",level:3},{value:"<code>The maximum time for a Step is &lt;number&gt; seconds</code>",id:"custom-timeout",level:3},{value:"<code>I wait for &lt;number&gt; seconds</code>",id:"wait",level:3},{value:"Setting values",id:"field-values",level:2},{value:"Text",id:"text",level:3},{value:"yesno",id:"yesno",level:3},{value:"yesnomaybe",id:"yesnomaybe",level:3},{value:"radio",id:"radio",level:3},{value:"checkboxes",id:"checkboxes",level:3},{value:"others",id:"other-values",level:3},{value:"Special values",id:"special-values",level:3},{value:"Observational Steps",id:"observe",level:2},{value:"<code>I SHOULD see the phrase &quot;&lt;page text&gt;&quot;</code>",id:"phrase",level:3},{value:"Understanding test results",id:"output",level:2},{value:"Test file anatomy",id:"files",level:2},{value:"Running tests",id:"run",level:2},{value:"Tips",id:"tips",level:2},{value:"Frequently asked questions (FAQ)",id:"faq",level:2},{value:"Do I have to set every variable in the interview?",id:"every-var",level:3}],h={toc:u};function p(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"WIP (Work in progress)")),(0,i.kt)("p",null,"This page describes your tests files and how to write tests ","  and other useful information. To see the table of contents on a small screen, tap on the dropdown menu at the top of the page. To see it on a wider screen, see the column on the right-hand side of the screen."),(0,i.kt)("h2",{id:"who"},"Do ",(0,i.kt)("em",{parentName:"h2"},"I")," need to read this?"),(0,i.kt)("p",null,"If you are writing tests "," or need to learn about test files, this page is for you."),(0,i.kt)("h2",{id:"refresh"},"Quick refresher"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"You can see ",(0,i.kt)("a",{parentName:"li",href:"/docassemble-AssemblyLine-documentation/docs/alkiln/setup#first-test"},"what your first test might look like"),"."),(0,i.kt)("li",{parentName:"ol"},"You can generate a more complex test with the help of the ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/plocket/alkiln_story"},"ALKiln Story Table Step generator"),"."),(0,i.kt)("li",{parentName:"ol"},"Every time you change or add a required variable, you must update the tests that need that variable."),(0,i.kt)("li",{parentName:"ol"},"You write and edit ",(0,i.kt)("inlineCode",{parentName:"li"},".feature")," test files in your Sources folder."),(0,i.kt)("li",{parentName:"ol"},"You can check the syntax of your test file by using an editor like the ",(0,i.kt)("a",{parentName:"li",href:"https://www.assertthat.com/online-gherkin-editor"},"editor at AssertThat"),"."),(0,i.kt)("li",{parentName:"ol"},"If you are using GitHub tests, those tests will run when anyone commits to GitHub."),(0,i.kt)("li",{parentName:"ol"},"By default, each Step or page ",(0,i.kt)("strong",{parentName:"li"},"must"),' be completed in at most 30 seconds. You can change that with the "the maximum seconds" Step listed in the Steps.'),(0,i.kt)("li",{parentName:"ol"},"ALKiln creates test reports and pictures. For example, ALKiln saves pictures and the HTML of pages that showed errors In GitHub, they are in the zip file in ",(0,i.kt)("a",{parentName:"li",href:"https://docs.github.com/en/actions/managing-workflow-runs/downloading-workflow-artifacts"},"your workflow's artifact section"),"."),(0,i.kt)("li",{parentName:"ol"},"There are some field types that ALKiln cannot yet handle, including some ",(0,i.kt)("inlineCode",{parentName:"li"},"object"),"-type fields.")),(0,i.kt)("p",null,"Here is an example of a more complex test for a quick refresher on some of our features:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-gherkin"},'@children\nFeature: I have children\n\n@fast @child_benefits\nScenario: child has benefits\n  Given I start the interview at "some_file_name.yml"\n  And I get to the question id "benefits" with this data:\n    | var | value | trigger |\n    | children.there_are_any | True |\n    | children.target_number | 2 |\n    | children[0].name.first | Cashmere |\n    | children[0].name.last | Davis |\n    | children[1].name.first | Casey |\n    | children[1].name.last | Davis |\n  When I set the var "benefits[\'SSI\']" to "True"\n  And I tap to continue\n  Then the question id should be "download"\n  And I download "some_motion.pdf"\n')),(0,i.kt)("h2",{id:"steps"},"Writing test Steps overview"),(0,i.kt)("p",null,"Most of ",(0,i.kt)("a",{parentName:"p",href:"#files"},"the code in test files")," is code for ALKiln Steps."),(0,i.kt)("p",null,"ALKiln Steps are how you give your instructions to the ALKiln robot. Steps are made of commands",(0,i.kt)("sup",{parentName:"p",id:"fnref-meh"},(0,i.kt)("a",{parentName:"sup",href:"#fn-meh",className:"footnote-ref"},"meh"))," that ALKiln has created for you. Those commands often need information from you. They are like fill-in-the-blank sentences. A sort of ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Mad_Libs#format"},"madlibs")," for your ALKiln robot. For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-gherkin"},'  And I set the variable "likes_bears" to "True"\n')),(0,i.kt)("p",null,"This Step is made of three parts."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"And")," is one of the keywords that can start a Step"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},'I set the variable "___" to "___"')," is an ALKiln command with blanks that you need to fill in"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"likes_bears")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"True")," are the information you put in the blanks so that the ALKiln robot knows what answer to give to a question")),(0,i.kt)("p",null,"That command can also be written as ",(0,i.kt)("inlineCode",{parentName:"p"},'I set the variable "<variable name>" to "<value>"'),". This tells you what information you should put in each of these blanks. In this case there are two blank spaces you should fill. In the first blank, you are supposed to put the name of the variable that the field will set. In the second blank, you are supposed to put the value that you want the variable to have."),(0,i.kt)("p",null,"Each of your tests - a ",(0,i.kt)("inlineCode",{parentName:"p"},"Scenario")," or a ",(0,i.kt)("inlineCode",{parentName:"p"},"Scenario Outline")," - usually contains many Steps. Any Step can be used as many times as you want and at any point in a test."),(0,i.kt)("h2",{id:"interact"},"Interactive Steps"),(0,i.kt)("p",null,"You can use some Steps to change what is on the page by filling in fields, pressing buttons or tabs, or performing other actions."),(0,i.kt)("h3",{id:"story-table"},"The Story Table Step"),(0,i.kt)("p",null,"The Story Table Step fills in fields on interview pages. It is the Step many of our authors work with the most. In our opinion, it is the most flexible way to fill in fields in your forms, unlike the linear ",(0,i.kt)("a",{parentName:"p",href:"#set"},'"I set" Step'),". This makes a test easier to maintain."),(0,i.kt)("p",null,"You can use the ",(0,i.kt)("a",{parentName:"p",href:"https://plocket.github.io/alkiln_story/"},"story table generator")," to generate a first draft of a full test file that uses a Story Table based on an interview you have finished."),(0,i.kt)("p",null,"The Story Table Step is made of a sentence followed by a table. The data in the table is a snapshot of the user who is filling out the form. Each table row describes one fact about the user - one variable in the interview. It has this format:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-gherkin"},'  And I get to the question id "<target question id>" with this data:\n    | var | value |\n    | <variable name> | <value to set> |\n    | <variable name> | <value to set> |\n')),(0,i.kt)("p",null,"As you can see, there are three types of blanks you need to fill in for this Step: ",(0,i.kt)("inlineCode",{parentName:"p"},"<target question id>"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"<variable name>"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"<value to set>"),". The way to use the names of variables and values to ",(0,i.kt)("a",{parentName:"p",href:"#field-values"},"set the values of fields")," is the same as the ",(0,i.kt)("a",{parentName:"p",href:"#set"},'"I set" Step'),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The starting sentence ",(0,i.kt)("strong",{parentName:"li"},"must")," include the question ",(0,i.kt)("inlineCode",{parentName:"li"},"id"),(0,i.kt)("sup",{parentName:"li",id:"fnref-id"},(0,i.kt)("a",{parentName:"sup",href:"#fn-id",className:"footnote-ref"},"id"))," of a page in the interview."),(0,i.kt)("li",{parentName:"ul"},"The table ",(0,i.kt)("strong",{parentName:"li"},"must")," include all the variables and values necessary to get a user from the current page to the page with the given question id."),(0,i.kt)("li",{parentName:"ul"},"The table ",(0,i.kt)("strong",{parentName:"li"},"must")," have two columns with the headings ",(0,i.kt)("inlineCode",{parentName:"li"},"var")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"value"),".")),(0,i.kt)("p",null,"On each interview page, ALKiln:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Checks if the page has the ",(0,i.kt)("inlineCode",{parentName:"li"},"<target question id>")," you gave it at the start"),(0,i.kt)("li",{parentName:"ol"},"If the page does have the ",(0,i.kt)("inlineCode",{parentName:"li"},"<target question id>")," it stops the Step"),(0,i.kt)("li",{parentName:"ol"},"Otherwise, it looks at each ",(0,i.kt)("inlineCode",{parentName:"li"},"<variable name>")," in the ",(0,i.kt)("inlineCode",{parentName:"li"},"var")," column to see if it can find that name in any fields"),(0,i.kt)("li",{parentName:"ol"},"For each ",(0,i.kt)("inlineCode",{parentName:"li"},"<variable name>")," it finds, it tries to answer the field using the matching ",(0,i.kt)("inlineCode",{parentName:"li"},"<value to set>")),(0,i.kt)("li",{parentName:"ol"},"It tries to continue to the next page"),(0,i.kt)("li",{parentName:"ol"},"If it is unable to continue it logs an error and stops"),(0,i.kt)("li",{parentName:"ol"},"Otherwise, it repeats the above")),(0,i.kt)("p",null,"An example table:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-gherkin"},'  And I get to the question id "brought scissors" with this data:\n    | var | value |\n    | last_haircut_date | today - 730 |\n    | wants_virtual_haircut | True |\n    | user_name | Jared |\n    | intro_screen_accepts_terms | True |\n')),(0,i.kt)("admonition",{title:"Docs",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Filling in checkboxes is tricky. Check our ",(0,i.kt)("a",{parentName:"p",href:"#checkboxes"},"documentation about setting checkbox values"),".")),(0,i.kt)("p",null,"This Step is flexible, which makes the test easier to maintain. The order of the rows is unimportant. That means you can edit the order of your pages or move fields to different pages without worrying about breaking the test."),(0,i.kt)("p",null,"ALKiln sets a table variable every time it finds that variable on a page, no matter how many times that variable appears."),(0,i.kt)("p",null,"You can use multiple Story Tables in a test."),(0,i.kt)("p",null,"Right now, Story Tables are unable to ",(0,i.kt)("a",{parentName:"p",href:"#env-vars"},"use environment variables to fill in answers"),"."),(0,i.kt)("admonition",{title:"Unused rows",type:"warning"},(0,i.kt)("p",{parentName:"admonition"},'The Story Table does not care about extra rows that never get used. This can make Story Tables easier to write, but it also means that the tests will technically "pass" even if variables that ',(0,i.kt)("em",{parentName:"p"},"should")," get set are never filled in."),(0,i.kt)("p",{parentName:"admonition"},"That can be a sign that a question that the user ",(0,i.kt)("em",{parentName:"p"},"should")," have seen got skipped or that there is a typo or mistake in the test."),(0,i.kt)("p",{parentName:"admonition"},"Because of this, the ALKiln report shows a list of unused rows for each table. You can check the report of passing tests to make sure none of the important rows got skipped.")),(0,i.kt)("h3",{id:"set"},(0,i.kt)("inlineCode",{parentName:"h3"},'I set the variable "<variable name>" to "<value to set>"')),(0,i.kt)("p",null,"WIP"),(0,i.kt)("h3",{id:"upload"},"Upload"),(0,i.kt)("p",null,"WIP"),(0,i.kt)("h3",{id:"env-vars"},"Environment variables"),(0,i.kt)("p",null,"WIP"),(0,i.kt)("h2",{id:"start"},"Steps to start tests"),(0,i.kt)("p",null,"There are some Steps that can be, and often are, the first Step in a test. They can still be used multiple times and at any point in the test. Your test ",(0,i.kt)("strong",{parentName:"p"},"must")," start with one of these Steps."),(0,i.kt)("p",null,"WIP"),(0,i.kt)("h3",{id:"start-interview"},(0,i.kt)("inlineCode",{parentName:"h3"},'I start the interview at "<YAML file name>"')),(0,i.kt)("p",null,"Use this Step to start a new session of an interview."),(0,i.kt)("h3",{id:"custom-timeout"},(0,i.kt)("inlineCode",{parentName:"h3"},"The maximum time for a Step is <number> seconds")),(0,i.kt)("p",null,"WIP"),(0,i.kt)("h3",{id:"wait"},(0,i.kt)("inlineCode",{parentName:"h3"},"I wait for <number> seconds")),(0,i.kt)("p",null,"WIP"),(0,i.kt)("h2",{id:"field-values"},"Setting values"),(0,i.kt)("p",null,"There are different ways to fill in fields. One is the ",(0,i.kt)("a",{parentName:"p",href:"#story-table"},"Story Table Step")," another is the ",(0,i.kt)("a",{parentName:"p",href:"#set"},'"I set" Step'),". Each has different syntax, but they set values the same way."),(0,i.kt)("h3",{id:"text"},"Text"),(0,i.kt)("p",null,"Fields such as the default field or those with ",(0,i.kt)("inlineCode",{parentName:"p"},"input type: text"),", as well as ",(0,i.kt)("inlineCode",{parentName:"p"},"datatype: textarea")," accept text for their value."),(0,i.kt)("h3",{id:"yesno"},"yesno"),(0,i.kt)("p",null,"WIP"),(0,i.kt)("h3",{id:"yesnomaybe"},"yesnomaybe"),(0,i.kt)("p",null,"WIP"),(0,i.kt)("h3",{id:"radio"},"radio"),(0,i.kt)("p",null,"WIP"),(0,i.kt)("h3",{id:"checkboxes"},"checkboxes"),(0,i.kt)("p",null,"Many authors find setting checkboxes confusing and often accidentally use an incorrect variable name or value. When they do that, they can get a ",(0,i.kt)("a",{parentName:"p",href:"/docassemble-AssemblyLine-documentation/docs/alkiln/trouble#variable-not-found"},'"variable not found" error')," or an ALKiln Story Table Step might just skip the field. Reading this section can help."),(0,i.kt)("admonition",{title:"Advanced summary",type:"tip"},(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"The only value a checkbox can have is ",(0,i.kt)("inlineCode",{parentName:"li"},"True")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"False"),"."),(0,i.kt)("li",{parentName:"ul"},"In ALKiln, the variable name of the checkbox is usually the same as its docassemble variable name. For example, ",(0,i.kt)("inlineCode",{parentName:"li"},"good_fruits['Apples']"),"."),(0,i.kt)("li",{parentName:"ul"},"The names of ",(0,i.kt)("inlineCode",{parentName:"li"},"object_checkboxes")," variable names in ALKiln are similar to how docassemble uses them, but they have extra quotes inside the first square brackets. For example: ",(0,i.kt)("inlineCode",{parentName:"li"},"best_friends['all_friends[0]']")))),(0,i.kt)("p",null,"An example of a checkbox field:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"fields:\n  - Out of all your friends, choose your best friends: best_friends\n    datatype: checkboxes\n    choices:\n      - Emmet\n      - Maria\n      - Sam\n")),(0,i.kt)("p",null,"The variable name of the checkbox for ALKiln is usually the same as its docassemble variable name. For example, ",(0,i.kt)("inlineCode",{parentName:"p"},"good_fruits['Apples']"),". The only value a checkbox can have is ",(0,i.kt)("inlineCode",{parentName:"p"},"True")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"False"),"."),(0,i.kt)("span",{class:"negative"},"Wrong")," way to set the value of the check box:",(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-gherkin"},'    And I set the variable "best_friends" to "Emmet"\n')),(0,i.kt)("span",{class:"positive"},"**Right**")," ways:",(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-gherkin"},'    And I set the variable "best_friends[\'Emmet\']" to "True"\n')),(0,i.kt)("p",null,"or, in a Story Table:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-gherkin"},"      | var | value |\n      | best_friends['Emmet'] | True |\n")),(0,i.kt)("p",null,"One exception is field created with an ",(0,i.kt)("inlineCode",{parentName:"p"},"object")," datatype, like ",(0,i.kt)("inlineCode",{parentName:"p"},"object_checkboxes"),". Their ALKiln names are similar to their docassemble names, but they need extra quotes. For example, look at this field:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"fields:\n  - Out of all your friends, choose your best friends: best_friends\n    datatype: object_checkboxes\n    choices: all_friends\n")),(0,i.kt)("span",{class:"negative"},"Wrong")," ways to set the value of the checkbox:",(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-gherkin"},'    And I set the variable "best_friends" to "all_friends"\n    And I set the variable "best_friends" to "all_friends[0]"\n    And I set the variable "best_friends[all_friends[0]]" to "True"\n')),(0,i.kt)("span",{class:"positive"},"**Right**")," ways:",(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-gherkin"},'    And I set the variable "best_friends[\'all_friends[0]\']" to "True"\n')),(0,i.kt)("p",null,"or, in a Story Table:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-gherkin"},"      | var | value |\n      | best_friends['all_friends[0]'] | True |\n")),(0,i.kt)("admonition",{title:"Eagle eye",type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"Especially notice the quotes just inside the first square brackets.")),(0,i.kt)("h3",{id:"other-values"},"others"),(0,i.kt)("p",null,"WIP"),(0,i.kt)("h3",{id:"special-values"},"Special values"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"today")," is a special value in ALKiln. ALKiln will change that value into the date of the current day. Right now it uses the US format for the date. You can also add or subtract days from ",(0,i.kt)("inlineCode",{parentName:"p"},"today")," to set a specific date in the past or in the future. These are the ways you can use ",(0,i.kt)("inlineCode",{parentName:"p"},"today"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-gherkin"},"    | signature_date | today |\n    | court_date | today + 20 |\n    | minors_birth_date | today - 3650 |\n")),(0,i.kt)("h2",{id:"observe"},"Observational Steps"),(0,i.kt)("p",null,"You can use some Steps to look at what is on the page or compare data. You can use these to make sure the interview has done what you want it to."),(0,i.kt)("h3",{id:"phrase"},(0,i.kt)("inlineCode",{parentName:"h3"},'I SHOULD see the phrase "<page text>"')),(0,i.kt)("p",null,"WIP"),(0,i.kt)("h2",{id:"output"},"Understanding test results"),(0,i.kt)("p",null,"WIP"),(0,i.kt)("h2",{id:"files"},"Test file anatomy"),(0,i.kt)("p",null,"Your tests files have the code that tells ALKiln how to answer questions in your interview and do other things. The code may look different than other code you have seen, but it is still code. It is still rigid and needs you to use the right syntax and spelling."),(0,i.kt)("p",null,"You should save your test files in your package's ",(0,i.kt)("a",{parentName:"p",href:"https://docassemble.org/docs/playground.html#sources"},'"Sources" folder'),". If you used the ALKiln setup interview, there will already be a test there that just loads the interview."),(0,i.kt)("p",null,"In test files, you use ",(0,i.kt)("a",{parentName:"p",href:"https://cucumber.io/docs/gherkin/"},"Gherkin")," syntax and keywords",(0,i.kt)("sup",{parentName:"p",id:"fnref-keywords"},(0,i.kt)("a",{parentName:"sup",href:"#fn-keywords",className:"footnote-ref"},"keywords"))," with ",(0,i.kt)("a",{parentName:"p",href:"#steps"},'specific "Steps" that the ALKiln framework has created')," for docassemble interviews."),(0,i.kt)("p",null,"Here are some rules about test files:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"You can have as many test files as you want."),(0,i.kt)("li",{parentName:"ul"},"Each file can have one or more tests, called Scenarios or Scenario Outlines."),(0,i.kt)("li",{parentName:"ul"},"Each file's name ",(0,i.kt)("strong",{parentName:"li"},"must")," end in ",(0,i.kt)("inlineCode",{parentName:"li"},".feature")," because that is the extension of that type of file. For example, ",(0,i.kt)("inlineCode",{parentName:"li"},"user_has_children.feature"),"."),(0,i.kt)("li",{parentName:"ul"},"Each file ",(0,i.kt)("strong",{parentName:"li"},"must")," start with the keyword ",(0,i.kt)("inlineCode",{parentName:"li"},"Feature:")," or a tag followed by a new line and the ",(0,i.kt)("inlineCode",{parentName:"li"},"Feature:")," keyword."),(0,i.kt)("li",{parentName:"ul"},"Each file ",(0,i.kt)("strong",{parentName:"li"},"must")," contain only one ",(0,i.kt)("inlineCode",{parentName:"li"},"Feature:")," keyword."),(0,i.kt)("li",{parentName:"ul"},"You ",(0,i.kt)("strong",{parentName:"li"},"must")," use ",(0,i.kt)("strong",{parentName:"li"},"Gherkin")," syntax for your tests. ",(0,i.kt)("a",{parentName:"li",href:"https://cucumber.io/docs/gherkin/reference/"},"Gherkin's own documentation"),' is the best place to read about Gherkin syntax with some exceptions that you can read below. Ignore notes about "step definitions". Those are part of what ALKiln takes care of.')),(0,i.kt)("p",null,"To troubleshoot Gherkin synatx problems "," in your tests, use an editor like the one at ",(0,i.kt)("a",{parentName:"p",href:"https://www.assertthat.com/online-gherkin-editor"},"AssertThat"),". It will mark lines that have incorrect syntax. For example, the editor should mark an extra ",(0,i.kt)("inlineCode",{parentName:"p"},"Feature:")," keyword as incorrect."),(0,i.kt)("p",null,"ALKiln only allows you to use some Gherkin keywords. Those are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://cucumber.io/docs/gherkin/reference/#feature"},(0,i.kt)("inlineCode",{parentName:"a"},"Feature:"))," - each file can only use one ",(0,i.kt)("inlineCode",{parentName:"li"},"Feature:")," keyword."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://cucumber.io/docs/gherkin/reference/#example"},(0,i.kt)("inlineCode",{parentName:"a"},"Scenario:"),"/",(0,i.kt)("inlineCode",{parentName:"a"},"Example:"))," - We recommend you use ",(0,i.kt)("inlineCode",{parentName:"li"},"Scenario"),". ",(0,i.kt)("strong",{parentName:"li"},"Make the ",(0,i.kt)("inlineCode",{parentName:"strong"},"Scenario")," descriptions unique")," because ALKiln will use them in the names of the reports it creates for you. This keyword is different from the plural ",(0,i.kt)("inlineCode",{parentName:"li"},"Examples"),"/",(0,i.kt)("inlineCode",{parentName:"li"},"Scenarios"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://cucumber.io/docs/gherkin/reference/#scenario-outline"},(0,i.kt)("inlineCode",{parentName:"a"},"Scenario Outline:"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://cucumber.io/docs/gherkin/reference/#examples"},(0,i.kt)("inlineCode",{parentName:"a"},"Examples:/Scenarios:"))," - We recommend you use ",(0,i.kt)("inlineCode",{parentName:"li"},"Examples"),". This can help you test translations, as shown below. When a ",(0,i.kt)("inlineCode",{parentName:"li"},"Scenario Outline")," has an ",(0,i.kt)("inlineCode",{parentName:"li"},"Examples")," table, the test will run at least once for each row in the table. This keyword is different from the singular ",(0,i.kt)("inlineCode",{parentName:"li"},"Scenario"),"/",(0,i.kt)("inlineCode",{parentName:"li"},"Example"),"."),(0,i.kt)("li",{parentName:"ul"},"Theses keywords that can start a Step - ",(0,i.kt)("a",{parentName:"li",href:"https://cucumber.io/docs/gherkin/reference/#given"},(0,i.kt)("inlineCode",{parentName:"a"},"Given")),", ",(0,i.kt)("a",{parentName:"li",href:"https://cucumber.io/docs/gherkin/reference/#when"},(0,i.kt)("inlineCode",{parentName:"a"},"When")),", ",(0,i.kt)("a",{parentName:"li",href:"https://cucumber.io/docs/gherkin/reference/#then"},(0,i.kt)("inlineCode",{parentName:"a"},"Then")),", and ",(0,i.kt)("a",{parentName:"li",href:"https://cucumber.io/docs/gherkin/reference/#and"},(0,i.kt)("inlineCode",{parentName:"a"},"And")),".")),(0,i.kt)("p",null,"ALKiln also lets you use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"@")," (",(0,i.kt)("a",{parentName:"li",href:"https://cucumber.io/docs/cucumber/api/?lang=java#tags"},"Tags"),"). The specific sections of the tags documentation that apply to ALKiln are:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"A ",(0,i.kt)("a",{parentName:"li",href:"https://cucumber.io/docs/cucumber/api/?lang=java#tags"},"general description of tags"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://cucumber.io/docs/cucumber/api/?lang=java#tag-expressions"},"Tag expressions")),(0,i.kt)("li",{parentName:"ul"},"Extra: ",(0,i.kt)("a",{parentName:"li",href:"https://cucumber.io/docs/cucumber/api/?lang=java#tag-inheritance"},"Tag inheritance"),"."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"#")," (Comments). They are a tiny bit different than python comments. They always have to be on their own line. The line can begin with zero or more spaces. You can use comments anywhere in your test file."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"|")," (",(0,i.kt)("a",{parentName:"li",href:"https://cucumber.io/docs/gherkin/reference/#data-tables"},"Data tables"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"""')," (",(0,i.kt)("a",{parentName:"li",href:"https://cucumber.io/docs/gherkin/reference/#doc-strings"},"Doc strings"),").")),(0,i.kt)("p",null,'We usually write test text as if it is from the perspective of the user. For example, "I wait" and "I start".'),(0,i.kt)("p",null,"Here is an example of a file that uses most of these features. The name of this file is ",(0,i.kt)("inlineCode",{parentName:"p"},"children.feature"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-gherkin"},'@has_children\nFeature: I have children\n\n# This Scenario uses the Story Table Step. It lets you list the names of\n# the variables in any order you want.\n@disallow_visitation\nScenario: I disallow visitation\n  Given I go to the interview at "protective_order.yml"\n  And I get to the question id "what kind of visitation?" with this data:\n    | var | value |\n    | needs_allow_visitation | False |\n    | user_name | Jordan |\n    | user_has_children | True |\n  Then I should see the phrase "Jordan"\n\n# This test will run once for each row in the `Examples` table. The text\n# between the "<" and ">" is the name of a column in the `Examples` table.\n@allow_visitation\nScenario Outline: I allow visitation\n  Given I go to the interview at "<url>"\n  Then I should see the phrase "<name>"\n  When I set "user_name" to "Rea"\n  And I tap to continue\n  Then I should see the phrase "<greeting> Rea!"\n  And I set "user_has_children" to "True"\n  And I tap to continue\n  When I set "needs_allow_visitation" to "True"\n  Then I should see see the phrase "This form can help you with that"\n\n  Examples:\n    | url | name | greeting |\n    | protective_order.yml | Your name | Hello |\n    | protective_order.yml&lang=es | Tu nombre | Hol\xe1 |\n')),(0,i.kt)("h2",{id:"run"},"Running tests"),(0,i.kt)("p",null,"WIP"),(0,i.kt)("h2",{id:"tips"},"Tips"),(0,i.kt)("p",null,"WIP"),(0,i.kt)("h2",{id:"faq"},"Frequently asked questions (FAQ)"),(0,i.kt)("h3",{id:"every-var"},"Do I have to set every variable in the interview?"),(0,i.kt)("p",null,"No, only required variables."),(0,i.kt)("div",{className:"footnotes"},(0,i.kt)("hr",{parentName:"div"}),(0,i.kt)("ol",{parentName:"div"},(0,i.kt)("li",{parentName:"ol",id:"fn-meh"},"We are still working finding a more descriptive name. Suggestions are welcome.",(0,i.kt)("a",{parentName:"li",href:"#fnref-meh",className:"footnote-backref"},"\u21a9")),(0,i.kt)("li",{parentName:"ol",id:"fn-id"},"You can find the question ",(0,i.kt)("inlineCode",{parentName:"li"},"id")," in your interview YAML in the ",(0,i.kt)("inlineCode",{parentName:"li"},"question")," block of that page. It is a good idea for every ",(0,i.kt)("inlineCode",{parentName:"li"},"question")," block in your interview to have an id.",(0,i.kt)("a",{parentName:"li",href:"#fnref-id",className:"footnote-backref"},"\u21a9")),(0,i.kt)("li",{parentName:"ol",id:"fn-keywords"},"Keywords are specific words that have a special meaning and purpose when you use them in specific places in your test code. They are similar to the words ",(0,i.kt)("inlineCode",{parentName:"li"},"else")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"not")," in python.",(0,i.kt)("a",{parentName:"li",href:"#fnref-keywords",className:"footnote-backref"},"\u21a9")))))}p.isMDXComponent=!0}}]);