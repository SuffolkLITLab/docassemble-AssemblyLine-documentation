"use strict";(self.webpackChunkdocassemble_assembly_line_documentation=self.webpackChunkdocassemble_assembly_line_documentation||[]).push([[548],{4137:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return p}});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var d=a.createContext({}),s=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(d.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,i=e.originalType,d=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),c=s(n),p=l,h=c["".concat(d,".").concat(p)]||c[p]||m[p]||i;return n?a.createElement(h,o(o({ref:t},u),{},{components:n})):a.createElement(h,o({ref:t},u))}));function p(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=n.length,o=new Array(i);o[0]=c;var r={};for(var d in t)hasOwnProperty.call(t,d)&&(r[d]=t[d]);r.originalType=e,r.mdxType="string"==typeof e?e:l,o[1]=r;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},4023:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return r},contentTitle:function(){return d},metadata:function(){return s},toc:function(){return u},default:function(){return c}});var a=n(7462),l=n(3366),i=(n(7294),n(4137)),o=["components"],r={id:"aldocument",title:"ALDocument: Python Classes to simplify working with multiple templates\n",sidebar_label:"ALDocument: Python Classes to simplify working with multiple templates\n",slug:"/framework/aldocument"},d=void 0,s={unversionedId:"framework/aldocument",id:"framework/aldocument",isDocsHomePage:!1,title:"ALDocument: Python Classes to simplify working with multiple templates\n",description:"Overview",source:"@site/docs/framework/aldocument.md",sourceDirName:"framework",slug:"/framework/aldocument",permalink:"/docassemble-AssemblyLine-documentation/docs/framework/aldocument",editUrl:"https://github.com/SuffolkLITLab/docassemble-AssemblyLine-documentation/edit/main/docs/framework/aldocument.md",tags:[],version:"current",frontMatter:{id:"aldocument",title:"ALDocument: Python Classes to simplify working with multiple templates\n",sidebar_label:"ALDocument: Python Classes to simplify working with multiple templates\n",slug:"/framework/aldocument"},sidebar:"someSidebar",previous:{title:"ALGeneral: Python Classes representing people\n",permalink:"/docassemble-AssemblyLine-documentation/docs/framework/algeneral"},next:{title:"ALToolbox functions and components",permalink:"/docassemble-AssemblyLine-documentation/docs/framework/altoolbox"}},u=[{value:"Overview",id:"overview",children:[],level:2},{value:"ALDocument class",id:"aldocument-class",children:[],level:2},{value:"ALDocumentBundle class",id:"aldocumentbundle-class",children:[{value:"Using the <code>download_list_html()</code> method",id:"using-the-download_list_html-method",children:[],level:3},{value:"Using the <code>send_button_html()</code> method",id:"using-the-send_button_html-method",children:[],level:3}],level:2},{value:"Working with overflow text, ALAddendumField and ALAddendumFieldDict",id:"working-with-overflow-text-aladdendumfield-and-aladdendumfielddict",children:[],level:2},{value:"Handling uploaded documents with ALExhibitDocument and ALExhibitList",id:"handling-uploaded-documents-with-alexhibitdocument-and-alexhibitlist",children:[],level:2},{value:"Creating XLSX files with ALTableDocument",id:"creating-xlsx-files-with-altabledocument",children:[],level:2},{value:"ALStaticDocument",id:"alstaticdocument",children:[],level:2},{value:"ALUntransformedDocument",id:"aluntransformeddocument",children:[],level:2}],m={toc:u};function c(e){var t=e.components,n=(0,l.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"overview"},"Overview"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"ALDocument")," class was created to solve these problems in Docassemble interviews:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"handling apps that can assemble multiple forms, with the final list of forms\ndepending on the answers that the user gives"),(0,i.kt)("li",{parentName:"ol"},'handling a way to display a "preview" and "final" version of a document with\nand without a signature (to allow the user to confirm information before\nsigning)'),(0,i.kt)("li",{parentName:"ol"},"handling text in PDF templates that doesn't fit and needs to be sent to an addendum")),(0,i.kt)("p",null,"This collection of classes has some other nice benefits:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"a compact, neat and easily customizable list of downloads at the end, with\nboth ",(0,i.kt)("inlineCode",{parentName:"li"},"view")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"download")," buttons"),(0,i.kt)("li",{parentName:"ol"},"a more customizable email-sending input than the stock Docassemble input that\ncan be displayed on the final screen"),(0,i.kt)("li",{parentName:"ol"},"always-fresh documents that will be updated when the user changes or edits a\nresponse"),(0,i.kt)("li",{parentName:"ol"},"a helper class and model questions to allow the user to upload evidence,\nincluding generating a table of contents and adding exhibit cover pages"),(0,i.kt)("li",{parentName:"ol"},"helper classes to include not just templates but static documents and tables\nin XLSX format as download options")),(0,i.kt)("p",null,"The primary classes that developers interact with are the ",(0,i.kt)("inlineCode",{parentName:"p"},"ALDocument")," class,\nwhich represents a template that is filled in with the user's answers during the\ncourse of the interview, and the ",(0,i.kt)("inlineCode",{parentName:"p"},"ALDocumentBundle")," class, which provides a way\nto group documents together to be emailed, downloaded, or delivered to a court\nor opposing party."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ALDocumentBundle")," objects can be nested to allow you to group multiple individual\ntemplate files into one document that the user can download."),(0,i.kt)("p",null,"Both ",(0,i.kt)("inlineCode",{parentName:"p"},"ALDocument")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"ALDocumentBundle")," objects can be either ",(0,i.kt)("inlineCode",{parentName:"p"},"enabled")," or not.\nThe Docassemble interview will seek logic that defines when the document should\nbe included in the final output, letting you easily create interviews that have\ncontingent documents."),(0,i.kt)("h2",{id:"aldocument-class"},"ALDocument class"),(0,i.kt)("p",null,"An ",(0,i.kt)("inlineCode",{parentName:"p"},"ALDocument")," is a\n",(0,i.kt)("a",{parentName:"p",href:"https://docassemble.org/docs/objects.html#DADict"},(0,i.kt)("inlineCode",{parentName:"a"},"DADict")),"  that has top level\nattributes and points to one or more Docassemble ",(0,i.kt)("a",{parentName:"p",href:"https://docassemble.org/docs/documents.html#attachment"},(0,i.kt)("inlineCode",{parentName:"a"},"attachment"),"\nblocks"),"."),(0,i.kt)("p",null,"There are usually exactly two keys in the dictionary: ",(0,i.kt)("inlineCode",{parentName:"p"},"preview")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"final"),",\nwith the only difference being the presence or absence of a signature. Conditional\nlogic inside the template or attachment block can be used to show or hide the signature\ndepending on the value of the ",(0,i.kt)("inlineCode",{parentName:"p"},"key")," so that the template does not need to be created\ntwice."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"signature_if_final")," method of an\n",(0,i.kt)("a",{parentName:"p",href:"algeneral#ALIndividual"},"ALIndividual")," was created to simplify this\ncommon use case."),(0,i.kt)("p",null,"Here's how to use an ALDocument:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Create ",(0,i.kt)("inlineCode",{parentName:"li"},"ALDocument")," objects in an objects block."),(0,i.kt)("li",{parentName:"ol"},"Set any required attributes, like ",(0,i.kt)("inlineCode",{parentName:"li"},"enabled"),", in the object block or in a\nseparate code block."),(0,i.kt)("li",{parentName:"ol"},"Define the key of the ",(0,i.kt)("inlineCode",{parentName:"li"},"ALDocument")," in an ",(0,i.kt)("inlineCode",{parentName:"li"},"attachment")," block using the\n",(0,i.kt)("inlineCode",{parentName:"li"},"variable name")," modifier. Usually, use one attachment block and define the variable name\nlike this: ",(0,i.kt)("inlineCode",{parentName:"li"},"variable name: some_al_document[i]"),"."),(0,i.kt)("li",{parentName:"ol"},"Optionally, reference the ",(0,i.kt)("inlineCode",{parentName:"li"},"ALDocument")," inside an ",(0,i.kt)("inlineCode",{parentName:"li"},"ALDocumentBundle"),".")),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'---\nobjects:\n  - letter: ALDocument.using(title="Letter to Social Security", filename="ssa_letter", enabled=True, has_addendum=False)\n---\nattachment:\n  - pdf template file: ssa_letter.pdf\n    variable name: letter[i]\n    fields:\n      - "users1_name": ${ users[0] }\n      - "users1_signature": ${ users[0].signature_if_final(i) }\n')),(0,i.kt)("p",null,"Example:"),(0,i.kt)("p",null,"It's common in longer interviews to have the ",(0,i.kt)("inlineCode",{parentName:"p"},"enabled")," attribute be defined in a code block, like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'---\nobjects:\n  - main_document: ALDocument.using(title="Letter to Social Security", filename="main_document", enabled=True, has_addendum=False)\n  - insurance_rider: ALDocument.using(title="Letter to Social Security", filename="rider", has_addendum=False)\n---\nattachments:\n  - pdf template file: main_document.pdf\n    variable name: main_document[i]\n    fields:\n      - "users1_name": ${ users[0] }\n      - "users1_signature": ${ users[0].signature_if_final(i) }\n  - pdf template file: rider.pdf\n    variable name: rider[i]\n    fields:\n      - "users1_name": ${ users[0] }\n      - "users1_signature": ${ users[0].signature_if_final(i) }\n---\ncode: |\n  if total_cost > 1000:\n    insurance_rider.enabled = True\n  else:\n    insurance_rider.enabled = False\n  # or more concise but slightly harder to read:\n  # insurance_rider.enabled = total_cost > 1000\n')),(0,i.kt)("p",null,"In the example above, the ",(0,i.kt)("inlineCode",{parentName:"p"},"insurance_rider")," document is only included in any bundles if the\ntotal cost of the project is over $1,000. Note that the ",(0,i.kt)("inlineCode",{parentName:"p"},"enabled")," value is global for the\ninterview session. If you want to use different logic in different bundles, you can easily\ncreate a separate ",(0,i.kt)("inlineCode",{parentName:"p"},"ALDocument")," that references the same template file and attachment block."),(0,i.kt)("p",null,"Attributes:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"filename"),": the ",(0,i.kt)("strong",{parentName:"li"},"display")," filename used for the document when it is downloaded"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"title"),": the title shown on the download screen"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"enabled"),': whether the document should be "turned on" when it is referenced in an ',(0,i.kt)("inlineCode",{parentName:"li"},"ALDocumentBundle")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"addendum"),": points to a variable representing an ",(0,i.kt)("inlineCode",{parentName:"li"},"attachment")," block with a\nformatted addendum. The Assembly Line provides a good default addendum\ntemplate that is flexible enough to work with many fields."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"overflow_fields"),": an ",(0,i.kt)("inlineCode",{parentName:"li"},"ALAddendumFieldDict")," with each representing a field\nthat has potential to be sent to the addendum if exceeds a pre-set length."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"has_addendum "),": set this to True or False to control whether the\n",(0,i.kt)("inlineCode",{parentName:"li"},"overflow_fields")," dictionary will be checked to decide whether or not to\ngenerate an addendum file. Optional; defaults to ",(0,i.kt)("inlineCode",{parentName:"li"},"False"),".")),(0,i.kt)("p",null,"Methods:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"as_pdf(key:str='final', refresh:bool=True)"),": returns a PDF version of the\ncompleted template and any addendum. ",(0,i.kt)("inlineCode",{parentName:"li"},"key")," is normally ",(0,i.kt)("inlineCode",{parentName:"li"},"preview")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"final")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"as_docx(key:str='final', refresh:bool=True)"),": returns a DOCX version of the\ncompleted template and any addendum if the original is a DOCX template. ",(0,i.kt)("inlineCode",{parentName:"li"},"key"),"\nis normally ",(0,i.kt)("inlineCode",{parentName:"li"},"preview")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"final"),". "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"as_list(key:str='final', refresh:bool=True)"),": returns a 1 or 2 item list\nwhich contains the templaate and its addendum, if any."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"need_addendum()"),": returns ",(0,i.kt)("inlineCode",{parentName:"li"},"True")," if the addendum exists and there are\noverflow fields."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"has_overflow()"),": returns ",(0,i.kt)("inlineCode",{parentName:"li"},"True")," if there are fields that trigger the\naddendum."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"overflow()"),": returns a list of just the fields that triggered the addendum."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"safe_value(field_name:str, overflow_message:str=None, preserve_newlines:bool=False, input_width:int=80)"),':\nreturns the "safe" value\nof ',(0,i.kt)("inlineCode",{parentName:"li"},"field_name")," (the amount that is less than ",(0,i.kt)("inlineCode",{parentName:"li"},"overflow_trigger"),") plus an\noverflow message. Used in an attachment block."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"overflow_value(field_name:str, overflow_message:str=None, preserve_newlines:bool=False, input_width:int=80)"),':\nreturns the "unsafe" value of ',(0,i.kt)("inlineCode",{parentName:"li"},"field_name"),"--the amount that exceeds the ",(0,i.kt)("inlineCode",{parentName:"li"},"overflow_trigger"),". Potentially used\ninside an addendum document.")),(0,i.kt)("h2",{id:"aldocumentbundle-class"},"ALDocumentBundle class"),(0,i.kt)("p",null,"An ",(0,i.kt)("inlineCode",{parentName:"p"},"ALDocumentBundle")," is a\n",(0,i.kt)("a",{parentName:"p",href:"https://docassemble.org/docs/objects.html#DAList"},(0,i.kt)("inlineCode",{parentName:"a"},"DAList"))," that provides\ndevelopers a way to conveniently group documents and treat them as a single set,\neven if the exact list of documents might change depending on the user's\nanswers."),(0,i.kt)("p",null,"Here's how to use an ",(0,i.kt)("inlineCode",{parentName:"p"},"ALDocumentBundle"),": "),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Create the ",(0,i.kt)("inlineCode",{parentName:"li"},"ALDocumentBundle")," in an ",(0,i.kt)("inlineCode",{parentName:"li"},"objects")," block."),(0,i.kt)("li",{parentName:"ol"},"Add each ",(0,i.kt)("inlineCode",{parentName:"li"},"ALDocument")," or nested ",(0,i.kt)("inlineCode",{parentName:"li"},"ALDocumentBundle")," that your interview will\nsometimes produce to the bundle. Because the list is usually known in advance,\nit's common to include this in the object definition."),(0,i.kt)("li",{parentName:"ol"},"Use the ",(0,i.kt)("inlineCode",{parentName:"li"},"as_pdf()")," method on your preview screen to display a preview of the\noutput without any signature."),(0,i.kt)("li",{parentName:"ol"},"Use the ",(0,i.kt)("inlineCode",{parentName:"li"},"download_list_html()")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"send_button_html()")," methods on your ",(0,i.kt)("inlineCode",{parentName:"li"},"download"),"\nscreen.")),(0,i.kt)("p",null,"You can have as many or as few bundles as you would like. The Assembly Line convention\nis to use the following two bundles:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"al_user_bundle")," which should include a ",(0,i.kt)("strong",{parentName:"li"},"next steps")," document with\ninstructions for your user"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"al_court_bundle")," which leaves out the instructions and should have every\ndocument that you want the clerk to receive")),(0,i.kt)("p",null,"Stick with this convention if you expect to integrate with E-filing."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'---\nobjects:\n  - al_user_bundle: ALDocumentBundle.using(title="Forms to download", filename="ssa_documents", elements=[ssa_next_steps, letter])\n  - al_court_bundle: ALDocumentBundle.using(title="Forms to download", filename="ssa_documents", elements=[letter])\n')),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"You can ",(0,i.kt)("strong",{parentName:"p"},"nest")," ",(0,i.kt)("inlineCode",{parentName:"p"},"ALDocumentBundle"),"s! Just create your bundle in a separate ",(0,i.kt)("inlineCode",{parentName:"p"},"objects")," block and add it directly\ninto the list of ",(0,i.kt)("inlineCode",{parentName:"p"},"elements"),". This lets you create a document from multiple templates that you want the user\nto be able to open and print as one file."))),(0,i.kt)("p",null,"Attributes:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"enabled")," (optional): make sure to define this if the object is included inside another ",(0,i.kt)("inlineCode",{parentName:"li"},"ALDocumentBundle")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"title"),": this is displayed on the download screen"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"filename"),": used to construct the display filename for a ",(0,i.kt)("inlineCode",{parentName:"li"},"pdf")," version of the bundle")),(0,i.kt)("p",null,"Methods:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"as_pdf(key:str='final', refresh:bool=True) -> DAFile"),": return a single concatenated PDF of the bundle's attachments"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"as_zip(self, key:str = 'final', refresh:bool = True, title:str = '') -> DAFile"),":\nreturns a compressed ZIP archive with separate documents for each item."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"enabled_documents(self, refresh:bool=True) -> List[Any]"),': return a list of only the "enabled" documents in the bundle'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"as_flat_list(self, key:str='final', refresh:bool=True) -> List[DAFile]"),":"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"get_titles(self, key:str='final', refresh:bool=True) -> List[str]"),":"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"as_pdf_list(self, key:str='final', refresh:bool=True) -> List[DAFile]"),":"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"as_editable_list(self, key:str='final', refresh:bool=True) -> List[DAFile]"),":"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'download_list_html(self, key:str=\'final\', format:str=\'pdf\', view:bool=True\n    refresh:bool=True, include_zip:bool = True, view_label="View", view_icon:str="eye",\n    download_label:str="Download", download_icon:str="download", zip_label:str=None,\n    zip_icon:str="file-archive") -> str'),": returns HTML for a table with download and view buttons, as for a download screen"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"send_button_html(self, key:str='final', show_editable_checkbox:bool = True)->str"),":"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"send_email(self, to:any=None, key:str='final', editable:bool=False, template:any=None, **kwargs) -> bool"),":")),(0,i.kt)("p",null,"Example of a download screen that uses an ",(0,i.kt)("inlineCode",{parentName:"p"},"ALDocumentBundle"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"---\nprogress: 100\nid: download\nevent: petition_to_change_name_of_adult_download\nquestion: |\n  Your form is ready to download.\nsubquestion: |\n  Thank you ${ user_name_first_new }. Your form is ready to download and deliver.\n  \n  View, download and send your form below. Click the \"Make changes\" button to fix any mistakes. \n  \n  1. Download each of the documents below. Print at least two copies.\n  2. Call the ${ trial_court } at ${ bold(trial_court.phone) } to find out how\n  to deliver these forms. You can mail a copy to ${ trial_court.address.on_one_line() }.\n  3. Get a **certified** copy of your birth certificate from the town hall\n  where you were born.\n  4. File one of the copies with the court. Keep the other for your records.\n  \n  ${ action_button_html(url_action('review_petition_to_change_name_of_adult'), label='Make changes', color='info', icon='pencil-alt') } \n  \n  ${ action_button_html(al_user_bundle.as_pdf().url_for(), label=\"Download a copy as a single PDF\", icon='download') }\n  \n  ${ al_user_bundle.download_list_html() }\n  \n  ${ al_user_bundle.send_button_html() }\n")),(0,i.kt)("h3",{id:"using-the-download_list_html-method"},"Using the ",(0,i.kt)("inlineCode",{parentName:"h3"},"download_list_html()")," method"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'download_list_html(self, key:str=\'final\', format:str=\'pdf\', view:bool=True,\n      refresh:bool=True, include_zip:bool = True, view_label="View", view_icon:str="eye",\n      download_label:str="Download", download_icon:str="download", zip_label:str=None,\n      zip_icon:str="file-archive") -> str\n')),(0,i.kt)("p",null,'The default download table displays a row with a title, a "view" button which\nallows opening a PDF in-browser, and a "download" button that allows downloading\nthe PDF with one blick. A row with a "Download as zip" button is also added\nby default if there is more than 1 document in the table.'),(0,i.kt)("p",null,"These defaults can be customized quite a bit. In addition to the parameters listed below,\nthe appearance can be controlled by editing CSS files. Take a look at the values in\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/SuffolkLITLab/docassemble-AssemblyLine/blob/main/docassemble/AssemblyLine/data/static/aldocument.css"},(0,i.kt)("inlineCode",{parentName:"a"},"aldocument.css")),"\nand customize to match your needs."),(0,i.kt)("p",null,"It is also not necessary to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"download_list_html()")," method. If you\nprefer, you can directly reference ",(0,i.kt)("inlineCode",{parentName:"p"},"enabled_documents")," and create your own\ndownload table format."),(0,i.kt)("p",null,"Parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"key"),': either "final" or "preview"'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"format"),': either "pdf", "docx", or "original", used to control the file linked to the "download" button'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"view"),": display a button that links to a PDF version of the document, if possible"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"refresh"),": controls whether the file should be cached"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"include_zip"),': controls whether a "Download zip" button is added to a download list with more than 1 document'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"view_label"),': label used for the "View" button'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"view_icon"),": icon from ",(0,i.kt)("a",{parentName:"li",href:"https://fontawesome.com"},"fontawesome"),'\'s "free" library'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"download_label"),': label used for the "Download" button'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"download_icon"),": icon from ",(0,i.kt)("a",{parentName:"li",href:"https://fontawesome.com"},"fontawesome"),'\'s "free" library'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"zip_label"),': text used for the row with the "zip" button. If not provided,\nthis will refer to the value of ',(0,i.kt)("inlineCode",{parentName:"li"},"self.zip_label")," which should be defined in a\nDocassemble ",(0,i.kt)("inlineCode",{parentName:"li"},"template")," block. This is to aid translation."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"zip_icon"),": icon from ",(0,i.kt)("a",{parentName:"li",href:"https://fontawesome.com"},"fontawesome"),'\'s "free" library')),(0,i.kt)("p",null,'Example: customizing the text on the "zip_label" interview-wide:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"---\ngeneric object: ALDocumentBundle\ntemplate: x.zip_label\ncontent: |\n  Download as one ZIP file\n")),(0,i.kt)("h3",{id:"using-the-send_button_html-method"},"Using the ",(0,i.kt)("inlineCode",{parentName:"h3"},"send_button_html()")," method"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"  def send_button_html(self, key:str='final', show_editable_checkbox:bool = True)->str:\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"send_button_html()")," is used to display an HTML input that the user can interact\nwith to send themselves a copy of the contents of a bundle."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"send_button_html()")," has just one parameter: ",(0,i.kt)("inlineCode",{parentName:"p"},"show_editable_checkbox")," which controls\nwhether a checkbox will be displayed that allows the user to toggle including the DOCX\nversion of templates in the email that they receive. "),(0,i.kt)("p",null,"However, all of the text can be customized. Copy each YAML block\nbelow into your own interview to edit and customize the text.\nIt can be edited interview-wide (shown) or on a per-bundle basis."),(0,i.kt)("p",null,'Customize the text "Get a copy of the documents in email":'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"---\ngeneric object: ALDocumentBundle\ntemplate: x.get_email_copy\ncontent: |\n  Get a copy of the documents in email\n")),(0,i.kt)("p",null,'Customize the text "Include an editable copy":'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"---\ngeneric object: ALDocumentBundle\ntemplate: x.include_editable_documents\ncontent: |\n  Include an editable copy\n")),(0,i.kt)("p",null,'Customize the text "Download zip":'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"---\ngeneric object: ALDocumentBundle\ntemplate: x.zip_label\ncontent: |\n  Download zip\n")),(0,i.kt)("p",null,"The subject and contents of the email can also be customized:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'---\ngeneric object: ALDocumentBundle\ntemplate: x.send_email_template\nsubject: |\n  % if len(x) > 1:\n  Your ${ x.title } document is ready\n  % else:\n  Your "${ x.title }" documents are ready\n  % endif\ncontent: |\n  Thank you for using our app!\n\n  Please find the document for ${ users } attached.\n')),(0,i.kt)("h2",{id:"working-with-overflow-text-aladdendumfield-and-aladdendumfielddict"},"Working with overflow text, ALAddendumField and ALAddendumFieldDict"),(0,i.kt)("h2",{id:"handling-uploaded-documents-with-alexhibitdocument-and-alexhibitlist"},"Handling uploaded documents with ALExhibitDocument and ALExhibitList"),(0,i.kt)("h2",{id:"creating-xlsx-files-with-altabledocument"},"Creating XLSX files with ALTableDocument"),(0,i.kt)("h2",{id:"alstaticdocument"},"ALStaticDocument"),(0,i.kt)("h2",{id:"aluntransformeddocument"},"ALUntransformedDocument"))}c.isMDXComponent=!0}}]);