"use strict";(self.webpackChunkdocassemble_assembly_line_documentation=self.webpackChunkdocassemble_assembly_line_documentation||[]).push([[9266],{7992:(s,e,n)=>{n.r(e),n.d(e,{assets:()=>r,contentTitle:()=>o,default:()=>c,frontMatter:()=>t,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"components/ALToolbox/business_days","title":"ALToolbox.business_days","description":"* ALToolbox.business\\\\days","source":"@site/docs/components/ALToolbox/business_days.md","sourceDirName":"components/ALToolbox","slug":"/components/ALToolbox/business_days","permalink":"/docs/components/ALToolbox/business_days","draft":false,"unlisted":false,"editUrl":"https://github.com/SuffolkLITLab/docassemble-AssemblyLine-documentation/edit/main/docs/components/ALToolbox/business_days.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"ALToolbox.al_income","permalink":"/docs/components/ALToolbox/al_income"},"next":{"title":"ALToolbox.copy_button","permalink":"/docs/components/ALToolbox/copy_button"}}');var d=n(4848),i=n(8453);const t={},o="ALToolbox.business_days",r={},l=[{value:"standard_holidays",id:"standard_holidays",level:3},{value:"Arguments",id:"arguments",level:4},{value:"Returns",id:"returns",level:4},{value:"non_business_days",id:"non_business_days",level:3},{value:"Arguments",id:"arguments-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"is_business_day",id:"is_business_day",level:3},{value:"Arguments",id:"arguments-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"get_next_business_day",id:"get_next_business_day",level:3},{value:"Arguments",id:"arguments-3",level:4},{value:"Returns",id:"returns-3",level:4},{value:"get_date_after_n_business_days",id:"get_date_after_n_business_days",level:3},{value:"Arguments",id:"arguments-4",level:4},{value:"Returns",id:"returns-4",level:4}];function h(s){const e={a:"a",code:"code",h1:"h1",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...s.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(e.header,{children:(0,d.jsx)(e.h1,{id:"altoolboxbusiness_days",children:"ALToolbox.business_days"})}),"\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.a,{href:"#ALToolbox.business_days",children:"ALToolbox.business_days"}),"\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsx)(e.li,{children:(0,d.jsx)(e.a,{href:"#ALToolbox.business_days.standard_holidays",children:"standard_holidays"})}),"\n",(0,d.jsx)(e.li,{children:(0,d.jsx)(e.a,{href:"#ALToolbox.business_days.non_business_days",children:"non_business_days"})}),"\n",(0,d.jsx)(e.li,{children:(0,d.jsx)(e.a,{href:"#ALToolbox.business_days.is_business_day",children:"is_business_day"})}),"\n",(0,d.jsx)(e.li,{children:(0,d.jsx)(e.a,{href:"#ALToolbox.business_days.get_next_business_day",children:"get_next_business_day"})}),"\n",(0,d.jsx)(e.li,{children:(0,d.jsx)(e.a,{href:"#ALToolbox.business_days.get_date_after_n_business_days",children:"get_date_after_n_business_days"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsx)("a",{id:"ALToolbox.business_days.standard_holidays"}),"\n",(0,d.jsx)(e.h3,{id:"standard_holidays",children:"standard_holidays"}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-python",children:'def standard_holidays(\n        year,\n        country="US",\n        subdiv="MA",\n        add_holidays: Optional[Mapping] = None,\n        remove_holidays: Optional[Iterable[str]] = None\n) -> holidays.HolidayBase\n'})}),"\n",(0,d.jsx)(e.p,{children:'Get all holidays in the specified year, country, and state (or other subdivision).\nNote that this draws on the "holidays" package which may deviate slightly from\nholidays observed by a local court, but should be very close to accurate.'}),"\n",(0,d.jsx)(e.h4,{id:"arguments",children:"Arguments"}),"\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.code,{children:"year"})," - the year to get holidays for"]}),"\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.code,{children:"country"}),' - the country to use holidays from (default: "US")']}),"\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.code,{children:"subdiv"}),' - the subdivision (e.g. state or province) to use holidays from (default: "MA")']}),"\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.code,{children:"add_holidays"}),' - a dictionary from date strings ("12-25") to the name of the holiday, to add custom holidays']}),"\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.code,{children:"remove_holidays"})," - a list of holiday name strings to remove from the standard holidays"]}),"\n"]}),"\n",(0,d.jsx)(e.h4,{id:"returns",children:"Returns"}),"\n",(0,d.jsx)(e.p,{children:"A dictionary like-object that you can treat like:"}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{children:'\\{\n    "2021-01-01": "New Year\'s Day",\n    ...\n    "2021-12-25": "Christmas Day",\n\\}\n'})}),"\n",(0,d.jsx)(e.p,{children:"In place of a string, the object that is returned can also be treated as though\nthe keys are datetime.date objects."}),"\n",(0,d.jsxs)(e.p,{children:[(0,d.jsx)(e.strong,{children:"Examples"}),":"]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-python",children:'# Get standard holidays for Massachusetts in 2023\nma_holidays = standard_holidays(2023)\nprint(ma_holidays["2023-07-04"])  # Independence Day\n\n# Get holidays for a different state\nca_holidays = standard_holidays(2023, country="US", subdiv="CA")\n\n# Add custom holidays\ncustom_holidays = standard_holidays(\n    2023,\n    add_holidays=\\{"03-17": "Company Founding Day"\\}\n)\nprint(custom_holidays["2023-03-17"])  # Company Founding Day\n\n# Remove holidays that your court doesn\'t observe\ncourt_holidays = standard_holidays(\n    2023,\n    remove_holidays=["Columbus Day", "Veterans Day"]\n)\n'})}),"\n",(0,d.jsx)("a",{id:"ALToolbox.business_days.non_business_days"}),"\n",(0,d.jsx)(e.h3,{id:"non_business_days",children:"non_business_days"}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-python",children:'def non_business_days(year,\n                      country="US",\n                      subdiv="MA",\n                      add_holidays: Optional[Mapping] = None,\n                      remove_holidays: Optional[Iterable[str]] = None,\n                      first_n_dates=0,\n                      last_n_dates=0) -> dict\n'})}),"\n",(0,d.jsx)(e.p,{children:"Get all non-business days (weekends and holidays) in the specified year, country, and state.\nThis function returns a dictionary of all dates that are not business days, including\nboth weekends (Saturdays and Sundays) and official holidays."}),"\n",(0,d.jsx)(e.h4,{id:"arguments-1",children:"Arguments"}),"\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.code,{children:"year"})," - the year to get non-business days for"]}),"\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.code,{children:"country"}),' - the country to use holidays from (default: "US")']}),"\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.code,{children:"subdiv"}),' - the subdivision (e.g. state or province) to use holidays from (default: "MA")']}),"\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.code,{children:"add_holidays"}),' - a dictionary from date strings ("12-25") to the name of the holiday, to add custom holidays']}),"\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.code,{children:"remove_holidays"})," - a list of holiday name strings to remove from the standard holidays"]}),"\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.code,{children:"first_n_dates"})," - if specified, only return the first N non-business days of the year"]}),"\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.code,{children:"last_n_dates"})," - if specified, only return the last N non-business days of the year"]}),"\n"]}),"\n",(0,d.jsx)(e.h4,{id:"returns-1",children:"Returns"}),"\n",(0,d.jsx)(e.p,{children:'A dictionary where keys are date strings ("YYYY-MM-DD") and values are the name of the non-business day\n(e.g., "Saturday", "New Year\'s Day").'}),"\n",(0,d.jsxs)(e.p,{children:[(0,d.jsx)(e.strong,{children:"Examples"}),":"]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-python",children:'# Get all non-business days for 2023\nall_non_business = non_business_days(2023)\nprint(len(all_non_business))  # Shows total count of non-business days\n\n# Get just the first 10 non-business days of the year\nfirst_ten = non_business_days(2023, first_n_dates=10)\n\n# Get the last 5 non-business days of the year\nlast_five = non_business_days(2023, last_n_dates=5)\n\n# Get non-business days with custom holidays\ncustom_non_business = non_business_days(\n    2023,\n    add_holidays=\\{"03-17": "Company Founding Day"\\}\n)\n'})}),"\n",(0,d.jsx)("a",{id:"ALToolbox.business_days.is_business_day"}),"\n",(0,d.jsx)(e.h3,{id:"is_business_day",children:"is_business_day"}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-python",children:'def is_business_day(date: Union[str, DADateTime],\n                    country="US",\n                    subdiv="MA",\n                    add_holidays: Optional[Mapping] = None,\n                    remove_holidays: Optional[Iterable[str]] = None) -> bool\n'})}),"\n",(0,d.jsx)(e.p,{children:"Returns true if and only if the specified date is a business day (i.e., not a holiday)\nin the specified jurisdiction. Business days are considered to be:"}),"\n",(0,d.jsxs)(e.ol,{children:["\n",(0,d.jsx)(e.li,{children:"weekdays other than Saturday and Sunday and"}),"\n",(0,d.jsx)(e.li,{children:"days that are not a federal or state-observed holiday"}),"\n"]}),"\n",(0,d.jsx)(e.h4,{id:"arguments-2",children:"Arguments"}),"\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.code,{children:"date"}),' - the date to check. Can be a date-formatted string (i.e. "2023-03-26", or "3-26-2023") or a DADateTime object']}),"\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.code,{children:"country"}),' - the country to use holidays from (default: "US")']}),"\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.code,{children:"subdiv"}),' - the subdivision (e.g. state or province) to use holidays from (default: "MA")']}),"\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.code,{children:"add_holidays"}),' - a dictionary from date strings ("12-25") to the name of the holiday, to add custom holidays']}),"\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.code,{children:"remove_holidays"})," - a list of holiday name strings to remove from the standard holidays"]}),"\n"]}),"\n",(0,d.jsx)(e.h4,{id:"returns-2",children:"Returns"}),"\n",(0,d.jsx)(e.p,{children:"True if the date is a business day, False otherwise."}),"\n",(0,d.jsxs)(e.p,{children:[(0,d.jsx)(e.strong,{children:"Examples"}),":"]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-python",children:'# Check if a specific date is a business day\nassert(is_business_day("2023-03-26") == False)  # Sunday\n\n# Check a weekday that\'s not a holiday\nassert(is_business_day("2023-03-27") == True)  # Monday\n\n# Check a holiday\nassert(is_business_day("2023-07-04") == False)  # Independence Day\n\n# Check with custom holidays\nis_company_day = is_business_day(\n    "2023-03-17",\n    add_holidays=\\{"03-17": "Company Founding Day"\\}\n)\nassert(is_company_day == False)  # Custom holiday\n\n# Check for different jurisdiction\nis_business_uk = is_business_day("2023-12-26", country="UK")  # Boxing Day\n'})}),"\n",(0,d.jsx)("a",{id:"ALToolbox.business_days.get_next_business_day"}),"\n",(0,d.jsx)(e.h3,{id:"get_next_business_day",children:"get_next_business_day"}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-python",children:'def get_next_business_day(\n        start_date: Union[str, DADateTime],\n        wait_n_days=1,\n        country="US",\n        subdiv="MA",\n        add_holidays: Optional[Mapping] = None,\n        remove_holidays: Optional[Iterable[str]] = None) -> DADateTime\n'})}),"\n",(0,d.jsxs)(e.p,{children:["Returns the first day AFTER the specified start date that is\nnot a federal or state holiday, Saturday or Sunday. Optionally,\nspecify the parameter ",(0,d.jsx)(e.code,{children:"wait_n_days"})," to get the first business day after\nat least, e.g., 10 days."]}),"\n",(0,d.jsxs)(e.p,{children:["Relies on the Python holidays package, which has fairly good support for\nholidays around the world and in various states and provinces, but local\ncourt rules may differ. You can see what holidays are used at\n",(0,d.jsx)(e.a,{href:"https://github.com/dr-prodigy/python-holidays/tree/master/holidays/countries",children:"https://github.com/dr-prodigy/python-holidays/tree/master/holidays/countries"})]}),"\n",(0,d.jsx)(e.h4,{id:"arguments-3",children:"Arguments"}),"\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.code,{children:"start_date"}),' - the date to start with. Can be a date-formatted string (i.e. "2023-03-26", or\n"3-26-2023") or a DADateTime object']}),"\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.code,{children:"wait_n_days"})," - the number of days to find the find the date after. If 0, it returns the given\ndate if it's a business day. (default: 1)"]}),"\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.code,{children:"country"}),' - the country to use business days from (default: "US")']}),"\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.code,{children:"subdiv"}),' - the subdivision (e.g. state or province) to use business days from (default: "MA")']}),"\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.code,{children:"add_holidays"}),' - a dictionary from date strings ("12-25") to the name of the holiday,\nto add custom holidays to be considered']}),"\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.code,{children:"remove_holidays"})," - a list of holiday name strings of dates that are no longer holidays"]}),"\n"]}),"\n",(0,d.jsx)(e.h4,{id:"returns-3",children:"Returns"}),"\n",(0,d.jsx)(e.p,{children:"A DADateTime object representing the next business day."}),"\n",(0,d.jsxs)(e.p,{children:[(0,d.jsx)(e.strong,{children:"Examples"}),":"]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-python",children:'# Get the next business day after a Friday\nnext_day = get_next_business_day("2023-03-24")  # Friday\nprint(next_day)  # 2023-03-27 (Monday)\n\n# Get the first business day at least 5 days later\nlater_day = get_next_business_day("2023-03-20", wait_n_days=5)\nprint(later_day)  # First business day at least 5 days after March 20\n\n# Handle holidays - if the calculated day falls on a holiday,\n# it will automatically find the next business day\nholiday_next = get_next_business_day("2023-07-03")  # Day before July 4th\nprint(holiday_next)  # 2023-07-05 (skips July 4th holiday)\n\n# With custom holidays\ncustom_next = get_next_business_day(\n    "2023-03-16",\n    add_holidays=\\{"03-17": "Company Founding Day"\\}\n)\n# Will skip March 17th as it\'s now considered a holiday\n'})}),"\n",(0,d.jsx)("a",{id:"ALToolbox.business_days.get_date_after_n_business_days"}),"\n",(0,d.jsx)(e.h3,{id:"get_date_after_n_business_days",children:"get_date_after_n_business_days"}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-python",children:'def get_date_after_n_business_days(\n        start_date: Union[str, DADateTime],\n        wait_n_days=1,\n        country="US",\n        subdiv="MA",\n        add_holidays: Optional[Mapping] = None,\n        remove_holidays: Optional[Iterable[str]] = None) -> DADateTime\n'})}),"\n",(0,d.jsxs)(e.p,{children:["Returns a time period which contains a minimum of ",(0,d.jsx)(e.code,{children:"n"})," business days."]}),"\n",(0,d.jsx)(e.h4,{id:"arguments-4",children:"Arguments"}),"\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.code,{children:"start_date"}),' - the date to start with. Can be a date-formatted string (i.e. "2023-03-26", or\n"3-26-2023") or a DADateTime object']}),"\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.code,{children:"wait_n_days"})," - the number of businesses days to wait for. For example, ",(0,d.jsx)(e.code,{children:"start_date"})," is a\nFriday, and ",(0,d.jsx)(e.code,{children:"wait_n_days"})," is 2, then the date returned will be the next Tuesday. (default: 1)"]}),"\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.code,{children:"country"}),' - the country to use business days from (default: "US")']}),"\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.code,{children:"subdiv"}),' - the subdivision (e.g. state or province) to use business days from (default: "MA")']}),"\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.code,{children:"add_holidays"}),' - a dictionary from date strings ("12-25") to the name of the holiday,\nto add custom holidays to be considered']}),"\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.code,{children:"remove_holidays"})," - a list of holiday name strings of dates that are no longer holidays"]}),"\n"]}),"\n",(0,d.jsx)(e.h4,{id:"returns-4",children:"Returns"}),"\n",(0,d.jsx)(e.p,{children:"A DADateTime object representing the date after exactly n business days."}),"\n",(0,d.jsxs)(e.p,{children:[(0,d.jsx)(e.strong,{children:"Examples"}),":"]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-python",children:'# Get the date after exactly 5 business days\nstart_date = "2023-03-20"  # Monday\nresult_date = get_date_after_n_business_days(start_date, wait_n_days=5)\nprint(result_date)  # 2023-03-27 (Monday of next week)\n\n# Starting on a Friday, get date after 2 business days\nfriday_start = "2023-03-24"  # Friday\ntwo_days_later = get_date_after_n_business_days(friday_start, wait_n_days=2)\nprint(two_days_later)  # 2023-03-28 (Tuesday, skipping weekend)\n\n# Handle holidays automatically\nbefore_holiday = "2023-07-03"  # Monday before July 4th\nafter_three_days = get_date_after_n_business_days(before_holiday, wait_n_days=3)\nprint(after_three_days)  # 2023-07-07 (Friday, skipping July 4th holiday)\n\n# With custom holidays\ncustom_result = get_date_after_n_business_days(\n    "2023-03-15",\n    wait_n_days=3,\n    add_holidays=\\{"03-17": "Company Founding Day"\\}\n)\n# Will count 3 business days, skipping weekends and custom holiday\n'})})]})}function c(s={}){const{wrapper:e}={...(0,i.R)(),...s.components};return e?(0,d.jsx)(e,{...s,children:(0,d.jsx)(h,{...s})}):h(s)}},8453:(s,e,n)=>{n.d(e,{R:()=>t,x:()=>o});var a=n(6540);const d={},i=a.createContext(d);function t(s){const e=a.useContext(i);return a.useMemo(function(){return"function"==typeof s?s(e):{...e,...s}},[e,s])}function o(s){let e;return e=s.disableParentContext?"function"==typeof s.components?s.components(d):s.components||d:t(s.components),a.createElement(i.Provider,{value:e},s.children)}}}]);