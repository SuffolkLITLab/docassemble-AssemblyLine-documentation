"use strict";(self.webpackChunkdocassemble_assembly_line_documentation=self.webpackChunkdocassemble_assembly_line_documentation||[]).push([[1244],{3932:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"components/FormFyxer/lit_explorer","title":"formfyxer.lit_explorer","description":"* formfyxer.lit\\\\explorer","source":"@site/docs/components/FormFyxer/lit_explorer.md","sourceDirName":"components/FormFyxer","slug":"/components/FormFyxer/lit_explorer","permalink":"/docs/components/FormFyxer/lit_explorer","draft":false,"unlisted":false,"editUrl":"https://github.com/SuffolkLITLab/docassemble-AssemblyLine-documentation/edit/main/docs/components/FormFyxer/lit_explorer.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"ALDashboard.validate_docx","permalink":"/docs/components/ALDashboard/validate_docx"},"next":{"title":"formfyxer.docx_wrangling","permalink":"/docs/components/FormFyxer/docx_wrangling"}}');var i=s(4848),r=s(8453);const l={},a="formfyxer.lit_explorer",o={},d=[{value:"recursive_get_id",id:"recursive_get_id",level:3},{value:"spot",id:"spot",level:3},{value:"re_case",id:"re_case",level:3},{value:"regex_norm_field",id:"regex_norm_field",level:3},{value:"reformat_field",id:"reformat_field",level:3},{value:"normalize_name",id:"normalize_name",level:3},{value:"Arguments",id:"arguments",level:4},{value:"Returns",id:"returns",level:4},{value:"rename_pdf_fields_with_context",id:"rename_pdf_fields_with_context",level:3},{value:"Arguments",id:"arguments-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"cluster_screens",id:"cluster_screens",level:3},{value:"Arguments",id:"arguments-2",level:4},{value:"InputType Objects",id:"inputtype-objects",level:2},{value:"field_types_and_sizes",id:"field_types_and_sizes",level:3},{value:"AnswerType Objects",id:"answertype-objects",level:2},{value:"classify_field",id:"classify_field",level:3},{value:"get_adjusted_character_count",id:"get_adjusted_character_count",level:3},{value:"Arguments",id:"arguments-3",level:4},{value:"Returns",id:"returns-2",level:4},{value:"time_to_answer_field",id:"time_to_answer_field",level:3},{value:"time_to_answer_form",id:"time_to_answer_form",level:3},{value:"cleanup_text",id:"cleanup_text",level:3},{value:"text_complete",id:"text_complete",level:3},{value:"Arguments",id:"arguments-4",level:4},{value:"Returns",id:"returns-3",level:4},{value:"complete_with_command",id:"complete_with_command",level:3},{value:"needs_calculations",id:"needs_calculations",level:3},{value:"get_passive_sentences",id:"get_passive_sentences",level:3},{value:"Arguments",id:"arguments-5",level:4},{value:"Returns",id:"returns-4",level:4},{value:"Notes",id:"notes",level:4},{value:"get_citations",id:"get_citations",level:3},{value:"get_sensitive_data_types",id:"get_sensitive_data_types",level:3},{value:"substitute_phrases",id:"substitute_phrases",level:3},{value:"Arguments",id:"arguments-6",level:4},{value:"Returns",id:"returns-5",level:4},{value:"substitute_neutral_gender",id:"substitute_neutral_gender",level:3},{value:"substitute_plain_language",id:"substitute_plain_language",level:3},{value:"transformed_sentences",id:"transformed_sentences",level:3},{value:"fallback_rename_fields",id:"fallback_rename_fields",level:3},{value:"parse_form",id:"parse_form",level:3},{value:"Arguments",id:"arguments-7",level:4},{value:"form_complexity",id:"form_complexity",level:3}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"formfyxerlit_explorer",children:"formfyxer.lit_explorer"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#formfyxer.lit_explorer",children:"formfyxer.lit_explorer"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#formfyxer.lit_explorer.recursive_get_id",children:"recursive_get_id"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#formfyxer.lit_explorer.spot",children:"spot"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#formfyxer.lit_explorer.re_case",children:"re_case"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#formfyxer.lit_explorer.regex_norm_field",children:"regex_norm_field"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#formfyxer.lit_explorer.reformat_field",children:"reformat_field"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#formfyxer.lit_explorer.normalize_name",children:"normalize_name"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#formfyxer.lit_explorer.rename_pdf_fields_with_context",children:"rename_pdf_fields_with_context"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#formfyxer.lit_explorer.cluster_screens",children:"cluster_screens"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#formfyxer.lit_explorer.InputType",children:"InputType"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#formfyxer.lit_explorer.field_types_and_sizes",children:"field_types_and_sizes"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#formfyxer.lit_explorer.AnswerType",children:"AnswerType"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#formfyxer.lit_explorer.classify_field",children:"classify_field"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#formfyxer.lit_explorer.get_adjusted_character_count",children:"get_adjusted_character_count"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#formfyxer.lit_explorer.time_to_answer_field",children:"time_to_answer_field"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#formfyxer.lit_explorer.time_to_answer_form",children:"time_to_answer_form"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#formfyxer.lit_explorer.cleanup_text",children:"cleanup_text"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#formfyxer.lit_explorer.text_complete",children:"text_complete"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#formfyxer.lit_explorer.complete_with_command",children:"complete_with_command"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#formfyxer.lit_explorer.needs_calculations",children:"needs_calculations"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#formfyxer.lit_explorer.get_passive_sentences",children:"get_passive_sentences"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#formfyxer.lit_explorer.get_citations",children:"get_citations"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#formfyxer.lit_explorer.get_sensitive_data_types",children:"get_sensitive_data_types"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#formfyxer.lit_explorer.substitute_phrases",children:"substitute_phrases"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#formfyxer.lit_explorer.substitute_neutral_gender",children:"substitute_neutral_gender"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#formfyxer.lit_explorer.substitute_plain_language",children:"substitute_plain_language"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#formfyxer.lit_explorer.transformed_sentences",children:"transformed_sentences"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#formfyxer.lit_explorer.fallback_rename_fields",children:"fallback_rename_fields"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#formfyxer.lit_explorer.parse_form",children:"parse_form"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#formfyxer.lit_explorer.form_complexity",children:"form_complexity"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)("a",{id:"formfyxer.lit_explorer.recursive_get_id"}),"\n",(0,i.jsx)(n.h3,{id:"recursive_get_id",children:"recursive_get_id"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def recursive_get_id(values_to_unpack: Union[dict, list],\n                     tmpl: Optional[set] = None)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Pull ID values out of the LIST/NSMI results from Spot."}),"\n",(0,i.jsx)("a",{id:"formfyxer.lit_explorer.spot"}),"\n",(0,i.jsx)(n.h3,{id:"spot",children:"spot"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'def spot(text: str,\n         lower: float = 0.25,\n         pred: float = 0.5,\n         upper: float = 0.6,\n         verbose: float = 0,\n         token: str = "")\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Call the Spot API (",(0,i.jsx)(n.a,{href:"https://spot.suffolklitlab.org",children:"https://spot.suffolklitlab.org"}),") to classify the text of a PDF using\nthe NSMIv2/LIST taxonomy (",(0,i.jsx)(n.a,{href:"https://taxonomy.legal/",children:"https://taxonomy.legal/"}),"), but returns only the IDs of issues found in the text."]}),"\n",(0,i.jsx)("a",{id:"formfyxer.lit_explorer.re_case"}),"\n",(0,i.jsx)(n.h3,{id:"re_case",children:"re_case"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def re_case(text: str) -> str\n"})}),"\n",(0,i.jsx)(n.p,{children:"Capture PascalCase, snake_case and kebab-case terms and add spaces to separate the joined words"}),"\n",(0,i.jsx)("a",{id:"formfyxer.lit_explorer.regex_norm_field"}),"\n",(0,i.jsx)(n.h3,{id:"regex_norm_field",children:"regex_norm_field"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def regex_norm_field(text: str)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Apply some heuristics to a field name to see if we can get it to match AssemblyLine conventions.\nSee: ",(0,i.jsx)(n.a,{href:"https://suffolklitlab.org/docassemble-AssemblyLine-documentation/docs/document_variables",children:"https://suffolklitlab.org/docassemble-AssemblyLine-documentation/docs/document_variables"})]}),"\n",(0,i.jsx)("a",{id:"formfyxer.lit_explorer.reformat_field"}),"\n",(0,i.jsx)(n.h3,{id:"reformat_field",children:"reformat_field"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def reformat_field(text: str,\n                   max_length: int = 30,\n                   tools_token: Optional[str] = None)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Generate a snake_case label from ",(0,i.jsx)(n.code,{children:"text"})," without external similarity scoring."]}),"\n",(0,i.jsx)("a",{id:"formfyxer.lit_explorer.normalize_name"}),"\n",(0,i.jsx)(n.h3,{id:"normalize_name",children:"normalize_name"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'def normalize_name(jur: str,\n                   group: str,\n                   n: int,\n                   per,\n                   last_field: str,\n                   this_field: str,\n                   tools_token: Optional[str] = None,\n                   context: Optional[str] = None,\n                   openai_creds: Optional[OpenAiCreds] = None,\n                   api_key: Optional[str] = None,\n                   model: str = "gpt-5-nano") -> Tuple[str, float]\n'})}),"\n",(0,i.jsx)(n.p,{children:"Normalize a field name, if possible to the Assembly Line conventions, and if\nnot, to a snake_case variable name of appropriate length."}),"\n",(0,i.jsxs)(n.p,{children:["In most cases, you should use the better performing ",(0,i.jsx)(n.code,{children:"rename_pdf_fields_with_context"})," function,\nwhich renames all fields in one prompt to an LLM."]}),"\n",(0,i.jsx)(n.h4,{id:"arguments",children:"Arguments"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"jur"})," - Jurisdiction (legacy parameter, maintained for compatibility)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"group"})," - Group/category (legacy parameter, maintained for compatibility)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"n"})," - Position in field list (legacy parameter, maintained for compatibility)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"per"})," - Percentage through field list (legacy parameter, maintained for compatibility)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"last_field"})," - Previous field name (legacy parameter, maintained for compatibility)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"this_field"})," - The field name to normalize"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"tools_token"})," - Tools API token (legacy parameter, maintained for compatibility)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"context"})," - Optional PDF text context to help with field naming"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"openai_creds"})," - OpenAI credentials for LLM calls"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"api_key"})," - OpenAI API key (overrides creds and env vars)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"model"})," - OpenAI model to use (default: gpt-5-nano)"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"returns",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"Tuple of (normalized_field_name, confidence_score)"}),"\n",(0,i.jsx)(n.p,{children:"If context and LLM credentials are provided, uses LLM normalization.\nOtherwise, falls back to traditional regex-based approach for backward compatibility."}),"\n",(0,i.jsx)("a",{id:"formfyxer.lit_explorer.rename_pdf_fields_with_context"}),"\n",(0,i.jsx)(n.h3,{id:"rename_pdf_fields_with_context",children:"rename_pdf_fields_with_context"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'def rename_pdf_fields_with_context(\n        pdf_path: str,\n        original_field_names: List[str],\n        openai_creds: Optional[OpenAiCreds] = None,\n        api_key: Optional[str] = None,\n        model: str = "gpt-5-nano") -> Dict[str, str]\n'})}),"\n",(0,i.jsx)(n.p,{children:"Use LLM to rename PDF fields based on full PDF context with field markers."}),"\n",(0,i.jsx)(n.h4,{id:"arguments-1",children:"Arguments"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"pdf_path"})," - Path to the PDF file"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"original_field_names"})," - List of original field names from the PDF"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"openai_creds"})," - OpenAI credentials to use for the API call"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"api_key"})," - explicit API key to use (overrides creds and env vars)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"model"})," - the OpenAI model to use (default: gpt-5-nano)"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"returns-1",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"Dictionary mapping original field names to new Assembly Line names"}),"\n",(0,i.jsx)("a",{id:"formfyxer.lit_explorer.cluster_screens"}),"\n",(0,i.jsx)(n.h3,{id:"cluster_screens",children:"cluster_screens"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'def cluster_screens(fields: List[str] = [],\n                    openai_creds: Optional[OpenAiCreds] = None,\n                    api_key: Optional[str] = None,\n                    model: str = "gpt-5-nano",\n                    damping: Optional[float] = None,\n                    tools_token: Optional[str] = None) -> Dict[str, List[str]]\n'})}),"\n",(0,i.jsx)(n.p,{children:"Groups the given fields into screens using an LLM (GPT) for semantic understanding."}),"\n",(0,i.jsx)(n.h4,{id:"arguments-2",children:"Arguments"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"fields"})," - a list of field names"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"openai_creds"})," - OpenAI credentials to use for the API call"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"api_key"})," - explicit API key to use (overrides creds and env vars)"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"model"})," - the OpenAI model to use (default: gpt-5-nano, can use gpt-4 variants)"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"damping"})," - deprecated parameter, kept for backward compatibility"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"tools_token"})," - deprecated parameter, kept for backward compatibility"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Returns"})," - a suggested screen grouping, each screen name mapped to the list of fields on it"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)("a",{id:"formfyxer.lit_explorer.InputType"}),"\n",(0,i.jsx)(n.h2,{id:"inputtype-objects",children:"InputType Objects"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class InputType(Enum)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Input type maps onto the type of input the PDF author chose for the field. We only\nhandle text, checkbox, and signature fields."}),"\n",(0,i.jsx)("a",{id:"formfyxer.lit_explorer.field_types_and_sizes"}),"\n",(0,i.jsx)(n.h3,{id:"field_types_and_sizes",children:"field_types_and_sizes"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def field_types_and_sizes(\n        fields: Optional[Iterable[FormField]]) -> List[FieldInfo]\n"})}),"\n",(0,i.jsx)(n.p,{children:'Transform the fields provided by get_existing_pdf_fields into a summary format.\nResult will look like:\n[\n{\n"var_name": var_name,\n"type": "text | checkbox | signature",\n"max_length": n\n}\n]'}),"\n",(0,i.jsx)("a",{id:"formfyxer.lit_explorer.AnswerType"}),"\n",(0,i.jsx)(n.h2,{id:"answertype-objects",children:"AnswerType Objects"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class AnswerType(Enum)\n"})}),"\n",(0,i.jsx)(n.p,{children:'Answer type describes the effort the user answering the form will require.\n"Slot-in" answers are a matter of almost instantaneous recall, e.g., name, address, etc.\n"Gathered" answers require looking around one\'s desk, for e.g., a health insurance number.\n"Third party" answers require picking up the phone to call someone else who is the keeper\nof the information.\n"Created" answers don\'t exist before the user is presented with the question. They may include\na choice, creating a narrative, or even applying legal reasoning. "Affidavits" are a special\nform of created answers.\nSee Jarret and Gaffney, Forms That Work (2008)'}),"\n",(0,i.jsx)("a",{id:"formfyxer.lit_explorer.classify_field"}),"\n",(0,i.jsx)(n.h3,{id:"classify_field",children:"classify_field"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def classify_field(field: FieldInfo, new_name: str) -> AnswerType\n"})}),"\n",(0,i.jsx)(n.p,{children:'Apply heuristics to the field\'s original and "normalized" name to classify\nit as either a "slot-in", "gathered", "third party" or "created" field type.'}),"\n",(0,i.jsx)("a",{id:"formfyxer.lit_explorer.get_adjusted_character_count"}),"\n",(0,i.jsx)(n.h3,{id:"get_adjusted_character_count",children:"get_adjusted_character_count"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def get_adjusted_character_count(field: FieldInfo) -> float\n"})}),"\n",(0,i.jsx)(n.p,{children:"Determines the bracketed length of an input field based on its max_length attribute,\nreturning a float representing the approximate length of the field content."}),"\n",(0,i.jsx)(n.p,{children:"The function chunks the answers into 5 different lengths (checkboxes, 2 words, short, medium, and long)\ninstead of directly using the character count, as forms can allocate different spaces\nfor the same data without considering the space the user actually needs."}),"\n",(0,i.jsx)(n.h4,{id:"arguments-3",children:"Arguments"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"field"})," ",(0,i.jsx)(n.em,{children:"FieldInfo"}),' - An object containing information about the input field,\nincluding the "max_length" attribute.']}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"returns-2",children:"Returns"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"float"})," - The approximate length of the field content, categorized into checkboxes, 2 words, short,\nmedium, or long based on the max_length attribute."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Examples"}),":"]}),"\n",(0,i.jsx)(n.p,{children:'>>> get_adjusted_character_count({"type"}: InputType.CHECKBOX)\n4.7\n>>> get_adjusted_character_count({"max_length": 100})\n9.4\n>>> get_adjusted_character_count({"max_length": 300})\n230\n>>> get_adjusted_character_count({"max_length": 600})\n115\n>>> get_adjusted_character_count({"max_length": 1200})\n1150'}),"\n",(0,i.jsx)("a",{id:"formfyxer.lit_explorer.time_to_answer_field"}),"\n",(0,i.jsx)(n.h3,{id:"time_to_answer_field",children:"time_to_answer_field"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def time_to_answer_field(field: FieldInfo,\n                         new_name: str,\n                         cpm: int = 40,\n                         cpm_std_dev: int = 17) -> Callable[[int], np.ndarray]\n"})}),"\n",(0,i.jsx)(n.p,{children:"Apply a heuristic for the time it takes to answer the given field, in minutes.\nIt is hand-written for now.\nIt will factor in the input type, the answer type (slot in, gathered, third party or created), and the\namount of input text allowed in the field.\nThe return value is a function that can return N samples of how long it will take to answer the field (in minutes)"}),"\n",(0,i.jsx)("a",{id:"formfyxer.lit_explorer.time_to_answer_form"}),"\n",(0,i.jsx)(n.h3,{id:"time_to_answer_form",children:"time_to_answer_form"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def time_to_answer_form(processed_fields,\n                        normalized_fields) -> Tuple[float, float]\n"})}),"\n",(0,i.jsx)(n.p,{children:"Provide an estimate of how long it would take an average user to respond to the questions\non the provided form.\nWe use signals such as the field type, name, and space provided for the response to come up with a\nrough estimate, based on whether the field is:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"fill in the blank"}),"\n",(0,i.jsx)(n.li,{children:"gathered - e.g., an id number, case number, etc."}),"\n",(0,i.jsx)(n.li,{children:"third party: need to actually ask someone the information - e.g., income of not the user, anything else?"}),"\n",(0,i.jsx)(n.li,{children:"created:\na. short created (3 lines or so?)\nb. long created (anything over 3 lines)"}),"\n"]}),"\n",(0,i.jsx)("a",{id:"formfyxer.lit_explorer.cleanup_text"}),"\n",(0,i.jsx)(n.h3,{id:"cleanup_text",children:"cleanup_text"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def cleanup_text(text: str, fields_to_sentences: bool = False) -> str\n"})}),"\n",(0,i.jsx)(n.p,{children:"Apply cleanup routines to text to provide more accurate readability statistics."}),"\n",(0,i.jsx)("a",{id:"formfyxer.lit_explorer.text_complete"}),"\n",(0,i.jsx)(n.h3,{id:"text_complete",children:"text_complete"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'def text_complete(system_message: str,\n                  user_message: Optional[str] = None,\n                  max_tokens: int = 500,\n                  creds: Optional[OpenAiCreds] = None,\n                  temperature: float = 0,\n                  api_key: Optional[str] = None,\n                  model: str = "gpt-5-nano",\n                  prompt: Optional[str] = None) -> Union[str, Dict]\n'})}),"\n",(0,i.jsx)(n.p,{children:"Run a prompt via openAI's API and return the result."}),"\n",(0,i.jsx)(n.h4,{id:"arguments-4",children:"Arguments"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"system_message"})," ",(0,i.jsx)(n.em,{children:"str"})," - The system message that sets the context/role for the AI."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"user_message"})," ",(0,i.jsx)(n.em,{children:"Optional[str]"})," - The user message/question. If None, system_message is used as the prompt."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"max_tokens"})," ",(0,i.jsx)(n.em,{children:"int, optional"})," - The number of tokens to generate. Defaults to 500."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"creds"})," ",(0,i.jsx)(n.em,{children:"Optional[OpenAiCreds], optional"})," - The credentials to use. Defaults to None."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"temperature"})," ",(0,i.jsx)(n.em,{children:"float, optional"})," - The temperature to use. Defaults to 0. Note: Not supported by GPT-5 family models."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"api_key"})," ",(0,i.jsx)(n.em,{children:"Optional[str], optional"})," - Explicit API key to use. Defaults to None."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"model"})," ",(0,i.jsx)(n.em,{children:"str, optional"}),' - The model to use. Defaults to "gpt-5-nano".']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"prompt"})," ",(0,i.jsx)(n.em,{children:"Optional[str]"})," - Legacy parameter for backward compatibility. If provided, used as system message."]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"returns-3",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"Union[str, Dict]: Returns a parsed dictionary if JSON was requested and successfully parsed,\notherwise returns the raw string response."}),"\n",(0,i.jsx)("a",{id:"formfyxer.lit_explorer.complete_with_command"}),"\n",(0,i.jsx)(n.h3,{id:"complete_with_command",children:"complete_with_command"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def complete_with_command(text,\n                          command,\n                          tokens,\n                          creds: Optional[OpenAiCreds] = None,\n                          api_key: Optional[str] = None,\n                          model: Optional[str] = None) -> str\n"})}),"\n",(0,i.jsx)(n.p,{children:"Combines some text with a command to send to open ai."}),"\n",(0,i.jsx)("a",{id:"formfyxer.lit_explorer.needs_calculations"}),"\n",(0,i.jsx)(n.h3,{id:"needs_calculations",children:"needs_calculations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def needs_calculations(text: str) -> bool\n"})}),"\n",(0,i.jsx)(n.p,{children:"A conservative guess at if a given form needs the filler to make math calculations,\nsomething that should be avoided. If"}),"\n",(0,i.jsx)("a",{id:"formfyxer.lit_explorer.get_passive_sentences"}),"\n",(0,i.jsx)(n.h3,{id:"get_passive_sentences",children:"get_passive_sentences"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'def get_passive_sentences(\n        text: Union[List, str],\n        tools_token: Optional[str] = None,\n        model: str = "gpt-5-nano",\n        api_key: Optional[str] = None\n) -> List[Tuple[str, List[Tuple[int, int]]]]\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Return passive voice fragments for each sentence in ",(0,i.jsx)(n.code,{children:"text"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["The function relies on OpenAI's language model (via ",(0,i.jsx)(n.code,{children:"passive_voice_detection"}),")\nto detect passive constructions. ",(0,i.jsx)(n.code,{children:"tools_token"})," is kept for backward compatibility\nbut is no longer used."]}),"\n",(0,i.jsx)(n.h4,{id:"arguments-5",children:"Arguments"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"text"})," ",(0,i.jsx)(n.em,{children:"Union[List, str]"})," - The input text or list of texts to analyze."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"tools_token"})," ",(0,i.jsx)(n.em,{children:"Optional[str], optional"})," - Deprecated. Previously used for authentication with\ntools.suffolklitlab.org. Defaults to None."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"model"})," ",(0,i.jsx)(n.em,{children:"str, optional"}),' - The OpenAI model to use for detection. Defaults to "gpt-5-nano".']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"api_key"})," ",(0,i.jsx)(n.em,{children:"Optional[str], optional"})," - OpenAI API key to use. If None, will try docassemble\nconfig (if available) then environment variables. Defaults to None."]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"returns-4",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"List[Tuple[str, List[Tuple[int, int]]]]: A list of tuples, each containing the original text\nand a list of tuples representing the start and end positions of detected passive voice fragments."}),"\n",(0,i.jsx)(n.h4,{id:"notes",children:"Notes"}),"\n",(0,i.jsx)(n.p,{children:"At least for now, the fragment detection is no longer meaningful (except in tokenized sentences) because\nthe LLM detection simply returns the full original sentence if it contains passive voice. We have not reimplemented\nthis behavior of PassivePy."}),"\n",(0,i.jsx)("a",{id:"formfyxer.lit_explorer.get_citations"}),"\n",(0,i.jsx)(n.h3,{id:"get_citations",children:"get_citations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def get_citations(text: str, tokenized_sentences: List[str]) -> List[str]\n"})}),"\n",(0,i.jsx)(n.p,{children:"Get citations and some extra surrounding context (the full sentence), if the citation is\nfewer than 5 characters (often eyecite only captures a section symbol\nfor state-level short citation formats)"}),"\n",(0,i.jsx)("a",{id:"formfyxer.lit_explorer.get_sensitive_data_types"}),"\n",(0,i.jsx)(n.h3,{id:"get_sensitive_data_types",children:"get_sensitive_data_types"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def get_sensitive_data_types(\n        fields: List[str],\n        fields_old: Optional[List[str]] = None) -> Dict[str, List[str]]\n"})}),"\n",(0,i.jsx)(n.p,{children:"Given a list of fields, identify those related to sensitive information and return a dictionary with the sensitive\nfields grouped by type. A list of the old field names can also be provided. These fields should be in the same\norder. Passing the old field names allows the sensitive field algorithm to match more accurately. The return value\nwill not contain the old field name, only the corresponding field name from the first parameter."}),"\n",(0,i.jsx)(n.p,{children:"The sensitive data types are: Bank Account Number, Credit Card Number, Driver's License Number, and Social Security\nNumber."}),"\n",(0,i.jsx)("a",{id:"formfyxer.lit_explorer.substitute_phrases"}),"\n",(0,i.jsx)(n.h3,{id:"substitute_phrases",children:"substitute_phrases"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def substitute_phrases(\n        input_string: str,\n        substitution_phrases: Dict[str,\n                                   str]) -> Tuple[str, List[Tuple[int, int]]]\n"})}),"\n",(0,i.jsx)(n.p,{children:"Substitute phrases in the input string and return the new string and positions of substituted phrases."}),"\n",(0,i.jsx)(n.h4,{id:"arguments-6",children:"Arguments"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"input_string"})," ",(0,i.jsx)(n.em,{children:"str"})," - The input string containing phrases to be replaced."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"substitution_phrases"})," ",(0,i.jsx)(n.em,{children:"Dict[str, str]"})," - A dictionary mapping original phrases to their replacement phrases."]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"returns-5",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"Tuple[str, List[Tuple[int, int]]]: A tuple containing the new string with substituted phrases and a list of\ntuples, each containing the start and end positions of the substituted\nphrases in the new string."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(n.p,{children:'>>> input_string = "The quick brown fox jumped over the lazy dog."\n>>> substitution_phrases = {"quick brown": "swift reddish", "lazy dog": "sleepy canine"}\n>>> new_string, positions = substitute_phrases(input_string, substitution_phrases)\n>>> print(new_string)\n"The swift reddish fox jumped over the sleepy canine."\n>>> print(positions)\n[(4, 17), (35, 48)]'}),"\n",(0,i.jsx)("a",{id:"formfyxer.lit_explorer.substitute_neutral_gender"}),"\n",(0,i.jsx)(n.h3,{id:"substitute_neutral_gender",children:"substitute_neutral_gender"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def substitute_neutral_gender(\n        input_string: str) -> Tuple[str, List[Tuple[int, int]]]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Substitute gendered phrases with neutral phrases in the input string.\nPrimary source is ",(0,i.jsx)(n.a,{href:"https://github.com/joelparkerhenderson/inclusive-language",children:"https://github.com/joelparkerhenderson/inclusive-language"})]}),"\n",(0,i.jsx)("a",{id:"formfyxer.lit_explorer.substitute_plain_language"}),"\n",(0,i.jsx)(n.h3,{id:"substitute_plain_language",children:"substitute_plain_language"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def substitute_plain_language(\n        input_string: str) -> Tuple[str, List[Tuple[int, int]]]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Substitute complex phrases with simpler alternatives.\nSource of terms is drawn from ",(0,i.jsx)(n.a,{href:"https://www.plainlanguage.gov/guidelines/words/",children:"https://www.plainlanguage.gov/guidelines/words/"})]}),"\n",(0,i.jsx)("a",{id:"formfyxer.lit_explorer.transformed_sentences"}),"\n",(0,i.jsx)(n.h3,{id:"transformed_sentences",children:"transformed_sentences"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def transformed_sentences(\n        sentence_list: List[str],\n        fun: Callable) -> List[Tuple[str, str, List[Tuple[int, int]]]]\n"})}),"\n",(0,i.jsx)(n.p,{children:"Apply a function to a list of sentences and return only the sentences with changed terms.\nThe result is a tuple of the original sentence, new sentence, and the starting and ending position\nof each changed fragment in the sentence."}),"\n",(0,i.jsx)("a",{id:"formfyxer.lit_explorer.fallback_rename_fields"}),"\n",(0,i.jsx)(n.h3,{id:"fallback_rename_fields",children:"fallback_rename_fields"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def fallback_rename_fields(\n        field_names: List[str]) -> Tuple[List[str], List[float]]\n"})}),"\n",(0,i.jsx)(n.p,{children:"A simple fallback renaming scheme that just makes field names lowercase\nand replaces spaces with underscores."}),"\n",(0,i.jsx)("a",{id:"formfyxer.lit_explorer.parse_form"}),"\n",(0,i.jsx)(n.h3,{id:"parse_form",children:"parse_form"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def parse_form(in_file: str,\n               title: Optional[str] = None,\n               jur: Optional[str] = None,\n               cat: Optional[str] = None,\n               normalize: bool = True,\n               spot_token: Optional[str] = None,\n               tools_token: Optional[str] = None,\n               openai_creds: Optional[OpenAiCreds] = None,\n               openai_api_key: Optional[str] = None,\n               rewrite: bool = False,\n               debug: bool = False)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Read in a pdf, pull out basic stats, attempt to normalize its form fields, and re-write the\nin_file with the new fields (if ",(0,i.jsx)(n.code,{children:"rewrite=1"}),"). If you pass a spot token, we will guess the\nNSMI code. If you pass openai creds, we will give suggestions for the title and description.\nIf you pass openai_api_key, it will be used for passive voice detection (overrides creds and env vars)."]}),"\n",(0,i.jsx)(n.h4,{id:"arguments-7",children:"Arguments"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"in_file"})," - the path to the PDF file to analyze"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"title"})," - the title of the form, if not provided we will try to guess it"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"jur"}),' - the jurisdiction to use for normalization (e.g., "ny" or "ca")']}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"cat"}),' - the category to use for normalization (e.g., "divorce" or "small_claims")']}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"normalize"})," - whether to normalize the field names"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"spot_token"})," - the token to use for spot.suffolklitlab.org, if provided we will\nattempt to guess the NSMI code"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"tools_token"})," - the token to use for tools.suffolklitlab.org, needed for normalization"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"openai_creds"})," - the OpenAI credentials to use, if provided we will attempt to\nguess the title and description"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"openai_api_key"})," - an explicit OpenAI API key to use, if provided it will override\nany creds or environment variables"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"rewrite"})," - whether to rewrite the PDF in place with the new field names"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"debug"})," - whether to print debug information"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Returns"})," - a dictionary of information about the form"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)("a",{id:"formfyxer.lit_explorer.form_complexity"}),"\n",(0,i.jsx)(n.h3,{id:"form_complexity",children:"form_complexity"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def form_complexity(stats)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Gets a single number of how hard the form is to complete. Higher is harder."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>a});var t=s(6540);const i={},r=t.createContext(i);function l(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);