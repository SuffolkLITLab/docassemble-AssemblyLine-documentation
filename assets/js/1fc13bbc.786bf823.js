"use strict";(self.webpackChunkdocassemble_assembly_line_documentation=self.webpackChunkdocassemble_assembly_line_documentation||[]).push([[548],{4137:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var r=a.createContext({}),d=function(e){var t=a.useContext(r),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=d(e.components);return a.createElement(r.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,r=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=d(n),c=i,h=u["".concat(r,".").concat(c)]||u[c]||p[c]||l;return n?a.createElement(h,o(o({ref:t},m),{},{components:n})):a.createElement(h,o({ref:t},m))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,o=new Array(l);o[0]=c;var s={};for(var r in t)hasOwnProperty.call(t,r)&&(s[r]=t[r]);s.originalType=e,s[u]="string"==typeof e?e:i,o[1]=s;for(var d=2;d<l;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},5743:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>d});var a=n(7462),i=(n(7294),n(4137));const l={id:"aldocument",title:"ALDocument: Python Classes to simplify working with multiple templates\n",sidebar_label:"ALDocument: Python Classes to simplify working with multiple templates\n",slug:"/framework/aldocument"},o=void 0,s={unversionedId:"framework/aldocument",id:"framework/aldocument",title:"ALDocument: Python Classes to simplify working with multiple templates\n",description:"Overview",source:"@site/docs/framework/aldocument.md",sourceDirName:"framework",slug:"/framework/aldocument",permalink:"/docassemble-AssemblyLine-documentation/docs/framework/aldocument",draft:!1,editUrl:"https://github.com/SuffolkLITLab/docassemble-AssemblyLine-documentation/edit/main/docs/framework/aldocument.md",tags:[],version:"current",frontMatter:{id:"aldocument",title:"ALDocument: Python Classes to simplify working with multiple templates\n",sidebar_label:"ALDocument: Python Classes to simplify working with multiple templates\n",slug:"/framework/aldocument"},sidebar:"mainSidebar",previous:{title:"ALGeneral: Python Classes representing people\n",permalink:"/docassemble-AssemblyLine-documentation/docs/framework/algeneral"},next:{title:"ALToolbox functions and components",permalink:"/docassemble-AssemblyLine-documentation/docs/framework/altoolbox"}},r={},d=[{value:"Overview",id:"overview",level:2},{value:"ALDocument class",id:"aldocument-class",level:2},{value:"Enabled Example",id:"enabled-example",level:3},{value:"ALDocumentBundle class",id:"aldocumentbundle-class",level:2},{value:"Using the <code>download_list_html()</code> method",id:"using-the-download_list_html-method",level:3},{value:"Using the <code>send_button_html()</code> method",id:"using-the-send_button_html-method",level:3},{value:"Working with overflow text, ALAddendumField and ALAddendumFieldDict",id:"working-with-overflow-text-aladdendumfield-and-aladdendumfielddict",level:2},{value:"Overview",id:"overview-1",level:3},{value:"Assumptions and changes to whitespace",id:"assumptions-and-changes-to-whitespace",level:3},{value:"Example",id:"example",level:3},{value:"Custom parameters for the addendum code",id:"custom-parameters-for-the-addendum-code",level:3},{value:"Handling uploaded documents",id:"handling-uploaded-documents",level:2},{value:"Choosing the right file upload method",id:"choosing-the-right-file-upload-method",level:3},{value:"Using a simple file field",id:"using-a-simple-file-field",level:3},{value:"Handling basic file attachments with the ALDocumentUpload class",id:"handling-basic-file-attachments-with-the-aldocumentupload-class",level:3},{value:"Using the full power of ALExhibitDocument",id:"using-the-full-power-of-alexhibitdocument",level:3},{value:"Customizing Exhibits",id:"customizing-exhibits",level:3},{value:"Using advanced OCR settings",id:"using-advanced-ocr-settings",level:3},{value:"Installing OCRMyPDF",id:"installing-ocrmypdf",level:4},{value:"Setting OCRMyPDF as the default OCR engine in AssemblyLine interviews",id:"setting-ocrmypdf-as-the-default-ocr-engine-in-assemblyline-interviews",level:4},{value:"ALStaticDocument",id:"alstaticdocument",level:2},{value:"Creating XLSX files with ALTableDocument",id:"creating-xlsx-files-with-altabledocument",level:2},{value:"ALUntransformedDocument",id:"aluntransformeddocument",level:2}],m={toc:d};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"overview"},"Overview"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"ALDocument")," class was created to solve these problems in Docassemble interviews:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"handling apps that can assemble multiple forms, with the final list of forms\ndepending on the answers that the user gives"),(0,i.kt)("li",{parentName:"ol"},'handling a way to display a "preview" and "final" version of a document with\nand without a signature (to allow the user to confirm information before\nsigning)'),(0,i.kt)("li",{parentName:"ol"},"handling text in PDF templates that doesn't fit and needs to be sent to an addendum")),(0,i.kt)("p",null,"This collection of classes has some other nice benefits:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"a compact, neat and easily customizable list of downloads at the end, with\nboth ",(0,i.kt)("inlineCode",{parentName:"li"},"view")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"download")," buttons"),(0,i.kt)("li",{parentName:"ol"},"a more customizable email-sending input than the stock Docassemble input that\ncan be displayed on the final screen"),(0,i.kt)("li",{parentName:"ol"},"always-fresh documents that will be updated when the user changes or edits a\nresponse"),(0,i.kt)("li",{parentName:"ol"},"a helper class and model questions to allow the user to upload evidence,\nincluding generating a table of contents and adding exhibit cover pages"),(0,i.kt)("li",{parentName:"ol"},"helper classes to include not just templates but static documents and tables\nin XLSX format as download options")),(0,i.kt)("p",null,"The primary classes that developers interact with are the ",(0,i.kt)("inlineCode",{parentName:"p"},"ALDocument")," class,\nwhich represents a template that is filled in with the user's answers during the\ncourse of the interview, and the ",(0,i.kt)("inlineCode",{parentName:"p"},"ALDocumentBundle")," class, which provides a way\nto group documents together to be emailed, downloaded, or delivered to a court\nor opposing party."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ALDocumentBundle")," objects can be nested to allow you to group multiple individual\ntemplate files into one document that the user can download."),(0,i.kt)("p",null,"Both ",(0,i.kt)("inlineCode",{parentName:"p"},"ALDocument")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"ALDocumentBundle")," objects can be either ",(0,i.kt)("inlineCode",{parentName:"p"},"enabled")," or not.\nThe Docassemble interview will seek logic that defines when the document should\nbe included in the final output, letting you easily create interviews that have\ncontingent documents."),(0,i.kt)("h2",{id:"aldocument-class"},"ALDocument class"),(0,i.kt)("p",null,"An ",(0,i.kt)("inlineCode",{parentName:"p"},"ALDocument")," is a\n",(0,i.kt)("a",{parentName:"p",href:"https://docassemble.org/docs/objects.html#DADict"},(0,i.kt)("inlineCode",{parentName:"a"},"DADict")),"  that has top level\nattributes and points to one or more Docassemble ",(0,i.kt)("a",{parentName:"p",href:"https://docassemble.org/docs/documents.html#attachment"},(0,i.kt)("inlineCode",{parentName:"a"},"attachment"),"\nblocks"),"."),(0,i.kt)("p",null,"There are usually exactly two keys in the dictionary: ",(0,i.kt)("inlineCode",{parentName:"p"},"preview")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"final"),",\nwith the only difference being the presence or absence of a signature. Conditional\nlogic inside the template or attachment block can be used to show or hide the signature\ndepending on the value of the ",(0,i.kt)("inlineCode",{parentName:"p"},"key")," so that the template does not need to be created\ntwice."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"signature_if_final")," method of an\n",(0,i.kt)("a",{parentName:"p",href:"algeneral#ALIndividual"},"ALIndividual")," was created to simplify this\ncommon use case."),(0,i.kt)("p",null,"Here's how to use an ALDocument:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Create ",(0,i.kt)("inlineCode",{parentName:"li"},"ALDocument")," objects in an objects block."),(0,i.kt)("li",{parentName:"ol"},"Set any required attributes, like ",(0,i.kt)("inlineCode",{parentName:"li"},"enabled"),", in the object block or in a\nseparate code block. If you set ",(0,i.kt)("inlineCode",{parentName:"li"},"enabled=True")," in the object block, your\ndocument will always be enabled."),(0,i.kt)("li",{parentName:"ol"},"Define the key of the ",(0,i.kt)("inlineCode",{parentName:"li"},"ALDocument")," in an ",(0,i.kt)("inlineCode",{parentName:"li"},"attachment")," block using the\n",(0,i.kt)("inlineCode",{parentName:"li"},"variable name")," modifier. Usually, use one attachment block and define the variable name\nlike this: ",(0,i.kt)("inlineCode",{parentName:"li"},"variable name: some_al_document[i]"),"."),(0,i.kt)("li",{parentName:"ol"},"Optionally, reference the ",(0,i.kt)("inlineCode",{parentName:"li"},"ALDocument")," inside an ",(0,i.kt)("inlineCode",{parentName:"li"},"ALDocumentBundle"),".")),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'---\nobjects:\n  - letter: ALDocument.using(title="Letter to Social Security", filename="ssa_letter", enabled=True, has_addendum=False)\n---\nattachment:\n  - pdf template file: ssa_letter.pdf\n    variable name: letter[i]\n    fields:\n      - "users1_name": ${ users[0] }\n      - "users1_signature": ${ users[0].signature_if_final(i) }\n')),(0,i.kt)("h3",{id:"enabled-example"},"Enabled Example"),(0,i.kt)("p",null,"If other variables in your interview determine if your document is\n",(0,i.kt)("inlineCode",{parentName:"p"},"enabled"),", you should define the ",(0,i.kt)("inlineCode",{parentName:"p"},"enabled")," attribute in a code block, like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'---\nobjects:\n  - main_document: ALDocument.using(title="Letter to Social Security", filename="main_document", enabled=True, has_addendum=False)\n  - insurance_rider: ALDocument.using(title="Letter to Social Security", filename="rider", has_addendum=False)\n---\nattachments:\n  - pdf template file: main_document.pdf\n    variable name: main_document[i]\n    fields:\n      - "users1_name": ${ users[0] }\n      - "users1_signature": ${ users[0].signature_if_final(i) }\n  - pdf template file: rider.pdf\n    variable name: rider[i]\n    fields:\n      - "users1_name": ${ users[0] }\n      - "users1_signature": ${ users[0].signature_if_final(i) }\n---\ncode: |\n  if total_cost > 1000:\n    insurance_rider.enabled = True\n  else:\n    insurance_rider.enabled = False\n  # or more concise but slightly harder to read:\n  # insurance_rider.enabled = total_cost > 1000\n')),(0,i.kt)("p",null,"In the example above, the ",(0,i.kt)("inlineCode",{parentName:"p"},"insurance_rider")," document is only included in any bundles if the\ntotal cost of the project is over $1,000. Note that the ",(0,i.kt)("inlineCode",{parentName:"p"},"enabled")," value is global for the\ninterview session. If you want to use different logic in different bundles, you can easily\ncreate a separate ",(0,i.kt)("inlineCode",{parentName:"p"},"ALDocument")," that references the same template file and attachment block."),(0,i.kt)("p",null,"Attributes:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"filename"),": the ",(0,i.kt)("strong",{parentName:"li"},"display")," filename used for the document when it is downloaded"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"title"),": the title shown on the download screen"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"enabled"),': whether the document should be "turned on" when it is referenced in an ',(0,i.kt)("inlineCode",{parentName:"li"},"ALDocumentBundle")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"addendum"),": points to a variable representing an ",(0,i.kt)("inlineCode",{parentName:"li"},"attachment")," block with a\nformatted addendum. The Assembly Line provides a good default addendum\ntemplate that is flexible enough to work with many fields."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"overflow_fields"),": an ",(0,i.kt)("inlineCode",{parentName:"li"},"ALAddendumFieldDict")," with each representing a field\nthat has potential to be sent to the addendum if exceeds a pre-set length."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"has_addendum"),": set this to True or False to control whether the\n",(0,i.kt)("inlineCode",{parentName:"li"},"overflow_fields")," dictionary will be checked to decide whether or not to\ngenerate an addendum file. Optional; defaults to ",(0,i.kt)("inlineCode",{parentName:"li"},"False"),".")),(0,i.kt)("p",null,"Methods:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"as_pdf(key:str='final', refresh:bool=True)"),": returns a PDF version of the\ncompleted template and any addendum. ",(0,i.kt)("inlineCode",{parentName:"li"},"key")," is normally ",(0,i.kt)("inlineCode",{parentName:"li"},"preview")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"final")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"as_docx(key:str='final', refresh:bool=True)"),": returns a DOCX version of the\ncompleted template and any addendum if the original is a DOCX template. ",(0,i.kt)("inlineCode",{parentName:"li"},"key"),"\nis normally ",(0,i.kt)("inlineCode",{parentName:"li"},"preview")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"final"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"as_list(key:str='final', refresh:bool=True)"),": returns a 1 or 2 item list\nwhich contains the template and its addendum, if any."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"need_addendum()"),": returns ",(0,i.kt)("inlineCode",{parentName:"li"},"True")," if the addendum exists and there are\noverflow fields."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"has_overflow()"),": returns ",(0,i.kt)("inlineCode",{parentName:"li"},"True")," if there are fields that trigger the\naddendum."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"overflow()"),": returns a list of just the fields that triggered the addendum."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"safe_value(field_name:str, overflow_message:str=None, preserve_newlines:bool=False, input_width:int=80)"),':\nreturns the "safe" value\nof ',(0,i.kt)("inlineCode",{parentName:"li"},"field_name")," (the amount that is less than ",(0,i.kt)("inlineCode",{parentName:"li"},"overflow_trigger"),") plus an\noverflow message. Used in an attachment block."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"overflow_value(field_name:str, overflow_message:str=None, preserve_newlines:bool=False, input_width:int=80)"),':\nreturns the "unsafe" value of ',(0,i.kt)("inlineCode",{parentName:"li"},"field_name"),"--the amount that exceeds the ",(0,i.kt)("inlineCode",{parentName:"li"},"overflow_trigger"),". Potentially used\ninside an addendum document.")),(0,i.kt)("h2",{id:"aldocumentbundle-class"},"ALDocumentBundle class"),(0,i.kt)("p",null,"An ",(0,i.kt)("inlineCode",{parentName:"p"},"ALDocumentBundle")," is a\n",(0,i.kt)("a",{parentName:"p",href:"https://docassemble.org/docs/objects.html#DAList"},(0,i.kt)("inlineCode",{parentName:"a"},"DAList"))," that provides\ndevelopers a way to conveniently group documents and treat them as a single set,\neven if the exact list of documents might change depending on the user's\nanswers."),(0,i.kt)("p",null,"Here's how to use an ",(0,i.kt)("inlineCode",{parentName:"p"},"ALDocumentBundle"),":"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Create the ",(0,i.kt)("inlineCode",{parentName:"li"},"ALDocumentBundle")," in an ",(0,i.kt)("inlineCode",{parentName:"li"},"objects")," block."),(0,i.kt)("li",{parentName:"ol"},"Add each ",(0,i.kt)("inlineCode",{parentName:"li"},"ALDocument")," or nested ",(0,i.kt)("inlineCode",{parentName:"li"},"ALDocumentBundle")," that your interview will\nsometimes produce to the bundle. Because the list is usually known in advance,\nit's common to include this in the object definition."),(0,i.kt)("li",{parentName:"ol"},"Use the ",(0,i.kt)("inlineCode",{parentName:"li"},"as_pdf()")," method on your preview screen to display a preview of the\noutput without any signature."),(0,i.kt)("li",{parentName:"ol"},"Use the ",(0,i.kt)("inlineCode",{parentName:"li"},"download_list_html()")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"send_button_html()")," methods on your ",(0,i.kt)("inlineCode",{parentName:"li"},"download"),"\nscreen.")),(0,i.kt)("p",null,"You can have as many or as few bundles as you would like. The Assembly Line convention\nis to use the following two bundles:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"al_user_bundle")," which should include a ",(0,i.kt)("strong",{parentName:"li"},"next steps")," document with\ninstructions for your user"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"al_court_bundle")," which leaves out the instructions and should have every\ndocument that you want the clerk to receive")),(0,i.kt)("p",null,"Stick with this convention if you expect to integrate with E-filing."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'---\nobjects:\n  - al_user_bundle: ALDocumentBundle.using(title="Forms to download", filename="ssa_documents", elements=[ssa_next_steps, letter])\n  - al_court_bundle: ALDocumentBundle.using(title="Forms to download", filename="ssa_documents", elements=[letter])\n')),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"You can ",(0,i.kt)("strong",{parentName:"p"},"nest")," ",(0,i.kt)("inlineCode",{parentName:"p"},"ALDocumentBundle"),"s! Just create your bundle in a separate ",(0,i.kt)("inlineCode",{parentName:"p"},"objects")," block and add it directly\ninto the list of ",(0,i.kt)("inlineCode",{parentName:"p"},"elements"),". This lets you create a document from multiple templates that you want the user\nto be able to open and print as one file.")),(0,i.kt)("p",null,"Attributes:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"enabled")," (optional): define this if the bundle is included inside another ",(0,i.kt)("inlineCode",{parentName:"li"},"ALDocumentBundle"),". If other variables in your interview determine if it's enabled, you should define the attribute in a code block, like in ",(0,i.kt)("a",{parentName:"li",href:"#enabled-example"},"this earlier example")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"title"),": this is displayed on the download screen"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"filename"),": used to construct the display filename for a ",(0,i.kt)("inlineCode",{parentName:"li"},"pdf")," version of the bundle")),(0,i.kt)("p",null,"Methods:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"as_pdf(key:str='final', refresh:bool=True) -> DAFile"),": return a single concatenated PDF of the bundle's attachments"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"as_zip(self, key:str = 'final', refresh:bool = True, title:str = '') -> DAFile"),":\nreturns a compressed ZIP archive with separate documents for each item."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"enabled_documents(self, refresh:bool=True) -> List[Any]"),': return a list of only the "enabled" documents in the bundle'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"as_flat_list(self, key:str='final', refresh:bool=True) -> List[DAFile]"),":"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"get_titles(self, key:str='final', refresh:bool=True) -> List[str]"),":"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"as_pdf_list(self, key:str='final', refresh:bool=True) -> List[DAFile]"),":"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"as_editable_list(self, key:str='final', refresh:bool=True) -> List[DAFile]"),":"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'download_list_html(self, key:str=\'final\', format:str=\'pdf\', view:bool=True\n    refresh:bool=True, include_zip:bool = True, view_label="View", view_icon:str="eye",\n    download_label:str="Download", download_icon:str="download", zip_label:str=None,\n    zip_icon:str="file-archive") -> str'),": returns HTML for a table with download and view buttons, as for a download screen"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"send_button_html(self, key:str='final', show_editable_checkbox:bool = True)->str"),":"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"send_email(self, to:any=None, key:str='final', editable:bool=False, template:any=None, **kwargs) -> bool"),":")),(0,i.kt)("p",null,"Example of a download screen that uses an ",(0,i.kt)("inlineCode",{parentName:"p"},"ALDocumentBundle"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"---\nprogress: 100\nid: download\nevent: petition_to_change_name_of_adult_download\nquestion: |\n  Your form is ready to download.\nsubquestion: |\n  Thank you ${ user_name_first_new }. Your form is ready to download and deliver.\n  \n  View, download and send your form below. Click the \"Make changes\" button to fix any mistakes. \n  \n  1. Download each of the documents below. Print at least two copies.\n  2. Call the ${ trial_court } at ${ bold(trial_court.phone) } to find out how\n  to deliver these forms. You can mail a copy to ${ trial_court.address.on_one_line() }.\n  3. Get a **certified** copy of your birth certificate from the town hall\n  where you were born.\n  4. File one of the copies with the court. Keep the other for your records.\n  \n  ${ action_button_html(url_action('review_petition_to_change_name_of_adult'), label='Make changes', color='info', icon='pencil-alt') } \n  \n  ${ action_button_html(al_user_bundle.as_pdf().url_for(), label=\"Download a copy as a single PDF\", icon='download') }\n  \n  ${ al_user_bundle.download_list_html() }\n  \n  ${ al_user_bundle.send_button_html() }\n")),(0,i.kt)("h3",{id:"using-the-download_list_html-method"},"Using the ",(0,i.kt)("inlineCode",{parentName:"h3"},"download_list_html()")," method"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'download_list_html(self, key:str=\'final\', format:str=\'pdf\', view:bool=True,\n      refresh:bool=True, include_zip:bool = True, view_label="View", view_icon:str="eye",\n      download_label:str="Download", download_icon:str="download", zip_label:str=None,\n      zip_icon:str="file-archive") -> str\n')),(0,i.kt)("p",null,'The default download table displays a row with a title, a "view" button which\nallows opening a PDF in-browser, and a "download" button that allows downloading\nthe PDF with one block. A row with a "Download as zip" button is also added\nby default if there is more than 1 document in the table.'),(0,i.kt)("p",null,"These defaults can be customized quite a bit. In addition to the parameters listed below,\nthe appearance can be controlled by editing CSS files. Take a look at the values in\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/SuffolkLITLab/docassemble-AssemblyLine/blob/main/docassemble/AssemblyLine/data/static/aldocument.css"},(0,i.kt)("inlineCode",{parentName:"a"},"aldocument.css")),"\nand customize to match your needs."),(0,i.kt)("p",null,"It is also not necessary to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"download_list_html()")," method. If you\nprefer, you can directly reference ",(0,i.kt)("inlineCode",{parentName:"p"},"enabled_documents")," and create your own\ndownload table format."),(0,i.kt)("p",null,"Parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"key"),': either "final" or "preview"'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"format"),': either "pdf", "docx", or "original", used to control the file linked to the "download" button'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"view"),": display a button that links to a PDF version of the document, if possible"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"refresh"),": controls whether the file should be cached"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"include_zip"),': controls whether a "Download zip" button is added to a download list with more than 1 document'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"view_label"),': label used for the "View" button'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"view_icon"),": icon from ",(0,i.kt)("a",{parentName:"li",href:"https://fontawesome.com"},"fontawesome"),'\'s "free" library'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"download_label"),': label used for the "Download" button'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"download_icon"),": icon from ",(0,i.kt)("a",{parentName:"li",href:"https://fontawesome.com"},"fontawesome"),'\'s "free" library'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"zip_label"),': text used for the row with the "zip" button. If not provided,\nthis will refer to the value of ',(0,i.kt)("inlineCode",{parentName:"li"},"self.zip_label")," which should be defined in a\nDocassemble ",(0,i.kt)("inlineCode",{parentName:"li"},"template")," block. This is to aid translation."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"zip_icon"),": icon from ",(0,i.kt)("a",{parentName:"li",href:"https://fontawesome.com"},"fontawesome"),'\'s "free" library')),(0,i.kt)("p",null,'Example: customizing the text on the "zip_label" interview-wide:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"---\ngeneric object: ALDocumentBundle\ntemplate: x.zip_label\ncontent: |\n  Download as one ZIP file\n")),(0,i.kt)("h3",{id:"using-the-send_button_html-method"},"Using the ",(0,i.kt)("inlineCode",{parentName:"h3"},"send_button_html()")," method"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"  def send_button_html(self, key:str='final', show_editable_checkbox:bool = True)->str:\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"send_button_html()")," is used to display an HTML input that the user can interact\nwith to send themselves a copy of the contents of a bundle."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"send_button_html()")," has just one parameter: ",(0,i.kt)("inlineCode",{parentName:"p"},"show_editable_checkbox")," which controls\nwhether a checkbox will be displayed that allows the user to toggle including the DOCX\nversion of templates in the email that they receive. "),(0,i.kt)("p",null,"However, all of the text can be customized. Copy each YAML block\nbelow into your own interview to edit and customize the text.\nIt can be edited interview-wide (shown) or on a per-bundle basis."),(0,i.kt)("p",null,'Customize the text "Get a copy of the documents in email":'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"---\ngeneric object: ALDocumentBundle\ntemplate: x.get_email_copy\ncontent: |\n  Get a copy of the documents in email\n")),(0,i.kt)("p",null,'Customize the text "Include an editable copy":'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"---\ngeneric object: ALDocumentBundle\ntemplate: x.include_editable_documents\ncontent: |\n  Include an editable copy\n")),(0,i.kt)("p",null,'Customize the text "Download zip":'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"---\ngeneric object: ALDocumentBundle\ntemplate: x.zip_label\ncontent: |\n  Download zip\n")),(0,i.kt)("p",null,"The subject and contents of the email can also be customized:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'---\ngeneric object: ALDocumentBundle\ntemplate: x.send_email_template\nsubject: |\n  % if len(x) > 1:\n  Your ${ x.title } document is ready\n  % else:\n  Your "${ x.title }" documents are ready\n  % endif\ncontent: |\n  Thank you for using our app!\n\n  Please find the document for ${ users } attached.\n')),(0,i.kt)("h2",{id:"working-with-overflow-text-aladdendumfield-and-aladdendumfielddict"},"Working with overflow text, ALAddendumField and ALAddendumFieldDict"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"ALDocument")," class has a special Addendum feature for working with fields\nthat may not fit into a PDF. For example: the PDF may have room for 3 lines, but\nthe user may have a longer story to tell."),(0,i.kt)("p",null,"Addenda can be used for both text fields and lists of items, such as children,\nwhere the original form may not allow enough room."),(0,i.kt)("p",null,"The default addendum file for an AssemblyLine interview uses a special\nattribute, ",(0,i.kt)("inlineCode",{parentName:"p"},"label"),", to decide how to format the text in the addendum. It will\nput objects, such as people, that are in a list into a table in the output."),(0,i.kt)("h3",{id:"overview-1"},"Overview"),(0,i.kt)("p",null,"Each ",(0,i.kt)("inlineCode",{parentName:"p"},"ALDocument")," has a dictionary attribute named ",(0,i.kt)("inlineCode",{parentName:"p"},"overflow_fields"),". The\ndictionary will contain a complete list of each field in the document that may\ntrigger the addendum. The length of each field will be evaluated to decide if\nthe addendum needs to be generated, based on the user's answers in the\ninterview. If there are no ",(0,i.kt)("inlineCode",{parentName:"p"},"overflow_fields")," or each ",(0,i.kt)("inlineCode",{parentName:"p"},"overflow_field")," is below\nthe specified limit for that field, no addendum will be generated."),(0,i.kt)("p",null,"You can use the AssemblyLine's default addendum template, which works well for a\ncourt form, or you can supply your own template file to use for the addendum.\nUsually, the addendum will be a Word document so it can expand to fit all of the\ncontent."),(0,i.kt)("p",null,"Here is the basic process of using an addendum:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"set the ",(0,i.kt)("inlineCode",{parentName:"li"},"has_addendum")," attribute of the ",(0,i.kt)("inlineCode",{parentName:"li"},"ALDocument")," to ",(0,i.kt)("inlineCode",{parentName:"li"},"True")),(0,i.kt)("li",{parentName:"ol"},"add an ",(0,i.kt)("inlineCode",{parentName:"li"},"ALAddendumField")," object to the ",(0,i.kt)("inlineCode",{parentName:"li"},"overflow_fields")," dictionary attribute\nof the ",(0,i.kt)("inlineCode",{parentName:"li"},"ALDocument")," for each field that you want to handle in the addendum"),(0,i.kt)("li",{parentName:"ol"},"set the ",(0,i.kt)("inlineCode",{parentName:"li"},"overflow_trigger")," attribute of the ",(0,i.kt)("inlineCode",{parentName:"li"},"ALAddendumField")," to match the\nmaximum number of ",(0,i.kt)("em",{parentName:"li"},"characters")," or ",(0,i.kt)("em",{parentName:"li"},"items")," that may appear in that field"),(0,i.kt)("li",{parentName:"ol"},"optionally, set the value of the ",(0,i.kt)("inlineCode",{parentName:"li"},"label")," attribute of the ",(0,i.kt)("inlineCode",{parentName:"li"},"ALAddendumField"),"\n(this is used in the default addendum file)"),(0,i.kt)("li",{parentName:"ol"},"optionally, specify the template file that you want to use for the addendum")),(0,i.kt)("h3",{id:"assumptions-and-changes-to-whitespace"},"Assumptions and changes to whitespace"),(0,i.kt)("p",null,"The addendum code does not preserve whitespace; both repeated spaces and\nnew lines will always be condensed."),(0,i.kt)("h3",{id:"example"},"Example"),(0,i.kt)("p",null,"Below is a complete example that demonstrates how to use a custom addendum."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"the addendum is enabled"),(0,i.kt)("li",{parentName:"ol"},"we specify a custom addendum template"),(0,i.kt)("li",{parentName:"ol"},"we add the ",(0,i.kt)("inlineCode",{parentName:"li"},"reasons_for_request")," variable to the fields that will be checked\nfor the addendum and say it can contain at most 640 characters"),(0,i.kt)("li",{parentName:"ol"},'we limit the number of characters that will go onto the main PDF form to the "safe" number of characters   ')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'---\nobjects:\n  # highlight-start\n  - CRA_Motion_to_Dismiss_attachment: ALDocument.using(filename="CRA_Motion_to_Dismiss", title="Motion to Dismiss CRA", enabled=True, has_addendum=True, default_overflow_message="[See addendum]")  \n  # highlight-end\n---\nobjects:\n  - al_user_bundle: ALDocumentBundle.using(elements=[CRA_Motion_to_Dismiss_attachment], title="Forms to download and deliver to court", filename="motion_to_dismiss_CRA.pdf")\n---\nattachment:\n  # highlight-start\n  variable name: CRA_Motion_to_Dismiss_attachment.addendum\n  # highlight-end\n  docx template file: CRA_Motion_to_Dismiss_addendum.docx\n---\n# highlight-start\ncode: |\n  CRA_Motion_to_Dismiss_attachment.overflow_fields[\'reasons_for_request\'].overflow_trigger = 640\n  CRA_Motion_to_Dismiss_attachment.overflow_fields[\'reasons_for_request\'].label = "Reasons for request"\n  CRA_Motion_to_Dismiss_attachment.overflow_fields.gathered = True  \n# highlight-end  \n---\nattachment:\n    variable name: CRA_Motion_to_Dismiss_attachment[i]\n    name: CRA Motion to Dismiss\n    filename: CRA_Motion_to_Dismiss\n    skip undefined: True\n    pdf template file: CRA_Motion_to_Dismiss.pdf\n    fields: \n      # highlight-start\n      - "reasons_for_request": ${ CRA_Motion_to_Dismiss_attachment.safe_value(\'reasons_for_request\') }\n      # highlight-end\n      - "docket_number": ${ docket_number }\n      - "user_signature": ${ users[0].signature_if_final(i) }\n      - "signature_date": ${ signature_date }\n')),(0,i.kt)("p",null,"If you would like to make your own custom Addendum file, you can start by\nexamining the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/SuffolkLITLab/docassemble-AssemblyLine/blob/main/docassemble/AssemblyLine/data/templates/al_basic_addendum.docx"},"generic\naddendum"),"\nfile included in the AssemblyLine repository. This example is very flexible, and may have more features\nthan you need for your addendum."),(0,i.kt)("h3",{id:"custom-parameters-for-the-addendum-code"},"Custom parameters for the addendum code"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"safe_value()")," method is used to control the options for putting text into the PDF.\nThe mirror, ",(0,i.kt)("inlineCode",{parentName:"p"},"overflow_value()")," method can be used to control the text that is sent to\naddendum. The options for both methods are the same. When you use ",(0,i.kt)("inlineCode",{parentName:"p"},"safe_value()"),"\nand ",(0,i.kt)("inlineCode",{parentName:"p"},"overflow_value()"),", you must use the same choices for each parameter to get consistent\nresults."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"input_width: int")," should equal the approximate width, in characters, of the input box on the PDF.\nWe default to 80 characters, which is a typical of PDF field width. A full page-width PDF field at 12\npoints Helvetica is about 99 characters. ",(0,i.kt)("inlineCode",{parentName:"li"},"input_width")," is used to calculate the total number of\nlines of text that fit in a multi-line input. It should be a whole divisor of the ",(0,i.kt)("inlineCode",{parentName:"li"},"overflow_trigger"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"preserve_newlines: bool")," defaults to ",(0,i.kt)("inlineCode",{parentName:"li"},"False"),". When ",(0,i.kt)("inlineCode",{parentName:"li"},"False"),", all whitespace will be condensed to\na single space. If ",(0,i.kt)("inlineCode",{parentName:"li"},"True"),", repeated newlines will be replaced with a single newline. Repeated spaces\nwill be condensed to a single space. When the limit is less than or equal to one line, whitespace\nis always condensed."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"preserve_words: bool")," defaults to ",(0,i.kt)("inlineCode",{parentName:"li"},"True"),". When ",(0,i.kt)("inlineCode",{parentName:"li"},"True"),", the addendum code will not cut off words\nin the middle. Instead, the text will be shortened so the ",(0,i.kt)("inlineCode",{parentName:"li"},"safe_value()")," ends with a complete word.\nWhen ",(0,i.kt)("inlineCode",{parentName:"li"},"False"),", text may be cut off in the middle of a word, but only for fields that are less than\none full line wide. Words will always be kept whole when the input exceeds one line in length."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"overflow_message")," can be used to provide a custom message when text is sent to the addendum. The\nAssemblyLine interviews default to an overflow message of ",(0,i.kt)("inlineCode",{parentName:"li"},"..."),", but no default is provided in the\naddendum code itself.")),(0,i.kt)("h2",{id:"handling-uploaded-documents"},"Handling uploaded documents"),(0,i.kt)("p",null,"If you want to allow your user to upload a document, you have at least 3 options:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Insert the uploaded image or document into the template, using ",(0,i.kt)("inlineCode",{parentName:"li"},"Jinja2")," tags\nin a DOCX file or using a ",(0,i.kt)("inlineCode",{parentName:"li"},"signature")," field in a PDF. "),(0,i.kt)("li",{parentName:"ol"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"ALExhibitDocument")," class, or"),(0,i.kt)("li",{parentName:"ol"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"ALDocumentUpload")," class.")),(0,i.kt)("h3",{id:"choosing-the-right-file-upload-method"},"Choosing the right file upload method"),(0,i.kt)("p",null,"Use a simple file field when someone needs to upload a single page or smaller\nimage that can be inserted into the middle of an existing template."),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"ALExhibitDocument")," when you need to handle a set of multiple exhibits\nof an unknown class and you want features like document titles, pagination, OCR,\nand a table of contents."),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"ALDocumentUpload")," class when someone needs to upload a full page document,\nbut you already know the title and you want it to be a standalone document in the\nfinal download, or if you want to append it to an existing download at the end of\nthe interview."),(0,i.kt)("h3",{id:"using-a-simple-file-field"},"Using a simple file field"),(0,i.kt)("p",null,"In a Word document, you can use a ",(0,i.kt)("a",{parentName:"p",href:"https://docassemble.org/docs/fields.html#file"},(0,i.kt)("inlineCode",{parentName:"a"},"datatype:\nfile"))," field. Then,\nput the field representing the file upload in your document with ordinary\n",(0,i.kt)("inlineCode",{parentName:"p"},"Jinja2")," tags."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'---\nquestion: |\n  Upload a picture of your favorite pet\nfields:\n  - Pet picture: pet_picture\n    datatype: file\n    accept: |\n      "image/*"\n')),(0,i.kt)("p",null,"And the DOCX template would include something like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"The user's favorite pet picture looks like this:\n\n{{ pet_picture }}\n")),(0,i.kt)("p",null,"You can also insert images into PDFs! When you prepare the PDF template,\nuse the ",(0,i.kt)("inlineCode",{parentName:"p"},"digital signature")," field type. Then, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"fields")," statement\nin the attachment block to assign the field to the PDF."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'attachment:\n  pdf template file: my_file.pdf\n  fields:\n    - "my_image_field": ${ pet_picture }\n')),(0,i.kt)("h3",{id:"handling-basic-file-attachments-with-the-aldocumentupload-class"},"Handling basic file attachments with the ALDocumentUpload class"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"ALDocumentUpload")," class is the right choice when you:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"need just one or a small number of documents uploaded"),(0,i.kt)("li",{parentName:"ol"},"want the uploaded document to be attached as-is to your final output"),(0,i.kt)("li",{parentName:"ol"},"don't need any of the special features of the ",(0,i.kt)("inlineCode",{parentName:"li"},"ALExhibitDocument")," class.")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ALDocumentUpload")," provides a simple wrapper around the ",(0,i.kt)("inlineCode",{parentName:"p"},"file")," upload type\nthat just makes it compatible with the ",(0,i.kt)("inlineCode",{parentName:"p"},"ALDocumentBundle")," class."),(0,i.kt)("p",null,"Documents uploaded using this class will be added as a standalone file inside\nthe bundle. They will typically fill the full page. This is perfect, for\nexample, if you need the user to upload some critical document and you know\nexactly which document it is in advance. For example: a notice or letter that\nyou know the user should have received."),(0,i.kt)("p",null,"When the user needs to upload multiple documents and you want to provide flexibility\nabout which documents they upload and what order they are in, it may make more sense\nto use the ",(0,i.kt)("inlineCode",{parentName:"p"},"ALExhibitDocument")," class."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'---\nobjects:\n  - eviction_notice_attachment: ALDocumentUpload.using(\n          title="Eviction notice",\n          filename="eviction_notice",\n        )\n---\ndepends on:\n  - has_eviction_notice\ncode: |\n  eviction_notice_attachment.enabled=has_eviction_notice\n---\nid: interview order\nmandatory: True\ncode: |\n  al_intro_screen\n  # ...\n  # highlight-start\n  if has_eviction_notice:\n    eviction_notice_attachment.file\n  # highlight-end\n  # ...\n---\nobjects:\n  # highlight-start\n  - al_user_bundle: ALDocumentBundle.using(elements=[my_instructions, my_main_attachment, eviction_notice_attachment], filename="user_bundle.pdf", title="All forms to download for your records")  \n  # highlight-end\n---\nid: eviction notice\nquestion: |\n  Eviction notice\nsubquestion: |\n  If you have a copy of the notice you got from your landlord, upload it now.\nfields:\n  - Do you have the eviction notice available now?: has_eviction_notice\n    datatype: yesnoradio\n  - Upload it now: eviction_notice_attachment.file\n    datatype: file\n    accept: |\n      "image/*"\n    show if: has_eviction_notice\n')),(0,i.kt)("h3",{id:"using-the-full-power-of-alexhibitdocument"},"Using the full power of ALExhibitDocument"),(0,i.kt)("p",null,"Uploaded documents can raise a lot of complex issues, from validating specific\nfile formats and limiting size to a figure the server can process, to gathering,\norganizing, and grouping pages. If you would like to handle files that are\nuploaded by the interview user during the course of the interview, the\n",(0,i.kt)("inlineCode",{parentName:"p"},"ALExhibitDocument")," class can handle some of the complexity for you."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ALExhibitDocuments")," have:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"pre-written questions"),(0,i.kt)("li",{parentName:"ol"},"validation of uploads for both size and valid image or document formats"),(0,i.kt)("li",{parentName:"ol"},"the ability to add a document one page at a time, such as with a smartphone camera"),(0,i.kt)("li",{parentName:"ol"},"the ability to add multiple labeled documents in one go"),(0,i.kt)("li",{parentName:"ol"},"the ability to rearrange pages"),(0,i.kt)("li",{parentName:"ol"},"an optional table of contents"),(0,i.kt)("li",{parentName:"ol"},"an optional cover page for each document"),(0,i.kt)("li",{parentName:"ol"},"optional page numbering"),(0,i.kt)("li",{parentName:"ol"},"optional OCRing")),(0,i.kt)("p",null,"To trigger asking for the user to upload documents at a specific time in your\ninterview, you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},".gather()")," method of  ",(0,i.kt)("inlineCode",{parentName:"p"},"your_document.exhibits"),"."),(0,i.kt)("p",null,"You may want to\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/SuffolkLITLab/docassemble-AssemblyLine/blob/a652df44f9cc9ea87f81fe2d88053d2c1f773d97/docassemble/AssemblyLine/data/questions/ql_baseline.yml#L1469"},"customize"),"\nthis screen by copying and pasting the block linked above into your interview.\nThis feature is fairly complex, so try just changing the wording and leave the\nvalidation code alone."),(0,i.kt)("p",null,"You can use an ",(0,i.kt)("inlineCode",{parentName:"p"},"ALExhibitDocument")," by creating an ",(0,i.kt)("inlineCode",{parentName:"p"},"ALExhibitDocument")," in an\n",(0,i.kt)("inlineCode",{parentName:"p"},"objects")," block and adding that object to an ",(0,i.kt)("inlineCode",{parentName:"p"},"ALDocumentBundle"),"."),(0,i.kt)("p",null,"Below is a simple snippet that demonstrates how to use an ",(0,i.kt)("inlineCode",{parentName:"p"},"ALExhibitDocument"),"."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"we use the default options, which include adding sequential Bates numbers to\npages, generating a table of contents, and adding individual cover pages for\neach exhibit."),(0,i.kt)("li",{parentName:"ol"},"we trigger the questions about exhibits at a specific point in the interview."),(0,i.kt)("li",{parentName:"ol"},"we also add the ",(0,i.kt)("inlineCode",{parentName:"li"},"exhibit_attachment")," document into the ALDocumentBundle\nby adding it to the ",(0,i.kt)("inlineCode",{parentName:"li"},"elements=[...]")," list inside the bundle's definition")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'---\nobjects:\n  - exhibit_attachment: ALExhibitDocument.using(\n          title="Exhibits",\n          filename="exhibits",\n          # highlight-start\n          add_page_numbers=True,\n          include_table_of_contents=True,\n          include_exhibit_cover_pages=True,\n          # highlight-end\n        )\n---\nid: interview order\nmandatory: True\ncode: |\n  al_intro_screen\n  # ...\n  # highlight-start\n  if exhibit_attachment.exhibits.has_exhibits:\n    exhibit_attachment.exhibits.gather()\n  # highlight-end\n  # ...\n---\nobjects:\n  # highlight-start\n  - al_user_bundle: ALDocumentBundle.using(elements=[my_instructions, my_main_attachment, exhibit_attachment], filename="user_bundle.pdf", title="All forms to download for your records")  \n  # highlight-end\n')),(0,i.kt)("h3",{id:"customizing-exhibits"},"Customizing Exhibits"),(0,i.kt)("p",null,"You can add your own template for the table of contents by customizing\n",(0,i.kt)("inlineCode",{parentName:"p"},"your_document.cover_page"),". Use ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/SuffolkLITLab/docassemble-AssemblyLine/blob/main/docassemble/AssemblyLine/data/templates/exhibit_table_of_contents.docx"},"the stock table of\ncontents"),"\ntemplate as a model. It has some fancy math to figure out what page number to\nstart the exhibits at, based on whether it thinks the table of contents itself\nwill spill onto a second page."),(0,i.kt)("p",null,"You can add your own template for the individual cover pages for each document,\ntoo. Use the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/SuffolkLITLab/docassemble-AssemblyLine/blob/main/docassemble/AssemblyLine/data/templates/exhibit_table_of_contents.docx"},"stock cover page\ntemplate"),"\nas a model."),(0,i.kt)("p",null,"By default, exhibits are labeled sequentially as ",(0,i.kt)("inlineCode",{parentName:"p"},"A"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"B,")," and so on. You can supply your own method for\nlabeling each exhibit by defining the ",(0,i.kt)("inlineCode",{parentName:"p"},"auto_labeler")," attribute of the ",(0,i.kt)("inlineCode",{parentName:"p"},"your_document.exhibits")," object\nto be a Python function that accepts an integer and returns a string. The default labeler is just the\nDocassemble function ",(0,i.kt)("a",{parentName:"p",href:"https://docassemble.org/docs/functions.html#alpha"},(0,i.kt)("inlineCode",{parentName:"a"},"alpha")),". If, for example,\nyou wanted to use Roman numerals:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"mandatory: True\ncode: |\n  exhibit_attachment.exhibits.auto_labeler = roman\n")),(0,i.kt)("p",null,"where ",(0,i.kt)("inlineCode",{parentName:"p"},"roman")," is referring to the ",(0,i.kt)("a",{parentName:"p",href:"https://docassemble.org/docs/functions.html#roman"},"Docassemble\nfunction"),"."),(0,i.kt)("p",null,"You can also define your own labeling function, like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"mandatory: True\ncode: |\n  exhibit_attachment.exhibits.auto_labeler = lambda y: str(y+1)\n")),(0,i.kt)("p",null,"Which would make the exhibit labels ",(0,i.kt)("inlineCode",{parentName:"p"},"1"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"2"),", and so on. You need to ensure that\nyour label override gets triggered, which is demonstrated above by adding the\n",(0,i.kt)("inlineCode",{parentName:"p"},"mandatory: True")," modifier to the block that defines it."),(0,i.kt)("h3",{id:"using-advanced-ocr-settings"},"Using advanced OCR settings"),(0,i.kt)("p",null,"OCR, or Optical Character Recognition, adds a layer of searchable text. This may be useful\nif you expect users to take photographs of documents. Searchable text may also be a\nrequirement for electronically filed documents in your jurisdiction."),(0,i.kt)("p",null,"By default, ",(0,i.kt)("inlineCode",{parentName:"p"},"ALExhibit")," will be OCRed using Docassemble's native code, which converts\nimages to gray-scale and is somewhat slow."),(0,i.kt)("p",null,"Optionally, you can tell AssemblyLine interviews to use an improved OCR system, OCRMyPDF.\nTo turn on OCRMyPDF:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Install OCRMyPDF as a Debian package inside your docker container."),(0,i.kt)("li",{parentName:"ol"},"Update your global configuration.")),(0,i.kt)("h4",{id:"installing-ocrmypdf"},"Installing OCRMyPDF"),(0,i.kt)("p",null,"Edit your global configuration and find an entry labeled ",(0,i.kt)("inlineCode",{parentName:"p"},"debian packages"),". Edit\nor add it so that it includes ",(0,i.kt)("inlineCode",{parentName:"p"},"ocrmypdf"),", like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"debian packages:\n- ocrmypdf\n")),(0,i.kt)("p",null,"Next, you can ",(0,i.kt)("strong",{parentName:"p"},"either")," start and then stop your Docassemble docker container on the command\nline, or manually install the application as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"docker exec -ti [TAB] /bin/bash\napt update\napt install ocrmypdf\n")),(0,i.kt)("h4",{id:"setting-ocrmypdf-as-the-default-ocr-engine-in-assemblyline-interviews"},"Setting OCRMyPDF as the default OCR engine in AssemblyLine interviews"),(0,i.kt)("p",null,"Find and edit the ",(0,i.kt)("inlineCode",{parentName:"p"},"assembly line")," directive in your configuration so that it includes this line:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"assembly line:\n  ocr engine: ocrmypdf\n")),(0,i.kt)("p",null,"If this setting is missing or the ",(0,i.kt)("inlineCode",{parentName:"p"},"ocr engine")," is set to anything other than ",(0,i.kt)("inlineCode",{parentName:"p"},"ocrmypdf"),", the\ndefault Docassemble OCR engine will be used instead."),(0,i.kt)("h2",{id:"alstaticdocument"},"ALStaticDocument"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"ALStaticDocument")," class is provided to give you a simple method to include\nplain PDF or Word instructions that do not have any variables included in them\nand have only one version (rather than a preview and final version). It can also\nwork for image files or any file that can be converted to PDF."),(0,i.kt)("p",null,"To use an ",(0,i.kt)("inlineCode",{parentName:"p"},"ALStaticDocument")," in your bundle, upload the desired PDF, Word,\nor image file to the ",(0,i.kt)("inlineCode",{parentName:"p"},"static")," folder in your Docassemble package, and\ninitialize it like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'objects:\n  - my_static_file: ALStaticDocument.using(filename="my_static_file.pdf", title="Instructions", enabled=True)\n---\nobjects:\n  - al_court_bundle: ALDocumentBundle.using(elements=[my_static_file], title="Forms to download")\n')),(0,i.kt)("h2",{id:"creating-xlsx-files-with-altabledocument"},"Creating XLSX files with ALTableDocument"),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"In progress!")),(0,i.kt)("h2",{id:"aluntransformeddocument"},"ALUntransformedDocument"),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"In progress!")))}u.isMDXComponent=!0}}]);