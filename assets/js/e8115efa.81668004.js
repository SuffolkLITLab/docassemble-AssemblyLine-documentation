"use strict";(self.webpackChunkdocassemble_assembly_line_documentation=self.webpackChunkdocassemble_assembly_line_documentation||[]).push([[87],{2790:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>r});const s=JSON.parse('{"id":"components/ALToolbox/addenda","title":"ALToolbox.addenda","description":"* ALToolbox.addenda","source":"@site/docs/components/ALToolbox/addenda.md","sourceDirName":"components/ALToolbox","slug":"/components/ALToolbox/addenda","permalink":"/docs/components/ALToolbox/addenda","draft":false,"unlisted":false,"editUrl":"https://github.com/SuffolkLITLab/docassemble-AssemblyLine-documentation/edit/main/docs/components/ALToolbox/addenda.md","tags":[],"version":"current","frontMatter":{}}');var i=t(4848),d=t(8453);const l={},o="ALToolbox.addenda",a={},r=[{value:"myTable Objects",id:"mytable-objects",level:2},{value:"__init__",id:"__init__",level:3},{value:"Arguments",id:"arguments",level:4},{value:"myTextList Objects",id:"mytextlist-objects",level:2},{value:"__init__",id:"__init__-1",level:3},{value:"Arguments",id:"arguments-1",level:4},{value:"g",id:"g",level:3},{value:"Arguments",id:"arguments-2",level:4},{value:"Notes",id:"notes",level:4},{value:"safe_json2",id:"safe_json2",level:3},{value:"Arguments",id:"arguments-3",level:4},{value:"Returns",id:"returns",level:4},{value:"type_name",id:"type_name",level:3},{value:"Arguments",id:"arguments-4",level:4},{value:"Returns",id:"returns-1",level:4}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,d.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"altoolboxaddenda",children:"ALToolbox.addenda"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#ALToolbox.addenda",children:"ALToolbox.addenda"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#ALToolbox.addenda.myTable",children:"myTable"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#ALToolbox.addenda.myTable.__init__",children:"__init__"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#ALToolbox.addenda.myTextList",children:"myTextList"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#ALToolbox.addenda.myTextList.__init__",children:"__init__"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#ALToolbox.addenda.myTextList.g",children:"g"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#ALToolbox.addenda.safe_json2",children:"safe_json2"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#ALToolbox.addenda.type_name",children:"type_name"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)("a",{id:"ALToolbox.addenda.myTable"}),"\n",(0,i.jsx)(n.h2,{id:"mytable-objects",children:"myTable Objects"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class myTable()\n"})}),"\n",(0,i.jsx)(n.p,{children:"Utility class for creating table representations from DAList objects for addenda."}),"\n",(0,i.jsx)(n.p,{children:"This class processes DAList objects containing 'Individual' or 'Thing' objects\nand converts them into structured table format suitable for document addenda.\nIt handles data sanitization and formatting for display purposes."}),"\n",(0,i.jsx)("a",{id:"ALToolbox.addenda.myTable.__init__"}),"\n",(0,i.jsx)(n.h3,{id:"__init__",children:"__init__"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def __init__(tblData, tblTitle, tblHeader)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Initialize a table from DAList data with title and headers."}),"\n",(0,i.jsx)(n.h4,{id:"arguments",children:"Arguments"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"tblData"})," - A DAList object containing Individual or Thing objects."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"tblTitle"})," ",(0,i.jsx)(n.em,{children:"str"})," - The title for the table."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"tblHeader"})," - The column headers for the table."]}),"\n"]}),"\n",(0,i.jsx)("a",{id:"ALToolbox.addenda.myTextList"}),"\n",(0,i.jsx)(n.h2,{id:"mytextlist-objects",children:"myTextList Objects"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class myTextList()\n"})}),"\n",(0,i.jsx)(n.p,{children:"Utility class for managing text fields that may exceed form space limits."}),"\n",(0,i.jsx)(n.p,{children:"This class handles text content that might be too long to fit in the main form\nby truncating it at a specified limit and storing the overflow text for use\nin addenda or continuation pages."}),"\n",(0,i.jsx)("a",{id:"ALToolbox.addenda.myTextList.__init__"}),"\n",(0,i.jsx)(n.h3,{id:"__init__-1",children:"__init__"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def __init__(text, limit, title)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Initialize text processing with truncation limits."}),"\n",(0,i.jsx)(n.h4,{id:"arguments-1",children:"Arguments"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"text"})," ",(0,i.jsx)(n.em,{children:"str"})," - The text content to process and potentially truncate."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"limit"})," ",(0,i.jsx)(n.em,{children:"int"})," - The character limit for the main form field."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"title"})," ",(0,i.jsx)(n.em,{children:"str"})," - The title or identifier for the text field."]}),"\n"]}),"\n",(0,i.jsx)("a",{id:"ALToolbox.addenda.myTextList.g"}),"\n",(0,i.jsx)(n.h3,{id:"g",children:"g"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def g(text, limit, title) -> None\n"})}),"\n",(0,i.jsx)(n.p,{children:"Process text for addendum generation by truncating if needed and storing overflow."}),"\n",(0,i.jsx)(n.p,{children:"Determines if the provided text exceeds the character limit and truncates it\nwith an addendum notice if necessary. The original text is stored for inclusion\nin an addendum section if truncation occurs."}),"\n",(0,i.jsx)(n.h4,{id:"arguments-2",children:"Arguments"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"text"})," ",(0,i.jsx)(n.em,{children:"str"})," - The text content to process for length."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"limit"})," ",(0,i.jsx)(n.em,{children:"int"})," - The maximum character limit for the main text field."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"title"})," ",(0,i.jsx)(n.em,{children:"str"})," - The title/label for this text field, used in the addendum."]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"notes",children:"Notes"}),"\n",(0,i.jsx)(n.p,{children:"Sets self.text_cutoff to the truncated text (with addendum notice if needed)\nand self.txtList to contain addendum data if truncation occurred."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(n.p,{children:'>>> text_handler = myTextList("Very long text...", 100, "Description")\n>>> # If text > 100 chars, text_cutoff will end with " (See Addendum.)"'}),"\n",(0,i.jsx)("a",{id:"ALToolbox.addenda.safe_json2"}),"\n",(0,i.jsx)(n.h3,{id:"safe_json2",children:"safe_json2"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def safe_json2(the_object, level=0, is_key=False) -> Any\n"})}),"\n",(0,i.jsx)(n.p,{children:"Convert Python objects to JSON-serializable format with enhanced date handling."}),"\n",(0,i.jsx)(n.p,{children:"A revision of the safe_json function that converts complex Python objects into\nformats that can be safely serialized to JSON. Handles datetime objects by\nconverting them to formatted date strings (MM/DD/YYYY format) rather than\nISO strings."}),"\n",(0,i.jsx)(n.h4,{id:"arguments-3",children:"Arguments"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"the_object"})," - The Python object to convert to a JSON-serializable format."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"level"})," ",(0,i.jsx)(n.em,{children:"int, optional"})," - Current recursion depth to prevent infinite loops.\nDefaults to 0."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"is_key"})," ",(0,i.jsx)(n.em,{children:"bool, optional"})," - Whether this object is being used as a dictionary key.\nDefaults to False."]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"returns",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:'A JSON-serializable representation of the input object. Returns "None" for\nkeys or None for values when objects cannot be serialized and recursion\nlimit is exceeded.'}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(n.p,{children:'>>> import datetime\n>>> obj = {"date": datetime.datetime(2023, 12, 25)}\n>>> safe_json2(obj)'}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'\\{"date"'}),' - "12/25/2023"}']}),"\n"]}),"\n",(0,i.jsx)("a",{id:"ALToolbox.addenda.type_name"}),"\n",(0,i.jsx)(n.h3,{id:"type_name",children:"type_name"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def type_name(the_object) -> str\n"})}),"\n",(0,i.jsx)(n.p,{children:"Extract the class name from a Python object's type string representation."}),"\n",(0,i.jsx)(n.p,{children:"Parses the string representation of an object's type to extract just the\nclass name, removing the surrounding type syntax."}),"\n",(0,i.jsx)(n.h4,{id:"arguments-4",children:"Arguments"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"the_object"})," - Any Python object whose type name should be extracted."]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"returns-1",children:"Returns"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"str"})," - The class name of the object, or the full type string if parsing fails."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(n.p,{children:">>> type_name(\"hello\")\n'str'\n>>> type_name([1, 2, 3])\n'list'"})]})}function h(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>o});var s=t(6540);const i={},d=s.createContext(i);function l(e){const n=s.useContext(d);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(d.Provider,{value:n},e.children)}}}]);