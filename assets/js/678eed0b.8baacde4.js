"use strict";(self.webpackChunkdocassemble_assembly_line_documentation=self.webpackChunkdocassemble_assembly_line_documentation||[]).push([[9934],{4137:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>p});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=o.createContext({}),c=function(e){var t=o.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=c(e.components);return o.createElement(i.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},b=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=c(n),b=a,p=u["".concat(i,".").concat(b)]||u[b]||d[b]||r;return n?o.createElement(p,l(l({ref:t},m),{},{components:n})):o.createElement(p,l({ref:t},m))}));function p(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=b;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[u]="string"==typeof e?e:a,l[1]=s;for(var c=2;c<r;c++)l[c]=n[c];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}b.displayName="MDXCreateElement"},4860:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var o=n(7462),a=(n(7294),n(4137));const r={id:"jobs",title:"Jobs: ALJob and ALJobList\n",sidebar_label:"Jobs\n",slug:"/alincome/jobs"},l=void 0,s={unversionedId:"alincome/jobs",id:"alincome/jobs",title:"Jobs: ALJob and ALJobList\n",description:"Asking people about their jobs is a common task when getting financial information. The ALJob class tries to be complete but simple for your users to answer, doing the math for them, and straight-forward for you to use.",source:"@site/docs/alincome/jobs.md",sourceDirName:"alincome",slug:"/alincome/jobs",permalink:"/docassemble-AssemblyLine-documentation/docs/alincome/jobs",draft:!1,editUrl:"https://github.com/SuffolkLITLab/docassemble-AssemblyLine-documentation/edit/main/docs/alincome/jobs.md",tags:[],version:"current",frontMatter:{id:"jobs",title:"Jobs: ALJob and ALJobList\n",sidebar_label:"Jobs\n",slug:"/alincome/jobs"},sidebar:"mainSidebar",previous:{title:"Expenses\n",permalink:"/docassemble-AssemblyLine-documentation/docs/alincome/expenses"},next:{title:"Itemized Jobs\n",permalink:"/docassemble-AssemblyLine-documentation/docs/alincome/itemizedjobs"}},i={},c=[{value:"ALJobList tutorial",id:"aljoblist-tutorial",level:2},{value:"Before",id:"before",level:3},{value:"Writing the interview",id:"writing-the-interview",level:3}],m={toc:c};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Asking people about their jobs is a common task when getting financial information. The ",(0,a.kt)("inlineCode",{parentName:"p"},"ALJob")," class tries to be complete but simple for your users to answer, doing the math for them, and straight-forward for you to use."),(0,a.kt)("p",null,"If you want to jump right in, check out a ",(0,a.kt)("a",{parentName:"p",href:"https://apps-test.suffolklitlab.org/start/ALToolbox/al_income_demo?use_feature=ALJob"},"live demo of the ALJob feature"),"."),(0,a.kt)("h2",{id:"aljoblist-tutorial"},"ALJobList tutorial"),(0,a.kt)("p",null,"Let's make a short interview that asks about someone's jobs, lets\nthem review their answers, and shows them summaries about their\nincome from those jobs."),(0,a.kt)("h3",{id:"before"},"Before"),(0,a.kt)("p",null,"Before you start, we'll assume that you:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"have access to a ",(0,a.kt)("a",{parentName:"li",href:"https://suffolklitlab.org/legal-tech-class/docs/classes/assembly-line/2020-assembly-line-assignment-1#before-you-get-started"},"developer account on a docassemble server")),(0,a.kt)("li",{parentName:"ul"},"have the ",(0,a.kt)("a",{parentName:"li",href:"https://suffolklitlab.org/docassemble-AssemblyLine-documentation/docs/installation#run-the-installation-script"},(0,a.kt)("inlineCode",{parentName:"a"},"ALToolbox")," package installed on your server")),(0,a.kt)("li",{parentName:"ul"},"know ",(0,a.kt)("a",{parentName:"li",href:"https://suffolklitlab.org/legal-tech-class/docs/classes/docacon-2020/hello-world#introduction-to-the-docassemble-playground"},"what the playground is")," and ",(0,a.kt)("a",{parentName:"li",href:"https://suffolklitlab.org/legal-tech-class/docs/classes/docacon-2020/hello-world#hello-world"},"how to use it to develop a docassemble interview")),(0,a.kt)("li",{parentName:"ul"},"know ",(0,a.kt)("a",{parentName:"li",href:"https://suffolklitlab.org/legal-tech-class/docs/yaml#documents"},'what "blocks" are')," in docassemble")),(0,a.kt)("h3",{id:"writing-the-interview"},"Writing the interview"),(0,a.kt)("p",null,"This interview will be minimum functionality; it will gather all of the information about someone's jobs, ask them to review it, and finally, will display the information."),(0,a.kt)("p",null,"First, include the ",(0,a.kt)("inlineCode",{parentName:"p"},"al_income.yml")," YAML file in your interview. This will\nlet you use the al_income questions and python code."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yml"},"include:\n  - docassemble.ALToolbox:al_income.yml\n")),(0,a.kt)("p",null,"Then, create an ",(0,a.kt)("inlineCode",{parentName:"p"},"ALJobList")," using a ",(0,a.kt)("inlineCode",{parentName:"p"},"objects")," block."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yml"},"objects:\n  - jobs: ALJobList.using(complete_attribute='complete', ask_number=True)\n")),(0,a.kt)("admonition",{title:"Other objects",type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"By default, each ALJob will use ",(0,a.kt)("inlineCode",{parentName:"p"},"Individual")," object for the employer. You can change this to be the\n",(0,a.kt)("inlineCode",{parentName:"p"},"ALIndividual")," object by using the following ",(0,a.kt)("inlineCode",{parentName:"p"},"objects")," block:"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-yml"},"objects:\n  - jobs: ALJobList.using(\n        object_type=ALJob.using(employer_type=ALIndividual),\n        complete_attribute='complete', ask_number=True)\n"))),(0,a.kt)("p",null,"Next, add a ",(0,a.kt)("a",{parentName:"p",href:"https://suffolklitlab.org/legal-tech-class/docs/practical-guide-docassemble/controlling-interview-order#the-interview-order-block"},"interview order code block"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yml"},"mandatory: True\ncode: |\n  jobs.gather()\n")),(0,a.kt)("p",null,"The interview will ask how many jobs the user has, and then for each job, will ask them:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"their job title. This is mostly for their benefit, and is the simplest way of asking for the information."),(0,a.kt)("li",{parentName:"ul"},'information about their employer. They can mark if they are self-employed, and the module will mark the employers name as\n"self-employed".'),(0,a.kt)("li",{parentName:"ul"},"how much the user gets paid. This screen handles both hourly and salaried workers, and asks how often they receive their pay,\nand if they have any deductions from their paycheck.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"if you need more detailed information about someone's pay, such as their\ntips and taxes withheld, you should use ",(0,a.kt)("a",{parentName:"li",href:"/docassemble-AssemblyLine-documentation/docs/alincome/itemizedjobs"},"the ",(0,a.kt)("inlineCode",{parentName:"a"},"ALItemizedJobList")," class"))))),(0,a.kt)("p",null,"You can let the user review their answers with the following screen:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yml"},"id: job review\nquestion: |\n  Review your jobs\nsubquestion: |\n  Here is what you've told us about your jobs. You can add more or continue\n  to the next question.\n\n  ${ jobs.table }\n\n  ${ jobs.add_action() }\nfield: review_jobs\n")),(0,a.kt)("admonition",{title:"Review screens",type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"You can also add the job list to a ",(0,a.kt)("a",{parentName:"p",href:"https://docassemble.org/docs/fields.html#review"},"review screen")," with the below code:"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-yml"},"review:\n  - Edit: jobs.revisit\n    button: |\n      **Jobs**:\n\n      % for job in jobs:\n      * ${ job.source } at ${ job.employer.name }\n      % endfor\n"))),(0,a.kt)("p",null,"Once you have this information, you can use it in a variety of ways.\nLet's add one last screen to display our information. We'll\ndescribe what each line of code is doing on the screen."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yml"},"event: final_screen\nquestion: Summary of your jobs\nsubquestion: |\n  Annual gross income from all jobs: ${ currency(jobs.total()) }\n\n  Annual net income (gross - deductions) from all jobs: ${ currency(jobs.net_total()) }\n\n  Monthly gross income from all jobs: ${ currency(jobs.total(times_per_year=12)) }\n\n  Annual gross income from the first job listed: ${ currency(jobs[0].total()) }\n\n  Employer information from the first job: ${ jobs[0].employer_name_address_phone() }\n")),(0,a.kt)("p",null,"Add the screens we just made to the mandatory code block above, so it looks like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yml"},"mandatory: True\ncode: |\n  jobs.gather()\n  review_jobs\n  final_screen\n")),(0,a.kt)("p",null,"And you can now run through the interview!"),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Click this section to see the whole interview"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yml"},"---\ninclude:\n  - al_income.yml\n---\nobjects:\n  - jobs: ALJobList.using(complete_attribute='complete', ask_number=True)\n---\nmandatory: True\ncode: |\n  jobs.gather()\n  review_jobs\n  final_screen\n---\nid: job review\nquestion: |\n  Review your jobs\nsubquestion: |\n  Here is what you've told us about your jobs. You can add more or continue\n  to the next question.\n\n  ${ jobs.table }\n\n  ${ jobs.add_action() }\nfield: review_jobs\n---\nevent: final_screen\nquestion: Summary of your jobs\nsubquestion: |\n  Annual gross income from all jobs: ${ currency(jobs.total()) }\n\n  Annual net income (gross - deductions) from all jobs: ${ currency(jobs.net_total()) }\n\n  Monthly gross income from all jobs: ${ currency(jobs.total(times_per_year=12)) }\n\n  Annual gross income from the first job listed: ${ currency(jobs[0].total()) }\n\n  Employer information from the first job: ${ jobs[0].employer_name_address_phone() }\n"))),(0,a.kt)("p",null,"You'll likely want to display this information in a PDF or word template as well. ",(0,a.kt)("a",{parentName:"p",href:"https://suffolklitlab.org/docassemble-AssemblyLine-documentation/docs/generated_yaml#attachment-block"},"This section describing the Attachment block")," will help with displaying information in the PDF, and ",(0,a.kt)("a",{parentName:"p",href:"https://suffolklitlab.org/docassemble-AssemblyLine-documentation/docs/docx"},"this page about working with DOCX files")," will help DOCX users."))}u.isMDXComponent=!0}}]);