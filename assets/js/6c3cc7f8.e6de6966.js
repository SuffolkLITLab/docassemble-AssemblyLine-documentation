"use strict";(self.webpackChunkdocassemble_assembly_line_documentation=self.webpackChunkdocassemble_assembly_line_documentation||[]).push([[8944],{1588:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>r,toc:()=>h});var n=i(4848),s=i(8453);const o={id:"yaml_lists",title:"Collecting items in lists",sidebar_label:"Collecting items in lists",slug:"/coding_style_guide/yaml_lists"},l=void 0,r={id:"coding_style/yaml_lists",title:"Collecting items in lists",description:"Guiding Principles",source:"@site/docs/coding_style/yaml_lists.md",sourceDirName:"coding_style",slug:"/coding_style_guide/yaml_lists",permalink:"/docassemble-AssemblyLine-documentation/docs/coding_style_guide/yaml_lists",draft:!1,unlisted:!1,editUrl:"https://github.com/SuffolkLITLab/docassemble-AssemblyLine-documentation/edit/main/docs/coding_style/yaml_lists.md",tags:[],version:"current",frontMatter:{id:"yaml_lists",title:"Collecting items in lists",sidebar_label:"Collecting items in lists",slug:"/coding_style_guide/yaml_lists"}},a={},h=[{value:"Guiding Principles",id:"guiding-principles",level:2},{value:"Ask for total number of items up front",id:"ask-for-total-number-of-items-up-front",level:2},{value:"Ask for items with &quot;is there another&quot; after each item",id:"ask-for-items-with-is-there-another-after-each-item",level:2},{value:"Ask for items with the &quot;list collect&quot; feature",id:"ask-for-items-with-the-list-collect-feature",level:3}];function c(e){const t={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h2,{id:"guiding-principles",children:"Guiding Principles"}),"\n",(0,n.jsx)(t.p,{children:"Try to gather items in a list in a way that would be natural to do in a\nconversation. For example: if you ask about income, you might naturally ask:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"do you work?"}),"\n",(0,n.jsx)(t.li,{children:"do you have any other jobs?"}),"\n",(0,n.jsx)(t.li,{children:"do you have any pension income?"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"If you ask about children, it may be more natural to ask:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"do you have any children?"}),"\n",(0,n.jsx)(t.li,{children:"how many?"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"And then ask for the information of each child one at at a time. In other\ncircumstances, it may be simpler to let someone interact with a button to add\nadditional items, one at a time where they can see the full list they have\nentered at the same time that they add new items."}),"\n",(0,n.jsx)(t.h2,{id:"ask-for-total-number-of-items-up-front",children:"Ask for total number of items up front"}),"\n",(0,n.jsx)(t.p,{children:"This is the preferred method for gathering items in a list. It requires the\nfewest clicks and least explanation for users. It's relatively intuitive\nalthough it does require entering information on multiple screens."}),"\n",(0,n.jsx)(t.p,{children:"Label the items in the list as the user progresses through the form so that it is\nclear which item is being asked about."}),"\n",(0,n.jsx)(t.p,{children:"For example:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-yaml",children:"question: |\n  % if i == 0:\n  What is the name of your oldest child?\n  % else:\n  What is the name of your ordinal(i) child?\n  % endif\n"})}),"\n",(0,n.jsx)(t.h2,{id:"ask-for-items-with-is-there-another-after-each-item",children:'Ask for items with "is there another" after each item'}),"\n",(0,n.jsx)(t.p,{children:'This is another simple method but very "clicky". After each item, the user needs\nto answer "are there any more?" It\'s also important to reflect back the number\nof currently gathered items so someone does not get lost in trying to remember\nwhich items they have already told the system about.'}),"\n",(0,n.jsx)(t.p,{children:"It works well when the number of items is not important to the user. For\nexample, people usually know the number of children they have. They can count\nthe number of bank accounts or income sources they have, but it's not a number\nthey have in their mind already."}),"\n",(0,n.jsx)(t.p,{children:"Consider adding a table or list of the children at the end as a summary/check\nthat they did the entry correctly."}),"\n",(0,n.jsx)(t.h3,{id:"ask-for-items-with-the-list-collect-feature",children:'Ask for items with the "list collect" feature'}),"\n",(0,n.jsx)(t.p,{children:"Appropriate when adding multiple items is not likely, the user does not\nnecessarily know the total number of items in advance or asking for a total\nnumber would be awkward, and there are only a few fields necessary to collect\neach item."}),"\n",(0,n.jsx)(t.p,{children:'The "list collect" feature may benefit from additional custom CSS to polish the\ninterface.'})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},8453:(e,t,i)=>{i.d(t,{R:()=>l,x:()=>r});var n=i(6540);const s={},o=n.createContext(s);function l(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);