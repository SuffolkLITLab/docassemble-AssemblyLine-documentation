"use strict";(self.webpackChunkdocassemble_assembly_line_documentation=self.webpackChunkdocassemble_assembly_line_documentation||[]).push([[5904],{1012:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"components/EFSPIntegration/conversions","title":"EFSPIntegration.conversions","description":"* EFSPIntegration.conversions","source":"@site/docs/components/EFSPIntegration/conversions.md","sourceDirName":"components/EFSPIntegration","slug":"/components/EFSPIntegration/conversions","permalink":"/docs/components/EFSPIntegration/conversions","draft":false,"unlisted":false,"editUrl":"https://github.com/SuffolkLITLab/docassemble-AssemblyLine-documentation/edit/main/docs/components/EFSPIntegration/conversions.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"EFSPIntegration.efm_client","permalink":"/docs/components/EFSPIntegration/efm_client"},"next":{"title":"EFSPIntegration.interview_logic","permalink":"/docs/components/EFSPIntegration/interview_logic"}}');var s=t(4848),r=t(8453);const a={},o="EFSPIntegration.conversions",l={},c=[{value:"error_notification",id:"error_notification",level:3},{value:"log_error_and_notify",id:"log_error_and_notify",level:3},{value:"convert_court_to_id",id:"convert_court_to_id",level:3},{value:"Arguments",id:"arguments",level:4},{value:"Returns",id:"returns",level:4},{value:"choices_and_map",id:"choices_and_map",level:3},{value:"Arguments",id:"arguments-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"pretty_display",id:"pretty_display",level:3},{value:"Arguments",id:"arguments-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"debug_display",id:"debug_display",level:3},{value:"tyler_daterep_to_datetime",id:"tyler_daterep_to_datetime",level:3},{value:"tyler_timestamp_to_datetime",id:"tyler_timestamp_to_datetime",level:3},{value:"validate_tyler_regex",id:"validate_tyler_regex",level:3},{value:"parse_service_contacts",id:"parse_service_contacts",level:3},{value:"parse_case_info",id:"parse_case_info",level:3},{value:"Arguments",id:"arguments-3",level:4},{value:"fetch_case_info",id:"fetch_case_info",level:3},{value:"filter_payment_accounts",id:"filter_payment_accounts",level:3},{value:"Arguments",id:"arguments-4",level:4},{value:"Returns",id:"returns-3",level:4},{value:"payment_account_labels",id:"payment_account_labels",level:3},{value:"filing_id_and_label",id:"filing_id_and_label",level:3},{value:"get_tyler_roles",id:"get_tyler_roles",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"efspintegrationconversions",children:"EFSPIntegration.conversions"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#EFSPIntegration.conversions",children:"EFSPIntegration.conversions"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#EFSPIntegration.conversions.error_notification",children:"error_notification"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#EFSPIntegration.conversions.log_error_and_notify",children:"log_error_and_notify"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#EFSPIntegration.conversions.convert_court_to_id",children:"convert_court_to_id"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#EFSPIntegration.conversions.choices_and_map",children:"choices_and_map"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#EFSPIntegration.conversions.pretty_display",children:"pretty_display"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#EFSPIntegration.conversions.debug_display",children:"debug_display"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#EFSPIntegration.conversions.tyler_daterep_to_datetime",children:"tyler_daterep_to_datetime"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#EFSPIntegration.conversions.tyler_timestamp_to_datetime",children:"tyler_timestamp_to_datetime"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#EFSPIntegration.conversions.validate_tyler_regex",children:"validate_tyler_regex"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#EFSPIntegration.conversions.parse_service_contacts",children:"parse_service_contacts"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#EFSPIntegration.conversions.parse_case_info",children:"parse_case_info"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#EFSPIntegration.conversions.fetch_case_info",children:"fetch_case_info"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#EFSPIntegration.conversions.filter_payment_accounts",children:"filter_payment_accounts"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#EFSPIntegration.conversions.payment_account_labels",children:"payment_account_labels"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#EFSPIntegration.conversions.filing_id_and_label",children:"filing_id_and_label"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#EFSPIntegration.conversions.get_tyler_roles",children:"get_tyler_roles"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Functions that help convert the JSON-ized XML from the proxy server into usable information."}),"\n",(0,s.jsx)("a",{id:"EFSPIntegration.conversions.error_notification"}),"\n",(0,s.jsx)(n.h3,{id:"error_notification",children:"error_notification"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def error_notification(err, message=None, trace=None, referer=None)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Copied from docassemble.webapp.server.error_notification, since:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"things from webapp.* are unstable"}),"\n",(0,s.jsx)(n.li,{children:"it breaks the unit tests and the mypy"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Some slight modifications to work without server backends"}),"\n",(0,s.jsx)("a",{id:"EFSPIntegration.conversions.log_error_and_notify"}),"\n",(0,s.jsx)(n.h3,{id:"log_error_and_notify",children:"log_error_and_notify"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def log_error_and_notify(context: str, resp: Optional[ApiResponse] = None)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Similar to docassemble.webapp.server.error_notification, which will send an email to\nthe ",(0,s.jsx)(n.code,{children:"error_notification_email"})," in the config."]}),"\n",(0,s.jsx)("a",{id:"EFSPIntegration.conversions.convert_court_to_id"}),"\n",(0,s.jsx)(n.h3,{id:"convert_court_to_id",children:"convert_court_to_id"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def convert_court_to_id(trial_court) -> str\n"})}),"\n",(0,s.jsx)(n.p,{children:"Converts a court type to the specific id string expected by Tyler."}),"\n",(0,s.jsx)(n.p,{children:'A fairly ad-hoc function; it will check if the object has several attributes\n("tyler_court_code", "tyler_code", or "name"), or if it\'s already a string, it\ntries to just make a lower case on the string. We strongly recommend that\nyour court object use the "tyler_court_code" attribute though.'}),"\n",(0,s.jsx)(n.h4,{id:"arguments",children:"Arguments"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"trial_court"})," - the court object"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"returns",children:"Returns"}),"\n",(0,s.jsxs)(n.p,{children:["the string that should be the Tyler EFM court id, i.e. ",(0,s.jsx)(n.code,{children:"adams"})," or ",(0,s.jsx)(n.code,{children:"peoria:cr"})]}),"\n",(0,s.jsx)("a",{id:"EFSPIntegration.conversions.choices_and_map"}),"\n",(0,s.jsx)(n.h3,{id:"choices_and_map",children:"choices_and_map"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def choices_and_map(codes_list: List[Dict[str, Any]],\n                    display: str = None,\n                    backing: str = None) -> Tuple[List[Any], Dict]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Takes the responses from the 'codes' service and make a DA ready list of choices and a map back\nto the full code object"}),"\n",(0,s.jsx)(n.h4,{id:"arguments-1",children:"Arguments"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"codes_list"})," - should be the direct response from a 'codes' service, i.e. ",(0,s.jsx)(n.code,{children:"proxy_conn.get_case_categories(court_id).data"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"display"}),' - a python format string, where the input variables are the keys of the individual code elements. By\ndefault, it\'s "{name}", but could be something else like "{name} ({code})"']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"backing"}),' - the key to each dict element in the codes_list that you want to use as the "canonical" representation\nof the code, i.e. each is unique, and there aren\'t conflicts']}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"returns-1",children:"Returns"}),"\n",(0,s.jsxs)(n.p,{children:["a tuple; first, a list of the codes that can be used at the ",(0,s.jsx)(n.code,{children:"choices"})," in a docassemble field,\nsecond, a map of each code, from the backing key to the full code element. Useful for getting\nall of the information about a code after a user has selected it."]}),"\n",(0,s.jsx)("a",{id:"EFSPIntegration.conversions.pretty_display"}),"\n",(0,s.jsx)(n.h3,{id:"pretty_display",children:"pretty_display"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def pretty_display(data, tab_depth=0, skip_xml=True, item_name=None) -> str\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Given an arbitrarily nested JSON structure, print it nicely as markdown.\nRecursive, for subsequent calls ",(0,s.jsx)(n.code,{children:"tab_depth"})," increases."]}),"\n",(0,s.jsx)(n.h4,{id:"arguments-2",children:"Arguments"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"data"})," - the JSON structure (python dicts, lists, strings and ints) to print"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"tab_depth"})," - how many spaces to add before each new line, to make the markdown correct"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"skip_xml"})," - this function is mostly for printing responses from the EfileProxyServer, which\nlazily returns XML as JSON. If this is true, we won't show the useless XML cruft"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"item_name"})," - when recursing, will show the parent's name when showing elements in a list"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"returns-2",children:"Returns"}),"\n",(0,s.jsx)(n.p,{children:"The string of markdown text that displays info about the given JSON structure"}),"\n",(0,s.jsx)("a",{id:"EFSPIntegration.conversions.debug_display"}),"\n",(0,s.jsx)(n.h3,{id:"debug_display",children:"debug_display"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def debug_display(resp: ApiResponse) -> str\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Returns a string with either the error of the response,\nor it's data run through ",(0,s.jsx)(n.a,{href:"#pretty_display",children:"pretty_display"})]}),"\n",(0,s.jsx)("a",{id:"EFSPIntegration.conversions.tyler_daterep_to_datetime"}),"\n",(0,s.jsx)(n.h3,{id:"tyler_daterep_to_datetime",children:"tyler_daterep_to_datetime"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def tyler_daterep_to_datetime(tyler_daterep: Mapping) -> DADateTime\n"})}),"\n",(0,s.jsxs)(n.p,{children:['Takes an jsonized-XML object of "{',(0,s.jsx)(n.a,{href:"http://niem.gov/niem/niem-core/2.0%5C%7DActivityDate",children:"http://niem.gov/niem/niem-core/2.0\\}ActivityDate"}),",\nreturns the datetime it represents."]}),"\n",(0,s.jsx)("a",{id:"EFSPIntegration.conversions.tyler_timestamp_to_datetime"}),"\n",(0,s.jsx)(n.h3,{id:"tyler_timestamp_to_datetime",children:"tyler_timestamp_to_datetime"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def tyler_timestamp_to_datetime(timestamp_ms: int) -> DADateTime\n"})}),"\n",(0,s.jsx)(n.p,{children:"Given a timestamp in milliseconds from epoch (in UTC), make a datetime from it"}),"\n",(0,s.jsx)("a",{id:"EFSPIntegration.conversions.validate_tyler_regex"}),"\n",(0,s.jsx)(n.h3,{id:"validate_tyler_regex",children:"validate_tyler_regex"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def validate_tyler_regex(data_field: Mapping) -> Callable[[str], Any]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Return a function that validates a given input with the provided regex,\nsuitable for use with Docassemble's ",(0,s.jsx)(n.code,{children:"validate:"})," question modifier"]}),"\n",(0,s.jsx)("a",{id:"EFSPIntegration.conversions.parse_service_contacts"}),"\n",(0,s.jsx)(n.h3,{id:"parse_service_contacts",children:"parse_service_contacts"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def parse_service_contacts(service_list)\n"})}),"\n",(0,s.jsx)(n.p,{children:'We\'ll take both Tyler service contact lists and Niem service contact lists.\nTyler\'s are just `{"firstName": "Bob", "middleName": "P", ..., "serviceContactId": "abcrunh-13..."\nNiem\'s are more complicated'}),"\n",(0,s.jsx)("a",{id:"EFSPIntegration.conversions.parse_case_info"}),"\n",(0,s.jsx)(n.h3,{id:"parse_case_info",children:"parse_case_info"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def parse_case_info(proxy_conn: ProxyConnection,\n                    new_case: DAObject,\n                    entry: dict,\n                    court_id: str,\n                    *,\n                    fetch: bool = True,\n                    roles: dict = None)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Given sparse information about a case, gets the full details about it"}),"\n",(0,s.jsx)(n.h4,{id:"arguments-3",children:"Arguments"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"proxy_conn"})," - the connection to the EFileProxyServer"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"new_case"})," - the object to hold all of the information about the case"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"entry"})," - the information we have about the case, usually from a call to ",(0,s.jsx)(n.code,{children:"get_cases"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"court_id"})," - the id of the court that we searched in to get this info"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"fetch"})," - if true, will fetch more detailed information about the case,\ninclude the case title"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"roles"})," - a dictionary of the party type codes to the party type name.\nUsed so we can filter and sort participants later"]}),"\n"]}),"\n",(0,s.jsx)("a",{id:"EFSPIntegration.conversions.fetch_case_info"}),"\n",(0,s.jsx)(n.h3,{id:"fetch_case_info",children:"fetch_case_info"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def fetch_case_info(proxy_conn: ProxyConnection,\n                    new_case: DAObject,\n                    roles: Optional[dict] = None) -> None\n"})}),"\n",(0,s.jsx)(n.p,{children:"Fills in these attributes with the full case details:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"attorneys"}),"\n",(0,s.jsx)(n.li,{children:"party_to_attorneys"}),"\n",(0,s.jsx)(n.li,{children:"case_details_worked"}),"\n",(0,s.jsx)(n.li,{children:"case_details"}),"\n",(0,s.jsx)(n.li,{children:"case_type"}),"\n",(0,s.jsx)(n.li,{children:"title"}),"\n",(0,s.jsx)(n.li,{children:"date"}),"\n",(0,s.jsx)(n.li,{children:"participants"}),"\n"]}),"\n",(0,s.jsx)("a",{id:"EFSPIntegration.conversions.filter_payment_accounts"}),"\n",(0,s.jsx)(n.h3,{id:"filter_payment_accounts",children:"filter_payment_accounts"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def filter_payment_accounts(account_list, allowable_card_types: List) -> List\n"})}),"\n",(0,s.jsx)(n.p,{children:"Gets a list of all payment accounts and filters them by if the card is\naccepted at a particular court."}),"\n",(0,s.jsx)(n.h4,{id:"arguments-4",children:"Arguments"}),"\n",(0,s.jsx)(n.p,{children:"account_list:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"allowable_card_types"})," - a list of the accepted card types at a court, usually\nfrom the 'allowablecardtypes' dict entry in\n",(0,s.jsx)(n.a,{href:"interview_logic#get_full_court_info",children:"get_full_court_info"}),"'s response"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"returns-3",children:"Returns"}),"\n",(0,s.jsx)(n.p,{children:"the list of payment account choices that are valid for a particular court"}),"\n",(0,s.jsx)("a",{id:"EFSPIntegration.conversions.payment_account_labels"}),"\n",(0,s.jsx)(n.h3,{id:"payment_account_labels",children:"payment_account_labels"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def payment_account_labels(resp: ApiResponse) -> Optional[List[Dict]]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Returns all payment accounts as choices, without filters."}),"\n",(0,s.jsx)("a",{id:"EFSPIntegration.conversions.filing_id_and_label"}),"\n",(0,s.jsx)(n.h3,{id:"filing_id_and_label",children:"filing_id_and_label"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'def filing_id_and_label(case: Mapping,\n                        style: str = "FILING_ID") -> Dict[str, str]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Converts a raw case information from ",(0,s.jsx)(n.a,{href:"py_efsp_client#get_filing_list",children:"proxy_conn.get_filing_list()"}),"\ninto a key-value pair, where the key is the filing id and the value is the user-facing label\nfor that filing."]}),"\n",(0,s.jsx)("a",{id:"EFSPIntegration.conversions.get_tyler_roles"}),"\n",(0,s.jsx)(n.h3,{id:"get_tyler_roles",children:"get_tyler_roles"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def get_tyler_roles(\n        proxy_conn: ProxyConnection,\n        login_data: Optional[Mapping],\n        user_details: Optional[ApiResponse] = None) -> Tuple[bool, bool]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Gets whether or not the user of this interview is a Tyler Admin, and a 'global' admin.\nThe global admin means that they are allowed to change specific Global payment methods,\nand can be listed under the 'global server admins' section of the 'efile proxy' settings in the\nDAConfig"})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var i=t(6540);const s={},r=i.createContext(s);function a(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);