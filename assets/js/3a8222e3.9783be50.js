"use strict";(self.webpackChunkdocassemble_assembly_line_documentation=self.webpackChunkdocassemble_assembly_line_documentation||[]).push([[9881],{1562:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>c,metadata:()=>t,toc:()=>r});const t=JSON.parse('{"id":"components/AssemblyLine/custom_jinja_filters","title":"AssemblyLine.custom_jinja_filters","description":"catchall\\\\_options","source":"@site/docs/components/AssemblyLine/custom_jinja_filters.md","sourceDirName":"components/AssemblyLine","slug":"/components/AssemblyLine/custom_jinja_filters","permalink":"/docs/components/AssemblyLine/custom_jinja_filters","draft":false,"unlisted":false,"editUrl":"https://github.com/SuffolkLITLab/docassemble-AssemblyLine-documentation/edit/main/docs/components/AssemblyLine/custom_jinja_filters.md","tags":[],"version":"current","frontMatter":{"sidebar_label":"custom_jinja_filters","title":"AssemblyLine.custom_jinja_filters"}}');var i=l(4848),s=l(8453);const c={sidebar_label:"custom_jinja_filters",title:"AssemblyLine.custom_jinja_filters"},a=void 0,o={},r=[{value:"catchall_options",id:"catchall_options",level:4},{value:"catchall_label",id:"catchall_label",level:4},{value:"catchall_datatype",id:"catchall_datatype",level:4},{value:"catchall_question",id:"catchall_question",level:4},{value:"catchall_subquestion",id:"catchall_subquestion",level:4},{value:"if_final",id:"if_final",level:4},{value:"catchall_fields_code",id:"catchall_fields_code",level:4}];function d(e){const n={code:"code",em:"em",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h4,{id:"catchall_options",children:"catchall_options"}),"\n",(0,i.jsx)(n.p,{children:"Jinja2 filter to support defining options for DACatchAll fields inside a DOCX template."}),"\n",(0,i.jsx)(n.p,{children:"This filter takes a list of items, which can be strings, dictionaries, or tuples,\nand converts them into a list of tuples containing the code and label for each option."}),"\n",(0,i.jsx)(n.p,{children:"The items can be in various formats:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["String: ",(0,i.jsx)(n.code,{children:'"code: label"'})]}),"\n",(0,i.jsxs)(n.li,{children:["Dictionary: ",(0,i.jsx)(n.code,{children:'\\{"code": "label"\\}'})]}),"\n",(0,i.jsxs)(n.li,{children:["Tuple: ",(0,i.jsx)(n.code,{children:'("code", "label")'})]}),"\n",(0,i.jsx)(n.li,{children:"List of any of the above types"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The resulting list of tuples is assigned to the ",(0,i.jsx)(n.code,{children:"_catchall_options"})," attribute of the\nDACatchAll object, which can then be used to populate the options in the catchall field."]}),"\n",(0,i.jsx)(n.p,{children:"Example usage in a DOCX template:"}),"\n",(0,i.jsxs)(n.p,{children:["Example in an interview with ",(0,i.jsx)(n.code,{children:"features: use catchall: True"})," turned on:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'\\{\\{ my_catchall_field | catchall_options("code1: label1", "code2: label2") \\}\\}\n\n\\{\\{ my_catchall_field_2 | catchall_options(\\{"code1": "label1"\\}, \\{"code2": "label2"\\}) \\}\\}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'---\nif: |\n    hasattr(x, "_catchall_options")\ngeneric object: DACatchAll\nquestion: |\n    $\\{ x.object_name() \\}?\nfields:\n    - $\\{ x.object_name() \\}: x.value\n      code: x._catchall_options\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"value"})," ",(0,i.jsx)(n.em,{children:"DACatchAll"})," - The DACatchAll object to which the options will be assigned."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"*raw_items"})," - A variable number of arguments representing the options to be added."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"DACatchAll"})," - The modified DACatchAll object with the assigned options."]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"catchall_label",children:"catchall_label"}),"\n",(0,i.jsx)(n.p,{children:"Jinja2 filter to allow you to define a label for a DACatchAll field inside a DOCX template."}),"\n",(0,i.jsxs)(n.p,{children:["This filter takes a label string and assigns it to the ",(0,i.jsx)(n.code,{children:"label"})," attribute of the\nDACatchAll object. This label can be used to provide a more descriptive name for the\ncatchall field in the user interface."]}),"\n",(0,i.jsxs)(n.p,{children:["Example usage in a DOCX template:\nExample in an interview with ",(0,i.jsx)(n.code,{children:"features: use catchall: True"})," turned on:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'\\{\\{ my_catchall_field | catchall_label("My Custom Label") \\}\\}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'---\ngeneric object: DACatchAll\nquestion: |\n    $\\{ x.label if hasattr(x, "label") else x.object_name() \\}?\nfields:\n    - $\\{ x.label if hasattr(x, "label") else x.object_name() \\}: x.value\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"value"})," ",(0,i.jsx)(n.em,{children:"DACatchAll"})," - The DACatchAll object to which the label will be assigned."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"label"})," ",(0,i.jsx)(n.em,{children:"str"})," - The label string to assign to the DACatchAll object."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"DACatchAll"})," - The modified DACatchAll object with the assigned label."]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"catchall_datatype",children:"catchall_datatype"}),"\n",(0,i.jsx)(n.p,{children:"Jinja2 filter to allow you to define a datatype for a DACatchAll field inside a DOCX template."}),"\n",(0,i.jsxs)(n.p,{children:["This filter takes a datatype string and assigns it to the ",(0,i.jsx)(n.code,{children:"datatype"})," attribute of the\nDACatchAll object. This can be useful for specifying the type of data expected in the\ncatchall field."]}),"\n",(0,i.jsx)(n.p,{children:"Example usage in a DOCX template:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'\\{\\{ my_catchall_field | catchall_datatype("radio") \\}\\}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"value"})," ",(0,i.jsx)(n.em,{children:"DACatchAll"})," - The DACatchAll object to which the datatype will be assigned."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"datatype"})," ",(0,i.jsx)(n.em,{children:"str"})," - The datatype string to assign to the DACatchAll object."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"DACatchAll"})," - The modified DACatchAll object with the assigned datatype."]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"catchall_question",children:"catchall_question"}),"\n",(0,i.jsx)(n.p,{children:"Jinja2 filter to allow you to define a question for a DACatchAll field inside a DOCX template."}),"\n",(0,i.jsxs)(n.p,{children:["This filter takes a question string and assigns it to the ",(0,i.jsx)(n.code,{children:"question"})," attribute of the\nDACatchAll object. This can be useful for providing a specific question or prompt\nrelated to the catchall field."]}),"\n",(0,i.jsx)(n.p,{children:"Example usage in a DOCX template:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'\\{\\{ my_catchall_field | catchall_question("What additional information do you need?") \\}\\}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"value"})," ",(0,i.jsx)(n.em,{children:"DACatchAll"})," - The DACatchAll object to which the question will be assigned."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"question"})," ",(0,i.jsx)(n.em,{children:"str"})," - The question string to assign to the DACatchAll object."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"DACatchAll"})," - The modified DACatchAll object with the assigned question."]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"catchall_subquestion",children:"catchall_subquestion"}),"\n",(0,i.jsx)(n.p,{children:"Jinja2 filter to allow you to define a subquestion for a DACatchAll field inside a DOCX template."}),"\n",(0,i.jsxs)(n.p,{children:["This filter takes a subquestion string and assigns it to the ",(0,i.jsx)(n.code,{children:"subquestion"})," attribute of the\nDACatchAll object. This can be useful for providing additional context or instructions\nrelated to the catchall field."]}),"\n",(0,i.jsx)(n.p,{children:"Example usage in a DOCX template:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'\\{\\{ my_catchall_field | catchall_subquestion("Please provide additional details.") \\}\\}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"value"})," ",(0,i.jsx)(n.em,{children:"DACatchAll"})," - The DACatchAll object to which the subquestion will be assigned."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"subquestion"})," ",(0,i.jsx)(n.em,{children:"str"})," - The subquestion string to assign to the DACatchAll object."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"DACatchAll"})," - The modified DACatchAll object with the assigned subquestion."]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"if_final",children:"if_final"}),"\n",(0,i.jsxs)(n.p,{children:["Jinja2 filter to only seek the definition of a variable if the current value of ",(0,i.jsx)(n.code,{children:"i"}),'\nis equal to the expected value (normally "final"); otherwise,\nreturn a placeholder.']}),"\n",(0,i.jsx)(n.p,{children:"This is useful in ALDocument DOCX templates where you want to show a placeholder when\nthe document is being generated for preview or testing, but let Docassemble trigger\nthe actual value when the document is being generated for final output."}),"\n",(0,i.jsx)(n.p,{children:"E.g., to show a placeholder for a signature field when the document is being\nshown to the signer, but show the actual signature when the document is finalized."}),"\n",(0,i.jsx)(n.p,{children:'The default placeholder is "[ signature ]" if the variable name follows the pattern "users[0].signature",\nor [ variable_name ] if it is not an attribute of an item.'}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"i"}),' will be the value from the template\'s context unless it is explicitly passed,\nas in an ALDocument\'s "preview" or "final" values.']}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(n.p,{children:"Contents of test_if_final.docx:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jinja",children:"\\{\\{ users[0].signature | if_final \\}\\}\n"})}),"\n",(0,i.jsxs)(n.p,{children:['Returns "[ signature ]" if ',(0,i.jsx)(n.code,{children:"i"}),' (passed to the context of the attachment block) is not "final",\notherwise the actual value of ',(0,i.jsx)(n.code,{children:"users[0].signature"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'---\ninclude:\n- assembly_line.yml\n---\nmandatory: True\ncode: |\n    preview_screen\n    final_screen\n---\nquestion: |\n    Here is what it looks like unsigned\nsubquestion: |\n    $\\{ test_if_final_attachment.as_pdf(key="preview") \\}\ncontinue button field: preview_screen\n---\nquestion: |\n    Here is what it looks like signed\nsubquestion: |\n    $\\{ test_if_final_attachment.as_pdf(key="final") \\}\nevent: final_screen\n---\nobjects:\n    - test_if_final_attachment: ALDocument.using(title="test_if_final", filename="test_if_final")\n---\nattachment:\n    variable name: test_if_final_attachment[i]\n    docx template file: test_if_final.docx\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"context"})," ",(0,i.jsx)(n.em,{children:"Jinja2Context"})," - The Jinja2 context, automatically passed by the ",(0,i.jsx)(n.code,{children:"pass_context"})," decorator."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"value"})," ",(0,i.jsx)(n.em,{children:"Any"})," - The original value as passed to the filter."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"i"})," ",(0,i.jsx)(n.em,{children:"str, optional"})," - The current value of ",(0,i.jsx)(n.code,{children:"i"}),". If not provided, it will be fetched from the context."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"expected_i"})," ",(0,i.jsx)(n.em,{children:"Union[str, List[str]], optional"})," - The expected value(s) of ",(0,i.jsx)(n.code,{children:"i"})," to trigger passthrough of ",(0,i.jsx)(n.code,{children:"value"}),'.\nDefaults to "final".']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"placeholder"})," ",(0,i.jsx)(n.em,{children:"str, optional"})," - The placeholder string to return if the condition is not met. If\nnot provided, a default placeholder will be generated based on the variable name."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Any"})," - The original ",(0,i.jsx)(n.code,{children:"value"})," if ",(0,i.jsx)(n.code,{children:"i"})," matches ",(0,i.jsx)(n.code,{children:"expected_i"}),", otherwise the ",(0,i.jsx)(n.code,{children:"placeholder"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"catchall_fields_code",children:"catchall_fields_code"}),"\n",(0,i.jsx)(n.p,{children:"Create Docassemble code for a catchall field with the appropriate datatypes."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"value"})," ",(0,i.jsx)(n.em,{children:"DACatchAll"})," - The DACatchAll object containing the question and options."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,i.jsx)(n.p,{children:"List[Dict[str, Any]]: A dictionary containing the Docassemble code for the catchall question."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,l)=>{l.d(n,{R:()=>c,x:()=>a});var t=l(6540);const i={},s=t.createContext(i);function c(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);