"use strict";(self.webpackChunkdocassemble_assembly_line_documentation=self.webpackChunkdocassemble_assembly_line_documentation||[]).push([[2297],{4990:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>c,frontMatter:()=>o,metadata:()=>a,toc:()=>d});var t=i(4848),s=i(8453);const o={id:"customizing_interview",title:"Editing your interview",sidebar_label:"Editing your interview",slug:"customizing_interview"},r=void 0,a={id:"authoring/customizing_interview",title:"Editing your interview",description:"Edit your completed draft interview in the Docassemble playground",source:"@site/docs/authoring/customizing_interview.md",sourceDirName:"authoring",slug:"/authoring/customizing_interview",permalink:"/docs/authoring/customizing_interview",draft:!1,unlisted:!1,editUrl:"https://github.com/SuffolkLITLab/docassemble-AssemblyLine-documentation/edit/main/docs/authoring/customizing_interview.md",tags:[],version:"current",frontMatter:{id:"customizing_interview",title:"Editing your interview",sidebar_label:"Editing your interview",slug:"customizing_interview"},sidebar:"docs",previous:{title:"Using GitHub",permalink:"/docs/authoring/github"},next:{title:"Review Screen\n",permalink:"/docs/authoring/review_screen"}},l={},d=[{value:"Edit your completed draft interview in the Docassemble playground",id:"edit-your-completed-draft-interview-in-the-docassemble-playground",level:2},{value:"Double-check that you got things right in the Weaver stage",id:"double-check-that-you-got-things-right-in-the-weaver-stage",level:2},{value:"Work towards a readable, usable interview",id:"work-towards-a-readable-usable-interview",level:2},{value:"Getting the draft into your playground",id:"getting-the-draft-into-your-playground",level:2},{value:"How to edit your interview",id:"how-to-edit-your-interview",level:2},{value:"Marking a field as optional (not required)",id:"marking-a-field-as-optional-not-required",level:2},{value:"Controlling the order of questions",id:"controlling-the-order-of-questions",level:2},{value:"Order is usually determined by the first variable on the screen",id:"order-is-usually-determined-by-the-first-variable-on-the-screen",level:3},{value:"Adding conditional logic to the screen order",id:"adding-conditional-logic-to-the-screen-order",level:2},{value:"Showing and hiding fields on an individual screen",id:"showing-and-hiding-fields-on-an-individual-screen",level:2},{value:"Adding conditional logic inside an attachment block",id:"adding-conditional-logic-inside-an-attachment-block",level:2},{value:"Adding new screens",id:"adding-new-screens",level:2},{value:"Adding questions to the interview",id:"adding-questions-to-the-interview",level:3},{value:"Adding new informational screens",id:"adding-new-informational-screens",level:3},{value:"Adding help",id:"adding-help",level:2},{value:"Why is this question getting asked?!!!",id:"why-is-this-question-getting-asked",level:2},{value:"Understanding the question library",id:"understanding-the-question-library",level:3},{value:"Learning why a question got asked",id:"learning-why-a-question-got-asked",level:3},{value:"Identifying and fixing problems caused by typos",id:"identifying-and-fixing-problems-caused-by-typos",level:3},{value:"Questions that are needed for other questions, like <code>user_role</code> or the number of people in a list",id:"questions-that-are-needed-for-other-questions-like-user_role-or-the-number-of-people-in-a-list",level:3},{value:"Customizing settings that you overlooked in the Weaver",id:"customizing-settings-that-you-overlooked-in-the-weaver",level:2},{value:"Setting the form type",id:"form-type",level:3},{value:"Setting the number of people in a group, such as the number of <code>users</code>",id:"list-definition",level:3},{value:"Placing a limit on the number of items gathered in a list",id:"placing-a-limit-on-the-number-of-items-gathered-in-a-list",level:4},{value:"How to make changes safely",id:"how-to-make-changes-safely",level:2}];function h(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"edit-your-completed-draft-interview-in-the-docassemble-playground",children:"Edit your completed draft interview in the Docassemble playground"}),"\n",(0,t.jsxs)(n.p,{children:["While the Weaver is a menu-driven, step-by-step process, you'll make further\nedits in the Playground. In the playground, you can directly edit the\n",(0,t.jsx)(n.a,{href:"https://suffolklitlab.org/legal-tech-class/docs/yaml",children:"YAML"})," text to:"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Change the wording of questions"}),"\n",(0,t.jsx)(n.li,{children:"Change the datatype of questions and add show/hide logic"}),"\n",(0,t.jsx)(n.li,{children:"Edit the order screens appear in"}),"\n",(0,t.jsx)(n.li,{children:"Add conditional and branching logic"}),"\n",(0,t.jsx)(n.li,{children:"Add new variables, such as variables calculated by code"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Save your work frequently, and don't be intimidated. For the most part,\nmany changes can be understood by reading the text and then experimenting."}),"\n",(0,t.jsxs)(n.p,{children:["This pages offers information about making some common, simple edits.\nYou may also want to take this time to read through the materials in\nthe ",(0,t.jsx)(n.a,{href:"https://suffolklitlab.org/legal-tech-class/docs/introduction-to-docassemble",children:"Legal Tech Class"}),"\nabout the underlying Docassemble platform and how it works."]}),"\n",(0,t.jsx)(n.h2,{id:"double-check-that-you-got-things-right-in-the-weaver-stage",children:"Double-check that you got things right in the Weaver stage"}),"\n",(0,t.jsx)(n.p,{children:"Some common mistakes, like typos in the labels, can lead to a lot of extra work.\nIf you see \"extra\" questions appear, it's possible that you didn't get the names\nquite right, perhaps something as simple as a typo."}),"\n",(0,t.jsx)(n.h2,{id:"work-towards-a-readable-usable-interview",children:"Work towards a readable, usable interview"}),"\n",(0,t.jsxs)(n.p,{children:["You should also take this chance to review our guidance about\n",(0,t.jsx)(n.a,{href:"/docs/style_guide/question_overview",children:"writing good questions"}),". While you edit\nyour interview, work steadily to make it better."]}),"\n",(0,t.jsx)(n.h2,{id:"getting-the-draft-into-your-playground",children:"Getting the draft into your playground"}),"\n",(0,t.jsx)(n.p,{children:"When you have finished using the Weaver, download your package. This will put a\n.zip file in the Downloads folder on your computer."}),"\n",(0,t.jsxs)(n.admonition,{title:"If you are using Safari on a Mac OS computer",type:"warning",children:[(0,t.jsx)(n.p,{children:"Safari, by default, will turn your downloaded package into\na folder on your PC."}),(0,t.jsx)(n.p,{children:"Before downloading the package, turn off that behavior:"}),(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"open Safari"}),"\n",(0,t.jsx)(n.li,{children:"click Preferences"}),"\n",(0,t.jsxs)(n.li,{children:["under the General tab, uncheck the option ",(0,t.jsx)(n.strong,{children:"Open 'safe' files after downloading"})]}),"\n"]})]}),"\n",(0,t.jsx)(n.p,{children:'First, create a new "Project" in your playground. Using projects will\nhelp you keep your Docassemble code organized.'}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"playground | projects ",src:i(1650).A+"",width:"486",height:"237"})}),"\n",(0,t.jsxs)(n.p,{children:["Next, upload this file to the Docassemble playground's ",(0,t.jsx)(n.code,{children:"Packages"})," folder."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Folders | Packages ",src:i(2937).A+"",width:"804",height:"437"})}),"\n",(0,t.jsx)(n.h2,{id:"how-to-edit-your-interview",children:"How to edit your interview"}),"\n",(0,t.jsx)(n.p,{children:"Navigate back to the main Playground window. You should see the YAML file\nwith your interview's draft code."}),"\n",(0,t.jsx)(n.p,{children:"Scroll through and take a look at the code. You will see:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"code blocks setting defaults for your interview"}),"\n",(0,t.jsxs)(n.li,{children:["a ",(0,t.jsx)(n.code,{children:"main order"})," and ",(0,t.jsx)(n.code,{children:"interview order"})," block which list some of the variables\nthat your interview uses, in order."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"question:"})," blocks that contain the text of questions and the list of fields\nthat are asked on each screen"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["You do not need to understand all of the code. Absorb what you can, and feel free\nto experiment. Save your code often, preferably to a ",(0,t.jsx)(n.a,{href:"/docs/authoring/github",children:"GitHub"})," repository."]}),"\n",(0,t.jsx)(n.p,{children:'You will likely start by clicking the "Save and Run" button to try running your\ninterview through to the end. Note any awkward wording or changes you want to make.'}),"\n",(0,t.jsxs)(n.p,{children:["Use the ",(0,t.jsx)(n.code,{children:"id"})," that is on the top of each screen to find the screen that you want to change.\nThen, change the text that you want to change, or change the order of fields."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"id: request a guardianship",src:i(1815).A+"",width:"1418",height:"534"})}),"\n",(0,t.jsxs)(n.p,{children:["Below we describe some of the most common starting customizations you will make,\nespecially changes that interact with an Assembly Line convention.\nYou can use any ",(0,t.jsx)(n.a,{href:"https://docassemble.org/docs/fields.html",children:"Docassemble feature"}),"\nin your interview."]}),"\n",(0,t.jsx)(n.h2,{id:"marking-a-field-as-optional-not-required",children:"Marking a field as optional (not required)"}),"\n",(0,t.jsxs)(n.p,{children:["Add the ",(0,t.jsx)(n.code,{children:"required: False"})," modifier to mark a field as optional.\nFor usability purposes, you might want to also add the phrase (optional)\nto the label."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"---\nid: Tell me more about Respondent\nquestion: |\n  Tell me more about the ${ other_parties[0] }.\nfields:\n  - Name: user_name       \n  - Attorney bar number (optional): bar_number\n    required: False\n"})}),"\n",(0,t.jsx)(n.h2,{id:"controlling-the-order-of-questions",children:"Controlling the order of questions"}),"\n",(0,t.jsxs)(n.p,{children:["Locate the ",(0,t.jsx)(n.code,{children:"interview_order"})," block in your YAML file.\nMove the variable name that you want to ask earlier in your interview to\nthe place you want it to be asked."]}),"\n",(0,t.jsx)(n.p,{children:"It usually looks something like this:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"---\n#################### Interview order #####################\ncomment: |\n  Controls order and branching logic of questions in the interview\nid: interview_order_Guardianship_Assistant\ncode: |\n  other_parties[0].name.first\n  if not last_option: \n    all_done\n  users[0].name.first\n  other_parties[0].birthdate  \n"})}),"\n",(0,t.jsx)(n.p,{children:"In the example above: if you wanted the other party's birthdate to be asked before\nyou get the name of the user, you would simply switch the order of those 2 lines."}),"\n",(0,t.jsx)(n.admonition,{title:"Learn more about interview order",type:"note",children:(0,t.jsxs)(n.p,{children:["This section mentions a bit about interview order, but if you want to learn more,\nyou can read it on the ",(0,t.jsx)(n.a,{href:"https://suffolklitlab.org/legal-tech-class/docs/practical-guide-docassemble/controlling-interview-order",children:"Legal Tech Class"})," site."]})}),"\n",(0,t.jsx)(n.h3,{id:"order-is-usually-determined-by-the-first-variable-on-the-screen",children:"Order is usually determined by the first variable on the screen"}),"\n",(0,t.jsx)(n.p,{children:"When the Weaver creates the interview order block, it adds the first (and only the first)\nvariable on each screen to the interview order block. This lets you change the order\nquickly."}),"\n",(0,t.jsxs)(n.p,{children:["For example, if we wanted to add this question to the interview order block below,\nyou would add the variable ",(0,t.jsx)(n.code,{children:"temporary_needed"})," to the interview order block because\n",(0,t.jsx)(n.code,{children:"temporary_needed"})," is the first variable on this screen. When Docassemble tries to\ndefine ",(0,t.jsx)(n.code,{children:"temporary_needed"}),", it will show this screen and ask all of the questions\nmentioned on it."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"---\nid: Temporary Guardianship\nquestion: | \n  Do you need to the court to decide on this case in the next 90 days?\nsubquestion: |\n  ${ collapse_template(when_temporary_guardianship_possible_template) }\nfields: \n  - I need a temporary guardianship: temporary_needed\n    datatype: yesnoradio    \n  - Do you need it right now?: need_now\n    datatype: yesnoradio\n    show if: temporary_needed\n"})}),"\n",(0,t.jsx)(n.h2,{id:"adding-conditional-logic-to-the-screen-order",children:"Adding conditional logic to the screen order"}),"\n",(0,t.jsxs)(n.p,{children:["If a screen is conditional, you can add an ",(0,t.jsx)(n.code,{children:"if"})," statement so that it only\nappears when the condition is satisfied."]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"id: interview_order_Guardianship_Assistant\ncode: |\n  users[0].name.first\n  users.gather()\n  if has_co_petitioner:\n    users[1].address.address\n  else:\n    users[0].address.city\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The syntax inside your interview order block is written in Python. You\ncan write more complex logic, including ",(0,t.jsx)(n.code,{children:"elif"})," (for else if), use ",(0,t.jsx)(n.code,{children:"and"}),", ",(0,t.jsx)(n.code,{children:"or"}),"\nand comparisons with ",(0,t.jsx)(n.code,{children:"=="}),", ",(0,t.jsx)(n.code,{children:"in"})," etc."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"if"})," statements can also be nested, using additional levels of indentation."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"id: interview_order_Guardianship_Assistant\ncode: |\n  users[0].name.first\n  users.gather()\n  if has_co_petitioner:\n    users[1].address.address\n    if users[1].has_separate_mailing_address:\n      users[1].mailing_address.address\n  else:\n    users[0].address.city\n"})}),"\n",(0,t.jsx)(n.h2,{id:"showing-and-hiding-fields-on-an-individual-screen",children:"Showing and hiding fields on an individual screen"}),"\n",(0,t.jsxs)(n.p,{children:["To make a single field show or disappear on a screen that asks for some optional\ninformation, use the ",(0,t.jsx)(n.a,{href:"https://docassemble.org/docs/fields.html#show%20if",children:(0,t.jsx)(n.code,{children:"show if"})})," modifier."]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"---\nid: Tell me more about Respondent\nquestion: |\n  Tell me more about the ${ other_parties[0] }.\nfields:\n  - Date of Birth: other_parties[0].birthdate\n    datatype: date        \n  - Primary Language: primary_language\n    choices:\n      - English\n      - Spanish\n      - Other\n  # You can check if the option is equal to an exact value\n  - Other language: primary_language_other\n    show if:\n      variable: primary_language\n      is: Other\n  - Is ${ other_parties[0] } a veteran?: op_is_veteran\n    datatype: yesno\n  # Or use the shorter syntax to check only if it is True\n  - What branch of the military?: armed_forces_branch\n    show if: op_is_veteran\n  # Or use the `code` option to check for a value defined on another screen\n  - Where does ${ other_parties[0] } work?: op_employer\n    show if:\n      code: |\n        op_is_employed\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"show if"})," only allows with one variable at a time. If you need to check the value of\nmultiple variables in one ",(0,t.jsx)(n.strong,{children:"if"})," statement, you need to use the more complex\n",(0,t.jsx)(n.a,{href:"https://docassemble.org/docs/fields.html#js%20show%20if",children:(0,t.jsx)(n.code,{children:"js show if"})}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["When you use ",(0,t.jsx)(n.code,{children:"js show if"}),", you need to use a JavaScript expression that uses the\nfunction ",(0,t.jsx)(n.code,{children:"val()"})," at least once. ",(0,t.jsx)(n.code,{children:"val()"})," is a JavaScript function that returns\nthe value of a variable name that is visible on screen. It takes the name of the\nDocassemble variable in quotes as its only parameter."]}),"\n",(0,t.jsxs)(n.p,{children:["Here is a small example of a ",(0,t.jsx)(n.code,{children:"js show if"})," expression:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'---\nid: Tell me more about Respondent\nquestion: |\n  Tell me more about the ${ other_parties[0] }.\nfields:\n  - Is ${ other_parties[0] } employed?: other_parties[0].is_employed\n    datatype: yesnoradio\n  - Is ${ other_parties[0] } a parent of your child?: other_parties[0].joint_parent\n    datatype: yesnoradio\n  - ${ other_parties[0] }\'s monthly income: other_parties[0].income\n    datatype: currency\n    js show if: |\n      val("other_parties[0].is_employed") && val("other_parties[0].joint_parent")\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Check the ",(0,t.jsxs)(n.a,{href:"https://docassemble.org/docs/fields.html#js%20show%20if",children:[(0,t.jsx)(n.code,{children:"js show if"}),"\ndocumentation"]})," to learn\nhow to use different combinations of values in a ",(0,t.jsx)(n.code,{children:"js show if"}),' expression. The\nkey is that you\'ll use ordinary JavaScript keywords to do any comparisons.\nJavaScript is its own language, and keywords such as "or", "and" and even "=="\nwork slightly differently, as explained in the Docassemble documentation. You\ncan also use a general resource that documents JavaScript to learn more.']}),"\n",(0,t.jsx)(n.h2,{id:"adding-conditional-logic-inside-an-attachment-block",children:"Adding conditional logic inside an attachment block"}),"\n",(0,t.jsx)(n.p,{children:"If you would like to make the display of a variable in the attachment conditional,\nyou can use a multi-line Mako statement right inside the attachment block:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'attachment:\n  variable name: my_document[i]\n  pdf template file: my_document.pdf\n  fields:\n    - "signature": |\n        % if i == "final":\n        ${ users.signature }\n        % endif\n'})}),"\n",(0,t.jsx)(n.p,{children:"It is a good habit to use these multi-line blocks so that the logic is easy to\nread and understand later."}),"\n",(0,t.jsxs)(n.p,{children:["You can use exactly the ",(0,t.jsx)(n.a,{href:"https://docassemble.org/docs/markup.html#mako",children:"same Mako\nsyntax"})," in the attachment block\nthat you would use inside a ",(0,t.jsx)(n.code,{children:"question"})," or ",(0,t.jsx)(n.code,{children:"subquestion"})," modifier."]}),"\n",(0,t.jsx)(n.h2,{id:"adding-new-screens",children:"Adding new screens"}),"\n",(0,t.jsx)(n.h3,{id:"adding-questions-to-the-interview",children:"Adding questions to the interview"}),"\n",(0,t.jsx)(n.p,{children:"When you add a new question, it should go in at least 2, and possibly 3 places:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"The new screen that asks the question"}),"\n",(0,t.jsx)(n.li,{children:"The interview order block"}),"\n",(0,t.jsx)(n.li,{children:"The review screen block, so it can be edited later"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["The simplest option is probably to find a question that is a good model for your\nnew question, copy and paste it, and change the text, ",(0,t.jsx)(n.code,{children:"id"}),", and variable names."]}),"\n",(0,t.jsx)(n.p,{children:"For example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"---\nid: any unique id to help you find this question later\nquestion: |\n  Your question\nsubquestion: |\n  The subquestion\nfields:\n  - Prompt 1: variable_1\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Then you would need to make sure the interview order block mentioned ",(0,t.jsx)(n.code,{children:"variable_1"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"---\nid: interview_order_Guardianship_Assistant\ncode: |\n  other_parties[0].name.first\n  if not last_option: \n    all_done\n  # highlight-start\n  variable_1\n  # highlight-end\n  users[0].name.first\n  other_parties[0].birthdate  \n"})}),"\n",(0,t.jsxs)(n.p,{children:["You should also find the ",(0,t.jsx)(n.code,{children:"review:"})," block in your\ninterview, and add a way for your user to change\ntheir answer."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"  - Edit: variable_1\n    button: |\n      **Variable 1**:\n      ${ variable_1 }\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Learn more about ",(0,t.jsx)(n.a,{href:"https://docassemble.org/docs/fields.html#review",children:"review screens"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"adding-new-informational-screens",children:"Adding new informational screens"}),"\n",(0,t.jsxs)(n.p,{children:["Informational screens are like screens that ask questions,\nbut instead of a ",(0,t.jsx)(n.code,{children:"fields"})," statement, you can identify them\nusing ",(0,t.jsx)(n.code,{children:"continue button field"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"---\nid: an informational screen\ncontinue button field: variable_identifying_my_info_screen\nquestion: |\n  Here is some important information\nsubquestion: |\n  I wanted to tell you that ...\n"})}),"\n",(0,t.jsxs)(n.p,{children:["You can add the informational screen to the interview order\nblock by adding the variable from the ",(0,t.jsx)(n.code,{children:"continue button field"})," keyword:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"---\nid: interview_order_Guardianship_Assistant\ncode: |\n  other_parties[0].name.first\n  if not last_option: \n    all_done\n  variable_1\n  # highlight-start\n  variable_identifying_my_info_screen\n  # highlight-end\n  users[0].name.first\n  other_parties[0].birthdate  \n"})}),"\n",(0,t.jsx)(n.h2,{id:"adding-help",children:"Adding help"}),"\n",(0,t.jsxs)(n.p,{children:["You can add help to most questions and options with\nthe ",(0,t.jsx)(n.code,{children:"help: |"})," modifier, like this:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"fields:\n  - What are your pronouns?: users[0].pronouns\n    help: |\n      We ask for your pronouns so we can address you\n      the way you prefer in court.\n  - What kind of car do you drive?: user_car\n    datatype: radio\n    choices:\n      - Honda\n        help: |\n          Honda makes Civics and Accords\n      - Ford\n        help: |\n          Ford makes the F150\n"})}),"\n",(0,t.jsx)(n.p,{children:"These add a (?) bubble near the option or question."}),"\n",(0,t.jsxs)(n.p,{children:["For longer text, we find that the ",(0,t.jsx)(n.strong,{children:"progressive disclosure"})," element has tested well with users."]}),"\n",(0,t.jsxs)(n.p,{children:["You can use this in your interview by adding a ",(0,t.jsx)(n.code,{children:"template"})," block and using the ",(0,t.jsx)(n.code,{children:"collapse_template"}),"\nfunction with it, like this:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"---\nid: example question\nquestion: |\n  What is your favorite fruit?\nsubquestion: |\n  ${ collapse_template(fruit_explanation) }\n---\ntemplate: fruit_explanation\nsubject: |\n  What is a fruit?\ncontent: |\n  Fruit is the fleshy or dry ripened ovary of a flowering plant, enclosing the seed or seeds.\n"})}),"\n",(0,t.jsxs)(n.p,{children:["We usually don't recommend using the other options,\nwhich include help for the whole page (it comes too late) or ",(0,t.jsx)(n.code,{children:"terms"})," (they get very cluttered very quickly)."]}),"\n",(0,t.jsxs)(n.p,{children:["A more complete guide to ",(0,t.jsx)(n.a,{href:"/docs/coding_style/yaml_interface#adding-help-in-context",children:"helping your user"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"why-is-this-question-getting-asked",children:"Why is this question getting asked?!!!"}),"\n",(0,t.jsx)(n.p,{children:"Here are a few reasons that a question may be getting\nasked that you did not expect:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["You may have referenced a built-in question from the",(0,t.jsx)(n.br,{}),"\n","question library."]}),"\n",(0,t.jsx)(n.li,{children:"The question might be needed to ask another question,\nsuch as a name to personalize a question, or an address\nto locate a court."}),"\n",(0,t.jsx)(n.li,{children:"You may have made a typo or mistake with your variable\nnames, and ended up asking something that is also defined\nby an Assembly Line question. This could lead to 2 or more\nvery similar questions."}),"\n",(0,t.jsx)(n.li,{children:"You might not have defined something, like the party roles,\nthat your interview now needs to know in order to make sense."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"understanding-the-question-library",children:"Understanding the question library"}),"\n",(0,t.jsxs)(n.p,{children:['Assembly Line interviews almost always have some questions\nthat come from the "question library." The question library\nis just a YAML file named ',(0,t.jsx)(n.code,{children:"ql_baseline.yml"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"It contains questions about people's names, addresses,\nbirthdates, gender and pronouns, and party roles."}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"You can always write your own version of a question in the library."}),"  Docassemble reads your YAML file from top\nto bottom, so if you add your question that defines the same\nvariables after the include block, Docassemble will always use your version."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"You maybe shouldn't write your own version."})," The question library questions are tested by real users. Some customization is to be expected, but be sure you have a clear\nreason for your choice."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Question library questions don't appear in your own YAML file.\nBut you can copy them when your interview is running."}),"\n",(0,t.jsx)(n.p,{children:"Here's how:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:['In the top navigation bar, click the "source" button (it looks like ',(0,t.jsx)(n.code,{children:"</>"}),")."]}),"\n",(0,t.jsx)(n.li,{children:"Scroll down until you see the question text."}),"\n",(0,t.jsxs)(n.li,{children:["Copy it into your own YAML file. Near the other ",(0,t.jsx)(n.code,{children:"question"}),"\nblocks in your interview is the best place. Add the ",(0,t.jsx)(n.code,{children:"---"}),"\nseparator at the beginning of the block you copy."]}),"\n",(0,t.jsx)(n.li,{children:"Make the changes that you want."}),"\n"]}),"\n",(0,t.jsxs)(n.admonition,{type:"note",children:[(0,t.jsxs)(n.mdxAdmonitionTitle,{children:["About ",(0,t.jsx)(n.code,{children:"generic object"})]}),(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.a,{href:"https://docassemble.org/docs/modifiers.html#generic%20object",children:(0,t.jsx)(n.code,{children:"generic object"})})," modifier is a special way to make\none question work for many different objects, like people\nor lists of people."]})]}),"\n",(0,t.jsx)(n.p,{children:"When you customize a question from the question library,\nyou may want to make it specific to one variable in your interview, rather than replace the generic version of the question for any person."}),"\n",(0,t.jsx)(n.p,{children:"To make it specific:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Remove the ",(0,t.jsx)(n.code,{children:"generic object"})," line."]}),"\n",(0,t.jsxs)(n.li,{children:["Replace ",(0,t.jsx)(n.code,{children:"x"})," with your variable name."]}),"\n",(0,t.jsxs)(n.li,{children:["Customize the ",(0,t.jsx)(n.code,{children:"question"})," and ",(0,t.jsx)(n.code,{children:"subquestion"})," as needed."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["For example, suppose your interview asks for a list of\n",(0,t.jsx)(n.code,{children:"guardians"}),". There is no special question about ",(0,t.jsx)(n.code,{children:"guardians"}),"\nin the question library, so your interview will use the ",(0,t.jsx)(n.code,{children:"generic object"}),"\nversion of the question, which looks like this:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"---\nid: name of the first person\nsets:\n  - x[0].name.first\n  - x[0].name.last\n  - x[0].name.middle\n  - x[0].name.suffix\n# highlight-start\ngeneric object: ALPeopleList\n# highlight-end\nquestion: |\n  % if hasattr(x, 'ask_number') and x.ask_number and x.target_number == 1:\n  Name of ${ noun_plural(x.object_name(),1) }\n  % else:\n  Name of your first ${ noun_plural(x.object_name(),1) }\n  % endif\nfields:\n  - code: |\n      x[0].name_fields()\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Here is a version made specific to ",(0,t.jsx)(n.code,{children:"guardians"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"---\nid: name of the first person\nsets:\n  - guardians[0].name.first\n  - guardians[0].name.last\n  - guardians[0].name.middle\n  - guardians[0].name.suffix\nquestion: |\n  What is the name of the first person you want to name as guardian?\nfields:\n  - code: |\n      guardians[0].name_fields()\n"})}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.strong,{children:"specific"})," version of a question is always used\nbefore the ",(0,t.jsx)(n.strong,{children:"generic object"})," version."]}),"\n",(0,t.jsxs)(n.admonition,{type:"note",children:[(0,t.jsxs)(n.mdxAdmonitionTitle,{children:["About the variable ",(0,t.jsx)(n.code,{children:"i"})]}),(0,t.jsxs)(n.p,{children:["Just like ",(0,t.jsx)(n.code,{children:"generic object"})," works for any object,\nthe variable ",(0,t.jsx)(n.code,{children:"i"})," (and other ",(0,t.jsx)(n.a,{href:"https://docassemble.org/docs/fields.html#index%20variables",children:(0,t.jsx)(n.code,{children:"index variables"})}),") lets you write a question for any item\nin a list. Using a ",(0,t.jsx)(n.strong,{children:"specific"})," number (typically, just the first, or 0th item is treated specially) overrides the\none that uses the letter ",(0,t.jsx)(n.code,{children:"i"}),"."]})]}),"\n",(0,t.jsx)(n.h3,{id:"learning-why-a-question-got-asked",children:"Learning why a question got asked"}),"\n",(0,t.jsx)(n.p,{children:"Every screen in Docassemble is asked for a reason, and you can\nalways find out why."}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:['Click the "source" ',(0,t.jsx)(n.code,{children:"</>"})," icon in the top navigation bar."]}),"\n",(0,t.jsx)(n.li,{children:'Scroll down, or search on the page for the text "needed definition of"'}),"\n",(0,t.jsx)(n.li,{children:"Click through a few times, as you might get a few misleading answers first. Typically the one on the bottom of the page is the most relevant."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Typically, a question is asked because:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"The interview order block mentions it."}),"\n",(0,t.jsx)(n.li,{children:"It is mentioned in an attachment."}),"\n",(0,t.jsxs)(n.li,{children:["A mandatory ",(0,t.jsx)(n.code,{children:"code"})," block or ",(0,t.jsx)(n.code,{children:"question"})," uses the answer to the question."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"If you don't want the question to get asked, you'll need to modify\nwhatever screen, code block, or attachment is requiring it."}),"\n",(0,t.jsx)(n.h3,{id:"identifying-and-fixing-problems-caused-by-typos",children:"Identifying and fixing problems caused by typos"}),"\n",(0,t.jsx)(n.p,{children:"Here is a relatively common beginner mistake:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["You added a variable likes ",(0,t.jsx)(n.code,{children:"users1_first_name"})," to your PDF, instead\nof the correct name, which would have been ",(0,t.jsx)(n.code,{children:"users1_name_first"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["You also have a question later that needs the definition of ",(0,t.jsx)(n.code,{children:"users"}),",\nwhich is true for almost every interview (we use the first name on the download screen by default)."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["This may look like the interview is asking the ",(0,t.jsx)(n.strong,{children:"same"})," question twice.\nBut in fact, by using a unique way to ask for the user's name, you\nare asking for two pieces of information. Most likely, the best way for\nyou to fix this is to remove the references to ",(0,t.jsx)(n.code,{children:"users1_first_name"})," in\nyour YAML file."]}),"\n",(0,t.jsxs)(n.p,{children:["You don't need to run the PDF through the Weaver again! You can just delete the incorrect references\nand update the ",(0,t.jsx)(n.code,{children:"attachment"})," block to link the correct variable with\nthe incorrect name in the PDF."]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Find and delete the reference to ",(0,t.jsx)(n.code,{children:"users1_first_name"})," in the\n",(0,t.jsx)(n.code,{children:"interview_order"})," block"]}),"\n",(0,t.jsxs)(n.li,{children:["Delete the ",(0,t.jsx)(n.code,{children:"question"})," block that mentions ",(0,t.jsx)(n.code,{children:"users1_first_name"})]}),"\n",(0,t.jsxs)(n.li,{children:["Delete the ",(0,t.jsx)(n.code,{children:"review"})," block that mentions ",(0,t.jsx)(n.code,{children:"users1_first_name"})]}),"\n",(0,t.jsxs)(n.li,{children:["Find the ",(0,t.jsx)(n.code,{children:"attachment"})," block in your interview. Keep the reference\nto ",(0,t.jsx)(n.code,{children:"users1_first_name"})," on the ",(0,t.jsx)(n.strong,{children:"left"}),", but replace it on the right\nwith the correct name, ",(0,t.jsx)(n.code,{children:"users[0].name.first"})," (or whatever it should be)."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'attachment:\n  pdf file name: my_file.pdf\n  fields:\n    # highlight-start\n    - "users1_first_name": ${ users[0].name.first }\n    # highlight-end\n'})}),"\n",(0,t.jsxs)(n.p,{children:["If you want to, you could also edit the PDF and upload it\nback to your playground. If you do fix the name in the PDF,\nmake sure you also update it in the ",(0,t.jsx)(n.code,{children:"attachment"})," block:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'attachment:\n  pdf file name: my_file.pdf\n  fields:\n    # highlight-start\n    - "users1_name_first": ${ users[0].name.first }\n    # highlight-end\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"questions-that-are-needed-for-other-questions-like-user_role-or-the-number-of-people-in-a-list",children:["Questions that are needed for other questions, like ",(0,t.jsx)(n.code,{children:"user_role"})," or the number of people in a list"]}),"\n",(0,t.jsx)(n.p,{children:"A common scenario for beginners is surprise that one of the\nfirst questions in their interview is something like:"}),"\n",(0,t.jsx)(n.p,{children:'"Are you the person who started the case, or was it started by someone else?"'}),"\n",(0,t.jsx)(n.p,{children:"Or:"}),"\n",(0,t.jsx)(n.p,{children:'"Is there a defendant in this case?"'}),"\n",(0,t.jsx)(n.p,{children:"There is a good reason for these questions. Every interview has at least\none person who is using it. Most have someone on the other side. We\ntry to help people understand who each question asks about by defining\nboth of these roles early on."}),"\n",(0,t.jsx)(n.p,{children:'When you ran the Weaver, you were asked if the person was the plaintiff,\ndefendant, or could be either. If you answered "could be either" your\ninterview will ask for this information.'}),"\n",(0,t.jsxs)(n.p,{children:["Fix this by customizing the ",(0,t.jsx)(n.a,{href:"#form-type",children:"form type"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Similarly, you were asked early in the Weaver if there could be one,\nany number, or at least one for every list of people in your interview.\nIf you didn't answer this at the time, you'll get asked it when you run\nthe interview each time."}),"\n",(0,t.jsxs)(n.p,{children:["Fix this by editing the ",(0,t.jsx)(n.a,{href:"#list-definition",children:"definition of the list"})," so Docassemble knows\nthere is at least one, more than one, or any number of people in\nthe list."]}),"\n",(0,t.jsx)(n.h2,{id:"customizing-settings-that-you-overlooked-in-the-weaver",children:"Customizing settings that you overlooked in the Weaver"}),"\n",(0,t.jsx)(n.h3,{id:"form-type",children:"Setting the form type"}),"\n",(0,t.jsxs)(n.p,{children:["If you are prompted to specify if the user is the plaintiff or defendant but\nthe user ",(0,t.jsx)(n.strong,{children:"always"})," is starting a new action, customize the value of\n",(0,t.jsx)(n.code,{children:"al_form_type"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Look in your interview for a code block that sets the value of ",(0,t.jsx)(n.code,{children:"al_form_type"}),".\nIf you do not see it, copy and modify the block below:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"---\ncode: |\n  al_form_type = 'starts_case'\n"})}),"\n",(0,t.jsx)(n.p,{children:"The valid values are:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Starts a new court case: ",(0,t.jsx)(n.code,{children:"'starts_case'"})]}),"\n",(0,t.jsxs)(n.li,{children:["Filed in or responding to an existing court case: ",(0,t.jsx)(n.code,{children:"'existing_case'"})]}),"\n",(0,t.jsxs)(n.li,{children:["Part of an appeal of a court case: ",(0,t.jsx)(n.code,{children:"'appeal'"})]}),"\n",(0,t.jsxs)(n.li,{children:["Form that is not filed in a court: ",(0,t.jsx)(n.code,{children:"'other_form'"})]}),"\n",(0,t.jsxs)(n.li,{children:["Letter: ",(0,t.jsx)(n.code,{children:"'letter'"})]}),"\n",(0,t.jsxs)(n.li,{children:["Other: ",(0,t.jsx)(n.code,{children:"'other'"})]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:['If the "form type" is not ',(0,t.jsx)(n.code,{children:"starts_case"})," but the party using the form\nis always the plaintiff or defendant, you can also set that directly:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"code: |\n  user_ask_role = 'plaintiff'\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Valid values are either ",(0,t.jsx)(n.code,{children:'"plaintiff"'})," or ",(0,t.jsx)(n.code,{children:'"defendant"'}),'. Use these exact values\neven if the form user is called "petitioner" or "respondent".']}),"\n",(0,t.jsxs)(n.h3,{id:"list-definition",children:["Setting the number of people in a group, such as the number of ",(0,t.jsx)(n.code,{children:"users"})]}),"\n",(0,t.jsxs)(n.p,{children:["If you are prompted to specify whether there is another user or opposing party\nin a case but your form ",(0,t.jsx)(n.strong,{children:"always"})," allows only one user or other party,\ncustomize the definition of ",(0,t.jsx)(n.code,{children:"users"})," and ",(0,t.jsx)(n.code,{children:"other_parties"})," in the ",(0,t.jsx)(n.code,{children:"objects"})," block."]}),"\n",(0,t.jsx)(n.p,{children:"For example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"---\nobjects:\n  - attorneys: ALPeopleList # Uses the default `there_are_any` question, no minimum number\n  - users: ALPeopleList.using(there_are_any=True) # Will prompt one at a time, but asks for at least one\n  - other_parties: ALPeopleList.using(ask_number=True, target_number=1) # Tells Docassemble there is exactly one other_party\n"})}),"\n",(0,t.jsx)(n.h4,{id:"placing-a-limit-on-the-number-of-items-gathered-in-a-list",children:"Placing a limit on the number of items gathered in a list"}),"\n",(0,t.jsxs)(n.p,{children:["If you want to limit the number of items in a list, but there isn't a minimum number,\nyou can add a code block that answers the ",(0,t.jsx)(n.code,{children:"there_is_another"})," question rather than allowing\nthe user to answer it interactively."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"---\nobjects:\n  - users: ALPeopleList # Use the default there_are_any/there_is_another loop gathering method\n---\ncode: |\n  # This block only is reached if they added 2 people the normal way\n  if users.number() >= 2: \n    users.there_is_another = False\n"})}),"\n",(0,t.jsx)(n.h2,{id:"how-to-make-changes-safely",children:"How to make changes safely"}),"\n",(0,t.jsx)(n.p,{children:"You can always:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"change question and subquestion text"}),"\n",(0,t.jsx)(n.li,{children:"change the order of fields and questions"}),"\n",(0,t.jsx)(n.li,{children:"change any of the settings called out above"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Avoid:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"changing the name of variables until you know what you are doing"}),"\n",(0,t.jsx)(n.li,{children:"deleting code until you have first tried commenting it out"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:['"Comment out" code by adding a single ',(0,t.jsx)(n.code,{children:"# "})," at the beginning of each line, like this:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"# question: |\n#  I don't think this question is used any more\n# fields:\n#  - Field 1: variable_1\n"})}),"\n",(0,t.jsx)(n.admonition,{title:"Tip",type:"note",children:(0,t.jsxs)(n.p,{children:["To comment out many lines at once, hold the ALT key and click and drag a line\nwith your mouse. If you do it correctly you will see a long blinking cursor.\nNow you can type on multiple lines at once. Type a ",(0,t.jsx)(n.code,{children:"#"})," and a space to comment out the lines\nwith the blinking cursor."]})}),"\n",(0,t.jsx)(n.p,{children:"If you want to discard your changes and start over, upload the package .ZIP file\nto your playground again. This will wipe out all of your changes."}),"\n",(0,t.jsxs)(n.p,{children:["Use ",(0,t.jsx)(n.a,{href:"/docs/authoring/github",children:"GitHub"})," regularly to let you restore your work from a point in time."]})]})}function c(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},1815:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/playground_id-4184890648959724d0bce0f3fa200125.png"},2937:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/playground_packages_menu-363077419ec2987bdfbdfb80533c9b9b.png"},1650:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/playground_projects-8cd090f5870664bb98b8d58d02aacc2f.png"},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>a});var t=i(6540);const s={},o=t.createContext(s);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);