"use strict";(self.webpackChunkdocassemble_assembly_line_documentation=self.webpackChunkdocassemble_assembly_line_documentation||[]).push([[5342],{3916:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>d,toc:()=>r});var o=i(4848),s=i(8453);const t={id:"navigation",title:"Dynamic navigation sections",sidebar_label:"Dynamic navigation sections",slug:"navigation"},a=void 0,d={id:"components/AssemblyLine/navigation",title:"Dynamic navigation sections",description:"By default, Assembly Line interviews have navigation turned on. In some cases, you",source:"@site/docs/components/AssemblyLine/navigation.md",sourceDirName:"components/AssemblyLine",slug:"/components/AssemblyLine/navigation",permalink:"/docs/components/AssemblyLine/navigation",draft:!1,unlisted:!1,editUrl:"https://github.com/SuffolkLITLab/docassemble-AssemblyLine-documentation/edit/main/docs/components/AssemblyLine/navigation.md",tags:[],version:"current",frontMatter:{id:"navigation",title:"Dynamic navigation sections",sidebar_label:"Dynamic navigation sections",slug:"navigation"},sidebar:"docs",previous:{title:"Reserved variables",permalink:"/docs/components/AssemblyLine/reserved_keywords"},next:{title:"Error pages",permalink:"/docs/components/AssemblyLine/error_actions"}},l={},r=[{value:"Turning on the Assembly Line navigation system",id:"turning-on-the-assembly-line-navigation-system",level:2},{value:"Defining the list of available sections",id:"defining-the-list-of-available-sections",level:2},{value:"<code>data from code</code> vs <code>data</code>",id:"data-from-code-vs-data",level:3},{value:"Avoiding triggering variables before they are defined",id:"avoiding-triggering-variables-before-they-are-defined",level:3},{value:"Example conditions",id:"example-conditions",level:3},{value:"Hide if the user is not logged in",id:"hide-if-the-user-is-not-logged-in",level:4},{value:"Hide if you haven&#39;t gotten past the first page yet",id:"hide-if-you-havent-gotten-past-the-first-page-yet",level:4},{value:"Hide to anyone who is not an administrator or developer",id:"hide-to-anyone-who-is-not-an-administrator-or-developer",level:4},{value:"Using nested sections",id:"using-nested-sections",level:3},{value:"Adding an unknown (dynamic) number of sections",id:"adding-an-unknown-dynamic-number-of-sections",level:3},{value:"Keeping the navigation menu fresh: warnings",id:"keeping-the-navigation-menu-fresh-warnings",level:2},{value:"A complete example",id:"a-complete-example",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"By default, Assembly Line interviews have navigation turned on. In some cases, you\nmay want navigation sections to show or hide depending on choices the user makes\nduring the interview."}),"\n",(0,o.jsxs)(n.p,{children:["The Assembly Line framework adds an optional method to add dynamic navigation when the\n",(0,o.jsx)(n.code,{children:"enable_al_nav_sections"})," variable is set to ",(0,o.jsx)(n.code,{children:"True"}),". This feature is disabled by default."]}),"\n",(0,o.jsxs)(n.p,{children:["Docassemble already has a way to define sections dynamically, with ",(0,o.jsx)(n.a,{href:"https://docassemble.org/docs/functions.html#DANav.set_sections",children:"\nnav.set_sections()"}),". Use\nthe Assembly Line method when your navigation sections are relatively simple. If your needs\ndon't fit well with the Assembly Line's simple declarative approach, you may prefer to use\n",(0,o.jsx)(n.code,{children:"nav.set_sections()"})," directly."]}),"\n",(0,o.jsx)(n.p,{children:"The Assembly Line approach can be most helpful when:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"You know the full list of available sections at the beginning of the process.\nFor example: one section for each optional document or dependent on the user's logged-in\nstatus."}),"\n",(0,o.jsx)(n.li,{children:"The total possible number of sections is also known in advance."}),"\n",(0,o.jsx)(n.li,{children:"You can evaluate a True/False expression to decide if a section should be visible."}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"turning-on-the-assembly-line-navigation-system",children:"Turning on the Assembly Line navigation system"}),"\n",(0,o.jsx)(n.p,{children:"Add a code block to your interview that looks like this:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"---\ncode: |\n  enable_al_nav_sections = True\n"})}),"\n",(0,o.jsx)(n.h2,{id:"defining-the-list-of-available-sections",children:"Defining the list of available sections"}),"\n",(0,o.jsxs)(n.p,{children:["When ",(0,o.jsx)(n.code,{children:"enable_al_nav_sections"})," is ",(0,o.jsx)(n.code,{children:"True"}),", the Assembly Line framework will look for the\ndefinition of a list of dictionaries named ",(0,o.jsx)(n.code,{children:"al_nav_sections"})," on each screen load. The contents\nof this list will be used to define the navigation sections."]}),"\n",(0,o.jsxs)(n.p,{children:["The structure of each dictionary in the list should be the exact same format that is expected\nby ",(0,o.jsx)(n.a,{href:"https://docassemble.org/docs/functions.html#DANav.set_sections",children:"nav.set_sections()"}),",\nwith the addition of one new key, ",(0,o.jsx)(n.code,{children:"hidden"}),". If ",(0,o.jsx)(n.code,{children:"hidden"})," is ",(0,o.jsx)(n.code,{children:"True"}),", the list item will\nnot be shown."]}),"\n",(0,o.jsxs)(n.p,{children:["You can use docassemble's ",(0,o.jsx)(n.code,{children:"data from code"})," block as a convenient and easy\nto read way to create this list:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'---\nreconsider: True\nvariable name: al_nav_sections\ndata from code:\n  - section_intro: |\n      "Introduction"\n  - section_about_you: |\n      "About you"\n  - section_about_spouse: |\n      "About your spouse"\n    hidden: not showifdef("is_married")\n'})}),"\n",(0,o.jsxs)(n.h3,{id:"data-from-code-vs-data",children:[(0,o.jsx)(n.code,{children:"data from code"})," vs ",(0,o.jsx)(n.code,{children:"data"})]}),"\n",(0,o.jsxs)(n.p,{children:["When you use ",(0,o.jsx)(n.code,{children:"data from code"}),", the labels need to be defined as literal Python strings (which is why they follow\nthe vertical pipe symbol, ",(0,o.jsx)(n.code,{children:"|"})," on their own lines)."]}),"\n",(0,o.jsxs)(n.p,{children:["In versions of Assembly Line > 2.28.0, you can use a ",(0,o.jsx)(n.code,{children:"data"})," block instead. If we chose to use ",(0,o.jsx)(n.code,{children:"data"}),"\ninstead, it would look like this:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'reconsider: True\nvariable name: al_nav_sections\ndata:\n  - section_intro: Introduction\n  - section_about_you: About you\n  - section_about_spouse: About your spouse\n    hidden: ${ not showifdef("is_married") }\n'})}),"\n",(0,o.jsx)(n.h3,{id:"avoiding-triggering-variables-before-they-are-defined",children:"Avoiding triggering variables before they are defined"}),"\n",(0,o.jsx)(n.p,{children:"Navigation appears on every page of the interview, including the very first page.\nTherefore it's important that the conditional logic doesn't trigger any questions in\nitself."}),"\n",(0,o.jsx)(n.p,{children:"Make sure to use some combination of:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"hasattr"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"showifdef()"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"defined()"})}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"in your conditions, unless it's a variable that is guaranteed to be defined, such as whether\nthe user is logged in, or the number of pages visited."}),"\n",(0,o.jsx)(n.h3,{id:"example-conditions",children:"Example conditions"}),"\n",(0,o.jsx)(n.h4,{id:"hide-if-the-user-is-not-logged-in",children:"Hide if the user is not logged in"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"...\ndata:\n  ...\n  - section_how_to_return_later: How to return later\n    hidden: ${ not user_logged_in() }\n"})}),"\n",(0,o.jsx)(n.h4,{id:"hide-if-you-havent-gotten-past-the-first-page-yet",children:"Hide if you haven't gotten past the first page yet"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"  - section_how_to_return_later: |\n      \"How to return later\"\n    hidden: ${ _internal.get('steps') < 2 }\n"})}),"\n",(0,o.jsx)(n.h4,{id:"hide-to-anyone-who-is-not-an-administrator-or-developer",children:"Hide to anyone who is not an administrator or developer"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'  - section_developer_only: |\n      "Developer and admin only"\n    hidden: ${ not (user_logged_in() and user_has_privilege(["developer", "admin"])) }\n'})}),"\n",(0,o.jsx)(n.h3,{id:"using-nested-sections",children:"Using nested sections"}),"\n",(0,o.jsxs)(n.p,{children:['You can define nested sections. If you would like to be able to hide the top level section,\nyou\'ll need to use the special Docassemble "subsections" syntax (explained in the ',(0,o.jsx)(n.a,{href:"https://docassemble.org/docs/initial.html#sections",children:"documentation"}),")."]}),"\n",(0,o.jsx)(n.p,{children:"Example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'reconsider: True\nvariable name: al_nav_sections\ndata:\n  - section_name: Section Name\n    hidden: True\n  - "top level item"\n  - about: About You\n    hidden: False\n    subsections:\n      - sub_item_1: Description 1\n        hidden: False\n      - sub_item_2: Description 2\n        hidden: True\n'})}),"\n",(0,o.jsx)(n.h3,{id:"adding-an-unknown-dynamic-number-of-sections",children:"Adding an unknown (dynamic) number of sections"}),"\n",(0,o.jsxs)(n.p,{children:["If you want to add sections based on, for example, how many items are in a list,\nyou can't define those dynamically added sections in a ",(0,o.jsx)(n.code,{children:"data"})," or ",(0,o.jsx)(n.code,{children:"data from code"})," block.\nBut you may want to mix and match, with some dynamic sections and some pre-defined ones."]}),"\n",(0,o.jsxs)(n.p,{children:["In that case, you could create a ",(0,o.jsx)(n.code,{children:"data"})," or ",(0,o.jsx)(n.code,{children:"data from code"})," block with a different\n",(0,o.jsx)(n.code,{children:"variable name"})," attached to it. And you would need to define ",(0,o.jsx)(n.code,{children:"al_nav_sections"})," itself\nin a separate code block."]}),"\n",(0,o.jsx)(n.p,{children:"Here is an example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'question: |\n  How many rooms are in your house?\nfields:\n  - Room count: room_count\n  - Do you want the optional section to show?: show_optional\n    datatype: yesno\n---\nvariable name: my_always_defined_nav_sections\ndata:\n  - section_name: Section Name\n    hidden: False\n  - "top level item"\n  - section_about: About You\n    hidden: False\n  - section_opt: Optional section\n    hidden: ${ not showifdef("show_optional") }\n---\nreconsider: True\ncode: |\n  reconsider("my_always_defined_nav_sections")\n  if defined("room_count"):\n    tmp_sections = []\n    for n in range(room_count):\n        tmp_sections.append({f"room_{n+1}": f"Room {n+1}"})\n    al_nav_sections = my_always_defined_nav_sections + tmp_sections\n    del tmp_sections\n  else:\n    al_nav_sections = my_always_defined_nav_sections\n'})}),"\n",(0,o.jsx)(n.h2,{id:"keeping-the-navigation-menu-fresh-warnings",children:"Keeping the navigation menu fresh: warnings"}),"\n",(0,o.jsxs)(n.p,{children:["A simple way to keep the list of sections fresh is to add the ",(0,o.jsx)(n.code,{children:"reconsider: True"})," modifier\nto the block that defines the sections. We use this in the examples. It should be fine\nfor most real-world interviews. If your interview is already bit slow, note that using\n",(0,o.jsx)(n.code,{children:"reconsider: True"})," can add a small slowdown to every page load."]}),"\n",(0,o.jsxs)(n.p,{children:["One alternative to avoid this slowdown is to list all of the variables that can\ninvalidate the current menu's accuracy with the ",(0,o.jsx)(n.code,{children:"depends on"})," modifier. This is a fine\ntradeoff (adds a tiny bit of maintenance), and it works for most scenarios. As an example\nof where it won't be sufficient: ",(0,o.jsx)(n.code,{children:"depends on"})," will not trigger an update when the items\nin a list change."]}),"\n",(0,o.jsxs)(n.p,{children:["If ",(0,o.jsx)(n.code,{children:"depends on"})," is not enough, you could still save a little page load time by explicitly\ntriggering the navigation to be rereshed at defined points in the interview flow. This\nworks well when you have a linear interview and don't allow editing the answer to questions\nthat could change the navigation. Even if you do have this issues, you could force reloading\nthe definition of ",(0,o.jsx)(n.code,{children:"al_navigation_sections"}),' in the "edit" button.']}),"\n",(0,o.jsxs)(n.p,{children:["To set up this more manual refreshing, you'll want to do this in a separate code block, not directly\nin the interview order block. You need to reconsider the navigation before using ",(0,o.jsx)(n.code,{children:"nav.set_section()"}),".\nFor example:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'---\ncode: |\n  reconsider("al_nav_sections")\n  reconsider_nav_once = True\n---\ncode: |\n  reconsider("al_nav_sections")\n  reconsider_nav_twice = True\n---\n###################### Main order #######################\nmandatory: True\ncode: |\n  nav.set_section("section_documents")\n  doc_list\n  reconsider_nav_once\n  ...\n  reconsider_nav_twice\n  if some_condition:\n    nav.set_section("newly_visible_section")\n'})}),"\n",(0,o.jsx)(n.h2,{id:"a-complete-example",children:"A complete example"}),"\n",(0,o.jsxs)(n.p,{children:["This example uses the ",(0,o.jsx)(n.code,{children:"data from code"})," method"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'---\ninclude:\n  - docassemble.AssemblyLine:assembly_line.yml\n---\ncode: |\n  enable_al_nav_sections = True\n---\nreconsider: True\nvariable name: al_nav_sections\ndata from code:\n  - section_intro: |\n      "Introduction"\n  - section_about_you: |\n      "About you"\n  - section_about_spouse: |\n      "About your spouse"\n    hidden: not showifdef("is_married")\n---\nmandatory: True\nquestion: |\n  Are you married?\nyesno: is_married\n---\nmandatory: True\nquestion: |\n  Thanks for letting us know!\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>d});var o=i(6540);const s={},t=o.createContext(s);function a(e){const n=o.useContext(t);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),o.createElement(t.Provider,{value:n},e.children)}}}]);