"use strict";(self.webpackChunkdocassemble_assembly_line_documentation=self.webpackChunkdocassemble_assembly_line_documentation||[]).push([[930],{4137:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return m}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=n.createContext({}),c=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(r),m=o,f=p["".concat(i,".").concat(m)]||p[m]||d[m]||a;return r?n.createElement(f,l(l({ref:t},u),{},{components:r})):n.createElement(f,l({ref:t},u))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,l=new Array(a);l[0]=p;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:o,l[1]=s;for(var c=2;c<a;c++)l[c]=r[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},7267:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return s},contentTitle:function(){return i},metadata:function(){return c},toc:function(){return u},default:function(){return p}});var n=r(7462),o=r(3366),a=(r(7294),r(4137)),l=["components"],s={sidebar_label:"al_courts",title:"al_courts"},i=void 0,c={unversionedId:"reference/al_courts",id:"reference/al_courts",isDocsHomePage:!1,title:"al_courts",description:"ALCourt Objects",source:"@site/docs/reference/al_courts.md",sourceDirName:"reference",slug:"/reference/al_courts",permalink:"/docassemble-AssemblyLine-documentation/docs/reference/al_courts",editUrl:"https://github.com/SuffolkLITLab/docassemble-AssemblyLine-documentation/edit/main/docs/reference/al_courts.md",tags:[],version:"current",frontMatter:{sidebar_label:"al_courts",title:"al_courts"},sidebar:"someSidebar",previous:{title:"al_general",permalink:"/docassemble-AssemblyLine-documentation/docs/reference/al_general"},next:{title:"example_google",permalink:"/docassemble-AssemblyLine-documentation/docs/reference/example_google"}},u=[{value:"ALCourt Objects",id:"alcourt-objects",children:[{value:"short_label",id:"short_label",children:[],level:4},{value:"short_label_and_address",id:"short_label_and_address",children:[],level:4},{value:"short_description",id:"short_description",children:[],level:4},{value:"from_row",id:"from_row",children:[],level:4}],level:2},{value:"ALCourtLoader Objects",id:"alcourtloader-objects",children:[{value:"filter_courts",id:"filter_courts",children:[],level:4},{value:"as_court",id:"as_court",children:[],level:4}],level:2}],d={toc:u};function p(e){var t=e.components,r=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"alcourt-objects"},"ALCourt Objects"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class ALCourt(Court)\n")),(0,a.kt)("p",null,"Object representing a court in Massachusetts.\nTODO: it could be interesting to store a jurisdiction on a court. But this is non-trivial. Should it be geo boundaries?\nA list of cities? A list of counties? Instead, we use a function on the CourtList object that filters courts by\naddress and can use any of those three features of the court to do the filtering."),(0,a.kt)("h4",{id:"short_label"},"short","_","label"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"}," | short_label() -> str\n")),(0,a.kt)("p",null,"Returns a string that represents a nice, disambiguated label for the court.\nThis may not match the court","'","s name. If the name omits city, we\nappend city name to the court name. This is good for a drop-down selection\nlist."),(0,a.kt)("h4",{id:"short_label_and_address"},"short","_","label","_","and","_","address"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"}," | short_label_and_address() -> str\n")),(0,a.kt)("p",null,"Returns a markdown formatted string with the name and address of the court.\nMore concise version without description; suitable for a responsive case."),(0,a.kt)("h4",{id:"short_description"},"short","_","description"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"}," | short_description() -> str\n")),(0,a.kt)("p",null,"Returns a Markdown formatted string that includes the disambiguated name and\nthe description of the court, for inclusion in the results page with radio\nbuttons."),(0,a.kt)("h4",{id:"from_row"},"from","_","row"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"}," | from_row(df_row, ensure_lat_long=True) -> None\n")),(0,a.kt)("p",null,"Loads data from a single Pandas Dataframe into a court object.\nNote: It will try to convert column names that don","'","t make valid\nattributes. Best practice is to use good attribute names (no spaces) that don","'","t interfere\nwith existing attributes or methods of DAObject"),(0,a.kt)("h2",{id:"alcourtloader-objects"},"ALCourtLoader Objects"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class ALCourtLoader(DAObject)\n")),(0,a.kt)("p",null,"Object to hold some methods surrounding loading/filtering courts."),(0,a.kt)("p",null,"Built around Pandas dataframe."),(0,a.kt)("h4",{id:"filter_courts"},"filter","_","courts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"}," | filter_courts(court_types: list, column='department') -> list\n")),(0,a.kt)("p",null,"Return a subset of courts, only the name column and index."),(0,a.kt)("p",null,"If you do not want the list to be filtered, set court_types to None (or falsy value)"),(0,a.kt)("h4",{id:"as_court"},"as","_","court"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"}," | as_court(intrinsicName, index, ensure_lat_long=True)\n")),(0,a.kt)("p",null,"Return the court at the specified index as an ALCourt object"))}p.isMDXComponent=!0}}]);