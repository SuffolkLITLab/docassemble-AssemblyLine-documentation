"use strict";(self.webpackChunkdocassemble_assembly_line_documentation=self.webpackChunkdocassemble_assembly_line_documentation||[]).push([[2329],{4137:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return c}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),h=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=h(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=h(n),c=r,m=d["".concat(l,".").concat(c)]||d[c]||p[c]||i;return n?a.createElement(m,o(o({ref:t},u),{},{components:n})):a.createElement(m,o({ref:t},u))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var h=2;h<i;h++)o[h]=n[h];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1899:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return h},toc:function(){return u},default:function(){return d}});var a=n(7462),r=n(3366),i=(n(7294),n(4137)),o=["components"],s={id:"automated_testing",title:"Automated testing",sidebar_label:"Automated testing",slug:"/automated_integrated_testing"},l=void 0,h={unversionedId:"automated_testing",id:"automated_testing",isDocsHomePage:!1,title:"Automated testing",description:"\ud83d\udea7 Reference for writing automated integrated tests with the Assembly Line testing framework.",source:"@site/docs/automated_testing.md",sourceDirName:".",slug:"/automated_integrated_testing",permalink:"/docassemble-AssemblyLine-documentation/docs/automated_integrated_testing",editUrl:"https://github.com/SuffolkLITLab/docassemble-AssemblyLine-documentation/edit/main/docs/automated_testing.md",tags:[],version:"current",frontMatter:{id:"automated_testing",title:"Automated testing",sidebar_label:"Automated testing",slug:"/automated_integrated_testing"},sidebar:"someSidebar",previous:{title:"ALToolbox functions and components",permalink:"/docassemble-AssemblyLine-documentation/docs/framework/altoolbox"},next:{title:"al_general",permalink:"/docassemble-AssemblyLine-documentation/docs/reference/al_general"}},u=[{value:"Quick Reference",id:"quick-reference",children:[{value:"Example",id:"example",children:[],level:3}],level:2},{value:"First test",id:"first-test",children:[],level:2},{value:"Story tables",id:"story-tables",children:[{value:"Story table description",id:"story-table-description",children:[],level:3},{value:"var",id:"var",children:[],level:3},{value:"value",id:"value",children:[],level:3},{value:"trigger",id:"trigger",children:[],level:3},{value:"Story table examples",id:"story-table-examples",children:[],level:3},{value:"<code>.there_is_another</code> loop",id:"there_is_another-loop",children:[],level:3},{value:"Story table signature",id:"story-table-signature",children:[],level:3},{value:"Other notes",id:"other-notes",children:[],level:3}],level:2},{value:"Steps",id:"steps",children:[{value:"Starting Step",id:"starting-step",children:[],level:3},{value:"Observe things about the page",id:"observe-things-about-the-page",children:[],level:3},{value:"Set fields",id:"set-fields",children:[],level:3},{value:"Other actions",id:"other-actions",children:[],level:3}],level:2},{value:"Test instructions details",id:"test-instructions-details",children:[{value:"Add a new test",id:"add-a-new-test",children:[],level:3},{value:"When do tests run?",id:"when-do-tests-run",children:[],level:3},{value:"Scenario descriptions",id:"scenario-descriptions",children:[],level:3}],level:2},{value:"Built with",id:"built-with",children:[],level:2},{value:"Repositories",id:"repositories",children:[],level:2}],p={toc:u};function d(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"\ud83d\udea7 Reference for writing automated integrated tests with the Assembly Line testing framework."),(0,i.kt)("h2",{id:"quick-reference"},"Quick Reference"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"You write and edit ",(0,i.kt)("inlineCode",{parentName:"li"},".feature")," test files in your Sources folder."),(0,i.kt)("li",{parentName:"ol"},"There's a maximum of 2 minutes per individual Step or table row. Longer than that and the test will error. That can't be customized yet."),(0,i.kt)("li",{parentName:"ol"},"Tests are run in GitHub when you commit."),(0,i.kt)("li",{parentName:"ol"},"Tests can download PDF files, but humans have to review them to see if they're right."),(0,i.kt)("li",{parentName:"ol"},"Tests that error should create screenshots from when the error happened."),(0,i.kt)("li",{parentName:"ol"},"Tests create report files. They don't have a lot right now, but they might have some clues when something unexpected happens.")),(0,i.kt)("p",null,"For interacting with things on GitHub, look for how to use the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/introduction-to-github-actions#viewing-the-jobs-activity"},"Actions")," tab."),(0,i.kt)("p",null,"Give us feedback and ideas by making issues at ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/plocket/docassemble-cucumber/issues"},"https://github.com/plocket/docassemble-cucumber/issues"),"."),(0,i.kt)("h3",{id:"example"},"Example"),(0,i.kt)("p",null,"The tests use the ",(0,i.kt)("a",{parentName:"p",href:"https://cucumber.io/docs/gherkin/reference/"},"gherkin language and syntax"),". Here's a complex example for quick reference of some of our features:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'@children\nFeature: The user has children\n\n  @fast @child_benefits\n  Scenario: child has benefits\n    Given I start the interview at "some_file_name"\n    And I get to the question id "benefits" with this data:\n      | var | value | trigger |\n      | x[i].name.first | Cashmere | children[0].name.first |\n      | x[i].name.last | Davis | children[0].name.first |\n      | x[i].name.first | Casey | children[1].name.first |\n      | x[i].name.last | Davis | children[1].name.first |\n      | x.there_are_any | True | children.there_are_any |\n      | x.target_number | 2 | children.there_is_another |\n    When I set the var "benefits[\'SSI\']" to "True"\n    And I tap to continue\n    Then the question id should be "download"\n    And I download "some_motion.pdf"\n\n')),(0,i.kt)("h2",{id:"first-test"},"First test"),(0,i.kt)("p",null,"You can write a really simple test right away that just makes sure your YAML file runs using the name of the YAML file. Write a ",(0,i.kt)("inlineCode",{parentName:"p"},"Scenario")," for each file you want to test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Feature: Interviews load\n\n  Scenario: The 209A loads\n    Given I start the interview at "ma_209a_package"\n\n  Scenario: The Plaintiff\'s Motion to Modify loads\n    Given I start the interview at "plaintiffs_motion_to_modify_209a"\n')),(0,i.kt)("p",null,"More complex tests might wait till your code is pretty much how you want it. Every time you change your variable names, you may have to update the tests."),(0,i.kt)("h2",{id:"story-tables"},"Story tables"),(0,i.kt)("p",null,"Very basically, a ",(0,i.kt)("strong",{parentName:"p"},"story table")," contains a list of variables and values. When the test is going through the interview and arrives on a page that has a field that defines the variable, the field will be set with the value. The order in which you list the rows does not matter, which gives a lot more flexibility when developers are changing around the order of questions."),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"It can be easy to lose track of what variables you've included, so it can be useful keep the rows in alphabetical order."))),(0,i.kt)("p",null,"You can have multiple tables per Scenario and you can put other steps between tables. Remember that each table needs to state the ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," of the ",(0,i.kt)("inlineCode",{parentName:"p"},"question")," where it should stop."),(0,i.kt)("h3",{id:"story-table-description"},"Story table description"),(0,i.kt)("p",null,"The step that triggers a story table is"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'    And I get to the question id "some id!" with this data:\n')),(0,i.kt)("p",null,"It needs to know the ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," of the page where it will stop. You can find the ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," in the ",(0,i.kt)("inlineCode",{parentName:"p"},"question")," block in the YAML (or using the Sources tab in a live interview). Under that, you put the header row of the table:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"      | var | value | trigger |\n")),(0,i.kt)("p",null,"This labels the three columns the test will use. Under that, add a row for every field that you want the test to interact with during the interview. Start with a blank row then fill it in:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"      |  |  |  |\n")),(0,i.kt)("h3",{id:"var"},"var"),(0,i.kt)("p",null,"In the ",(0,i.kt)("strong",{parentName:"p"},"var")," column, write the name of the variable you want to set ",(0,i.kt)("strong",{parentName:"p"},"as it appears on question's screen"),". Most times you can see that value in the YAML ",(0,i.kt)("inlineCode",{parentName:"p"},"question")," block. Sometimes it will be generated by code in the ",(0,i.kt)("inlineCode",{parentName:"p"},"question")," block. If you're not sure what name some code generates, you may have to ask the folks who wrote the code."),(0,i.kt)("h3",{id:"value"},"value"),(0,i.kt)("p",null,"In the ",(0,i.kt)("strong",{parentName:"p"},"value")," column, write what you want the field to be set to. For checkboxes, ",(0,i.kt)("inlineCode",{parentName:"p"},"True")," means 'checked' and ",(0,i.kt)("inlineCode",{parentName:"p"},"False")," means 'unchecked'."),(0,i.kt)("h3",{id:"trigger"},"trigger"),(0,i.kt)("p",null,"In the ",(0,i.kt)("strong",{parentName:"p"},"trigger")," column, write the name of the variable that triggers the page on which the field appears."),(0,i.kt)("p",null,"For the below, the ",(0,i.kt)("inlineCode",{parentName:"p"},"trigger")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"users[0].hair.how_much"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"---\nid: interview order\nmandatory: True\ncode: |\n  users[0].hair.how_much\n---\nid: hair\nquestion: |\n  Tell us about your hair\nfields:\n  - How much hair do you have?: users[i].hair.how_much\n  - What color is your hair?: users[i].hair.color\n")),(0,i.kt)("p",null,"The table rows for that would look like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"      | var | value | trigger |\n      | users[i].hair.how_much | Enough | users[0].hair.how_much |\n      | users[i].hair.color | Sea green | users[0].hair.how_much |\n")),(0,i.kt)("p",null,"Even though the ",(0,i.kt)("inlineCode",{parentName:"p"},"var")," columns were different, both rows had ",(0,i.kt)("inlineCode",{parentName:"p"},"users[0].hair.how_much")," in their ",(0,i.kt)("inlineCode",{parentName:"p"},"trigger")," column. That's because when the docassemble asks for ",(0,i.kt)("inlineCode",{parentName:"p"},"users[0].hair.how_much"),", both fields are on that page and both variables have to be set."),(0,i.kt)("p",null,"There are some rare cases where no ",(0,i.kt)("inlineCode",{parentName:"p"},"trigger")," exists. For example, ",(0,i.kt)("inlineCode",{parentName:"p"},"question")," blocks with the ",(0,i.kt)("inlineCode",{parentName:"p"},"mandatory")," specifier:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"mandatory: True\nquestion: |\n  Do you like mandatory questions?\nyesno: likes_mandatory_questions\n")),(0,i.kt)("p",null,"In those cases, leave the ",(0,i.kt)("inlineCode",{parentName:"p"},"trigger")," column empty. If you're not sure, ask us."),(0,i.kt)("h3",{id:"story-table-examples"},"Story table examples"),(0,i.kt)("p",null,"Simple field types with their values."),(0,i.kt)("p",null,"The 'yes' choice of ",(0,i.kt)("a",{parentName:"p",href:"https://docassemble.org/docs/fields.html#yesno"},"yesno buttons"),", ",(0,i.kt)("a",{parentName:"p",href:"https://docassemble.org/docs/fields.html#fields%20yesno"},"yesnoradio")," fields, etc."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"      | has_hair | True | has_hair |\n")),(0,i.kt)("p",null,"The 'maybe' choice in ",(0,i.kt)("a",{parentName:"p",href:"https://docassemble.org/docs/fields.html#yesnomaybe"},"yesnomaybe buttons")," and ",(0,i.kt)("a",{parentName:"p",href:"https://docassemble.org/docs/fields.html#fields%20yesno"},"datatype: yesnomaybe")," fields."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"      | has_hair | None | has_hair |\n")),(0,i.kt)("p",null,"Checkboxes with multiple choices. The value 'True' means to check the checkbox and 'False' means to uncheck it."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"      | benefits['SSI'] | True | benefits |\n")),(0,i.kt)("p",null,"Radio or dropdown choices."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"      | favorite_color | green | favorite_color |\n")),(0,i.kt)("p",null,"Text field or textarea. Even if the answer has multiple lines, you can only use one line. When a new line is supposed to appear, instead use ",(0,i.kt)("inlineCode",{parentName:"p"},"\\n"),". See below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"      | favorite_color | Blue.\\nNo, green!\\nAaah... | favorite_color |\n")),(0,i.kt)("p",null,"A generic object with an index variable."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"      | x[i].name.first | Umi | users[1].name.first |\n")),(0,i.kt)("h3",{id:"there_is_another-loop"},(0,i.kt)("inlineCode",{parentName:"h3"},".there_is_another")," loop"),(0,i.kt)("p",null,"You can use ",(0,i.kt)("inlineCode",{parentName:"p"},".there_is_another")," in your interview. You can also use the Step to set that value. In story tables, though, you must replace ",(0,i.kt)("inlineCode",{parentName:"p"},".there_is_another")," in your ",(0,i.kt)("inlineCode",{parentName:"p"},"var")," column - replace it with ",(0,i.kt)("inlineCode",{parentName:"p"},".target_number"),". In the ",(0,i.kt)("inlineCode",{parentName:"p"},"value")," column, put the number of items of that type. "),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"trigger")," column stays the same as it usually does - it should have the name of the page's trigger varaible. Example:"),(0,i.kt)("p",null,"For a loop using ",(0,i.kt)("inlineCode",{parentName:"p"},".there_is_another")," and these values:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"      | x[i].name.first | Umi | users[0].name.first |\n      | x[i].name.first | Ulli | users[1].name.first |\n      | x[i].name.first | Ulla | users[2].name.first |\n")),(0,i.kt)("p",null,"would also require a row like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"      | x.target_number | 3 | users.there_is_another |\n")),(0,i.kt)("h3",{id:"story-table-signature"},"Story table signature"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"value")," for a row setting a signature doesn't matter. All signatures will be a dot."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"      | user.signature |  | user.signature |\n")),(0,i.kt)("h3",{id:"other-notes"},"Other notes"),(0,i.kt)("p",null,"Don't worry about accidentally including variables that won't show up during the test. Extra rows will be ignored."),(0,i.kt)("h2",{id:"steps"},"Steps"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://cucumber.io/docs/gherkin/reference/#steps"},"Steps")," happen one after the other sequentially. It's a bit more like you're the user clicking through the form. They can let you do things like download a file or make sure an user input invalidation message appears. If you change the order of the questions, even if you don't change any variable names, you may have to update these types of steps to change their order to match the new order of the screens."),(0,i.kt)("p",null,"Note: ",(0,i.kt)("inlineCode",{parentName:"p"},"When"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Then"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"And"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"Given")," at the beginning of sentences can all be used interchangeably. It doesn't matter which you use."),(0,i.kt)("h3",{id:"starting-step"},"Starting Step"),(0,i.kt)("p",null,"Leave out the extension of the file. Use just the name by itself."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'    Given I start the interview at "yaml_file_name"\n')),(0,i.kt)("h3",{id:"observe-things-about-the-page"},"Observe things about the page"),(0,i.kt)("p",null,"To check the id, look at the YAML ",(0,i.kt)("inlineCode",{parentName:"p"},"question")," block and copy the id from there. Adding this Step into the code of the test can help you, as a human, keep track of what fields you should be filling in next. It will also show up in the logs of the tests and can help you see where things went wrong."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'    Then the question id should be "some yaml block id!"\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"    Then I can't continue\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"    Then I will be told an answer is invalid\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"    Then I arrive at the next page\n")),(0,i.kt)("p",null,"Screenshots will be in the GitHub action's ",(0,i.kt)("a",{parentName:"p",href:"https://docs.github.com/en/free-pro-team@latest/actions/managing-workflow-runs/downloading-workflow-artifacts"},"artifacts"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"    Then I take a screenshot\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'    Then I should see the link to "a-url.com"\n')),(0,i.kt)("p",null,"Checking phrases will be language specific. Also, docassemble sometimes uses some weird characters on screen, so copying it straight from the screen is best."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'    Then I SHOULD see the phrase "some phrase"\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'    Then I should NOT see the phrase "some phrase"\n')),(0,i.kt)("h3",{id:"set-fields"},"Set fields"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"    When I tap to continue\n")),(0,i.kt)("p",null,"Use this Step to set the values of fields. Comparing this to the story table described above, the first quotes contain the equivalent of the ",(0,i.kt)("inlineCode",{parentName:"p"},"var")," column and the second quotes contain the ",(0,i.kt)("inlineCode",{parentName:"p"},"value")," you want to set."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'    When I set the variable "users[i].hair_color" to "blue"\n')),(0,i.kt)("p",null,"Sign on a signature field. All signatures are the same."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"    When I sign\n")),(0,i.kt)("p",null,"Specifically for the Document Assembly Line 4-part name questions. No punctuation. We recommend you just use 2 names - the first name and last name - but you can have all these formats:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Firstname Lastname"),(0,i.kt)("li",{parentName:"ul"},"Firstname Middlename Lastname"),(0,i.kt)("li",{parentName:"ul"},"Firstname Middlename Lastname Suffix (where suffix is one of the dropdown suffix choices, like ",(0,i.kt)("inlineCode",{parentName:"li"},"II"),")")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'    When I set the name of "x[i]" to "Ulli User"\n')),(0,i.kt)("p",null,"Specifically for the Document Assembly Line 5-field address questions. t can be any address you want that matches the format shown, commas and all."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'    When I set the address of "users[0]" to "120 Tremont Street, Unit 1, Boston, MA 02108"\n')),(0,i.kt)("p",null,"The Step for the story table, which is better described in sections above."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'    I get to the question id "some yml block id" with this data:\n')),(0,i.kt)("h3",{id:"other-actions"},"Other actions"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"    When I tap to continue\n")),(0,i.kt)("p",null,"Documents will be in the GitHub action's ",(0,i.kt)("a",{parentName:"p",href:"https://docs.github.com/en/free-pro-team@latest/actions/managing-workflow-runs/downloading-workflow-artifacts"},"artifacts"),". At the moment, this step will fail if it takes more than 2 minutes to download."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'    Then I download "file-name.pdf"\n')),(0,i.kt)("p",null,"This Step will let you wait for any number of seconds less than 120 when you are on a page. It can help in some situations where you run into timing issues. It does nothing for the timing of other steps. You can give this Step any number of seconds, though all Steps will timeout after two minutes. You can add multiple rows of these if you want."),(0,i.kt)("p",null,"The situations that need this are pretty rare, but here's an example: You navigate to a new page and set a field. Sometimes it works fine, but someimtes the test says the element does not exist. The page needs an extra few seconds to load. Add this step in to give it that time."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"    When I wait 10 seconds\n")),(0,i.kt)("h2",{id:"test-instructions-details"},"Test instructions details"),(0,i.kt)("h3",{id:"add-a-new-test"},"Add a new test"),(0,i.kt)("p",null,"Go to your Playground > the dropdown Folders menu > Sources."),(0,i.kt)("p",null,"Add a new file that ends in the extension ",(0,i.kt)("inlineCode",{parentName:"p"},".feature"),". Ex: ",(0,i.kt)("inlineCode",{parentName:"p"},"has_children.feature")),(0,i.kt)("p",null,"The next time you commit, your test will be run. You can add and edit multiple test files."),(0,i.kt)("h3",{id:"when-do-tests-run"},"When do tests run?"),(0,i.kt)("p",null,"Tests run when you commit your files to GitHub. That might be when you hit the 'Commit' button on the Packages page. It can also happen when you edit, add, or delete files in GitHub itself."),(0,i.kt)("p",null,"If you know how to use GitHub ",(0,i.kt)("a",{parentName:"p",href:"https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/introduction-to-github-actions#viewing-the-jobs-activity"},"actions"),", you can also run the tests manually from GitHub actions with some more options."),(0,i.kt)("h3",{id:"scenario-descriptions"},"Scenario descriptions"),(0,i.kt)("p",null,"Scenario descriptions affect the names of error screenshot files and such things, so try to use useful descriptions."),(0,i.kt)("h2",{id:"built-with"},"Built with"),(0,i.kt)("p",null,"It uses cucumber, puppeteerjs, cheerio, and runs the assertions using mocha and chai."),(0,i.kt)("p",null,"Even though this is built off of ",(0,i.kt)("a",{parentName:"p",href:"https://cucumber.io/"},"cucumber"),", this framework has a different, less lofty, purpose. cucumber focuses on BDD (behavior driven development). This framework mostly deals with regression testing and other conveniences."),(0,i.kt)("h2",{id:"repositories"},"Repositories"),(0,i.kt)("p",null,"The framework is at ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/plocket/docassemble-cucumber"},"https://github.com/plocket/docassemble-cucumber"),"."),(0,i.kt)("p",null,"The interview for setting up tets for a repo is at ",(0,i.kt)("a",{parentName:"p",href:"https://apps-dev.suffolklitlab.org/start/test-setup/"},"https://apps-dev.suffolklitlab.org/start/test-setup/"),". It can only set up repository-specific secrets right now. The repo for that interview is at ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/plocket/docassemble-ALAutomatedTestingTests"},"https://github.com/plocket/docassemble-ALAutomatedTestingTests"),"."),(0,i.kt)("p",null,"The repo for the interviews for testing the framework is also at ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/plocket/docassemble-ALAutomatedTestingTests"},"https://github.com/plocket/docassemble-ALAutomatedTestingTests"),"."))}d.isMDXComponent=!0}}]);