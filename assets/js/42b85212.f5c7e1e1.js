"use strict";(self.webpackChunkdocassemble_assembly_line_documentation=self.webpackChunkdocassemble_assembly_line_documentation||[]).push([[9338],{4137:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var l=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,l,a=function(e,t){if(null==e)return{};var n,l,a={},i=Object.keys(e);for(l=0;l<i.length;l++)n=i[l],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(l=0;l<i.length;l++)n=i[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=l.createContext({}),d=function(e){var t=l.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=d(e.components);return l.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},p=l.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),p=d(n),m=a,h=p["".concat(s,".").concat(m)]||p[m]||c[m]||i;return n?l.createElement(h,o(o({ref:t},u),{},{components:n})):l.createElement(h,o({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=p;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r.mdxType="string"==typeof e?e:a,o[1]=r;for(var d=2;d<i;d++)o[d]=n[d];return l.createElement.apply(null,o)}return l.createElement.apply(null,n)}p.displayName="MDXCreateElement"},1108:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return r},contentTitle:function(){return s},metadata:function(){return d},toc:function(){return u},default:function(){return p}});var l=n(7462),a=n(3366),i=(n(7294),n(4137)),o=["components"],r={sidebar_label:"al_document",title:"al_document"},s=void 0,d={unversionedId:"reference/al_document",id:"reference/al_document",title:"al_document",description:"html\\safe\\str",source:"@site/docs/reference/al_document.md",sourceDirName:"reference",slug:"/reference/al_document",permalink:"/docassemble-AssemblyLine-documentation/docs/reference/al_document",editUrl:"https://github.com/SuffolkLITLab/docassemble-AssemblyLine-documentation/edit/main/docs/reference/al_document.md",tags:[],version:"current",frontMatter:{sidebar_label:"al_document",title:"al_document"},sidebar:"someSidebar",previous:{title:"example_google",permalink:"/docassemble-AssemblyLine-documentation/docs/reference/example_google"}},u=[{value:"html_safe_str",id:"html_safe_str",children:[],level:4},{value:"table_row",id:"table_row",children:[],level:4},{value:"ALAddendumField Objects",id:"aladdendumfield-objects",children:[{value:"overflow_value",id:"overflow_value",children:[],level:4},{value:"max_lines",id:"max_lines",children:[],level:4},{value:"value",id:"value",children:[],level:4},{value:"safe_value",id:"safe_value",children:[],level:4},{value:"value_if_defined",id:"value_if_defined",children:[],level:4},{value:"columns",id:"columns",children:[],level:4},{value:"type",id:"type",children:[],level:4},{value:"is_list",id:"is_list",children:[],level:4},{value:"is_object_list",id:"is_object_list",children:[],level:4},{value:"overflow_markdown",id:"overflow_markdown",children:[],level:4},{value:"overflow_docx",id:"overflow_docx",children:[],level:4}],level:2},{value:"ALAddendumFieldDict Objects",id:"aladdendumfielddict-objects",children:[{value:"initializeObject",id:"initializeobject",children:[],level:4},{value:"defined_fields",id:"defined_fields",children:[],level:4},{value:"has_overflow",id:"has_overflow",children:[],level:4}],level:2},{value:"DALazyAttribute Objects",id:"dalazyattribute-objects",children:[],level:2},{value:"ALDocument Objects",id:"aldocument-objects",children:[{value:"as_docx",id:"as_docx",children:[],level:4},{value:"as_list",id:"as_list",children:[],level:4},{value:"safe_value",id:"safe_value-1",children:[],level:4},{value:"overflow_value",id:"overflow_value-1",children:[],level:4}],level:2},{value:"ALStaticDocument Objects",id:"alstaticdocument-objects",children:[{value:"as_docx",id:"as_docx-1",children:[],level:4}],level:2},{value:"ALDocumentBundle Objects",id:"aldocumentbundle-objects",children:[{value:"as_zip",id:"as_zip",children:[],level:4},{value:"enabled_documents",id:"enabled_documents",children:[],level:4},{value:"as_flat_list",id:"as_flat_list",children:[],level:4},{value:"get_titles",id:"get_titles",children:[],level:4},{value:"as_pdf_list",id:"as_pdf_list",children:[],level:4},{value:"as_editable_list",id:"as_editable_list",children:[],level:4},{value:"download_list_html",id:"download_list_html",children:[],level:4},{value:"download_html",id:"download_html",children:[],level:4},{value:"send_button_html",id:"send_button_html",children:[],level:4},{value:"send_email",id:"send_email",children:[],level:4},{value:"table_css",id:"table_css",children:[],level:4}],level:2},{value:"ALDocumentBundleDict Objects",id:"aldocumentbundledict-objects",children:[{value:"preview",id:"preview",children:[],level:4},{value:"as_attachment",id:"as_attachment",children:[],level:4}],level:2}],c={toc:u};function p(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,l.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"html_safe_str"},"html","_","safe","_","str"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"html_safe_str(the_string: str) -> str\n")),(0,i.kt)("p",null,"Return a string that can be used as an html class or id"),(0,i.kt)("h4",{id:"table_row"},"table","_","row"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"table_row(title: str, button_htmls: List[str] = []) -> str\n")),(0,i.kt)("p",null,"Uses the provided title and list of button html strings to\nreturn the row of an AL document-styled table in HTML format."),(0,i.kt)("h2",{id:"aladdendumfield-objects"},"ALAddendumField Objects"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class ALAddendumField(DAObject)\n")),(0,i.kt)("p",null,"Object representing a single field and its attributes as related to whether\nit should be displayed in an addendum. Useful for PDF templates."),(0,i.kt)("p",null,"The items can be strings or lists/list-like objects. It does not know\nhow to handle overflow for a dictionary, e.g."),(0,i.kt)("p",null,"Required attributes:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"field_name-",">","str represents the name of a docassemble variable"),(0,i.kt)("li",{parentName:"ul"},"overflow_trigger-",">","int")),(0,i.kt)("p",null,"Optional/planned (not implemented yet):"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"headers-",">","dict(attribute: display label for table)"),(0,i.kt)("li",{parentName:"ul"},"field_style-",">",'"',"list",'"',"|",'"',"table",'"',"|",'"',"string",'"'," (optional: defaults to ",'"',"string",'"',")")),(0,i.kt)("h4",{id:"overflow_value"},"overflow","_","value"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},' | overflow_value(preserve_newlines: bool = False, input_width: int = 80, overflow_message: str = "")\n')),(0,i.kt)("p",null,"Try to return just the portion of the variable (list-like object or string)\nthat is not contained in the safe_value()."),(0,i.kt)("h4",{id:"max_lines"},"max","_","lines"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"}," | max_lines(input_width: int = 80, overflow_message_length=0) -> int\n")),(0,i.kt)("p",null,"Estimate the number of rows in the field in the output document."),(0,i.kt)("h4",{id:"value"},"value"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"}," | value() -> Any\n")),(0,i.kt)("p",null,"Return the full value, disregarding overflow. Could be useful in addendum\nif you want to show the whole value without making user flip back/forth between multiple\npages."),(0,i.kt)("h4",{id:"safe_value"},"safe","_","value"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},' | safe_value(overflow_message: str = "", input_width: int = 80, preserve_newlines: bool = False, _original_value=None)\n')),(0,i.kt)("p",null,"Try to return just the portion of the variable\nthat is ",(0,i.kt)("em",{parentName:"p"},"shorter than")," the overflow trigger. Otherwise, return empty string."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"overflow_message")," ",(0,i.kt)("em",{parentName:"li"},"str")," - A short message to go on the page where text is cutoff."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"input_width")," ",(0,i.kt)("em",{parentName:"li"},"int")," - The width, in characters, of the input box. Defaults to 80."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"preserve_newlines")," ",(0,i.kt)("em",{parentName:"li"},"bool")," - Determines whether newlines are preserved in the ",'"',"safe",'"'," text.\nDefaults to False, which means all newlines are removed. This allows more text to appear\nbefore being sent to the addendum."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"_original_value")," ",(0,i.kt)("em",{parentName:"li"},"Any")," - for speed reasons, you can provide the full text and just use this\nmethod to determine if the overflow trigger is exceeded. If no _original_value is\nprovided, this method will determine it using the value_if_defined() method.")),(0,i.kt)("h4",{id:"value_if_defined"},"value","_","if","_","defined"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"}," | value_if_defined() -> Any\n")),(0,i.kt)("p",null,"Return the value of the field if it is defined, otherwise return an empty string.\nAddendum should never trigger docassemble","'","s variable gathering."),(0,i.kt)("h4",{id:"columns"},"columns"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"}," | columns(skip_empty_attributes: bool = True, skip_attributes: set = {'complete'}) -> list\n")),(0,i.kt)("p",null,"Return a list of the columns in this object."),(0,i.kt)("p",null,"By default, skip empty attributes and the ",(0,i.kt)("inlineCode",{parentName:"p"},"complete")," attribute."),(0,i.kt)("h4",{id:"type"},"type"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"}," | type() -> str\n")),(0,i.kt)("p",null,"list | object_list | other"),(0,i.kt)("h4",{id:"is_list"},"is","_","list"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"}," | is_list() -> bool\n")),(0,i.kt)("p",null,"Identify whether the field is a list, whether of objects/dictionaries or just plain variables."),(0,i.kt)("h4",{id:"is_object_list"},"is","_","object","_","list"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"}," | is_object_list() -> bool\n")),(0,i.kt)("p",null,"Identify whether the field represents a list of either dictionaries or objects."),(0,i.kt)("h4",{id:"overflow_markdown"},"overflow","_","markdown"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"}," | overflow_markdown() -> str\n")),(0,i.kt)("p",null,"Return a formatted markdown table or bulleted list representing the values in the list."),(0,i.kt)("p",null,"This method does not give you any control over the output other than labels of columns,\nbut you also do not need to use this output if you want to independently control the format\nof the table."),(0,i.kt)("h4",{id:"overflow_docx"},"overflow","_","docx"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},' | overflow_docx(path: str = "docassemble.ALDocumentDict:data/templates/addendum_table.docx")\n')),(0,i.kt)("p",null,"Light wrapper around insert_docx_template() that inserts a formatted table into a DOCX\nfile. If the object in the list is a plain string/int, it returns a bulleted list."),(0,i.kt)("p",null,"Using this method will not give you any control at all over the formatting, but you can directly\ncall field.overflow_value() instead of using this method."),(0,i.kt)("h2",{id:"aladdendumfielddict-objects"},"ALAddendumFieldDict Objects"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class ALAddendumFieldDict(DAOrderedDict)\n")),(0,i.kt)("p",null,"Object representing a list of fields in your output document, together\nwith the character limit for each field."),(0,i.kt)("p",null,"Provides convenient methods to determine if an addendum is needed and to\ncontrol the display of fields so the appropriate text (overflow or safe amount)\nis displayed in each context."),(0,i.kt)("p",null,"Adding a new entry will implicitly set the ",(0,i.kt)("inlineCode",{parentName:"p"},"field_name")," attribute of the field."),(0,i.kt)("p",null,"optional:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"style: if set to ",'"',"overflow_only",'"'," will only display the overflow text")),(0,i.kt)("h4",{id:"initializeobject"},"initializeObject"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"}," | initializeObject(*pargs, **kwargs)\n")),(0,i.kt)("p",null,"When we create a new entry implicitly, make sure we also set the .field_name\nattribute to the key name so it knows its own field_name."),(0,i.kt)("h4",{id:"defined_fields"},"defined","_","fields"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"}," | defined_fields(style='overflow_only')\n")),(0,i.kt)("p",null,"Return a filtered list of just the defined fields.\nIf the ",'"',"style",'"'," is set to overflow_only, only return the overflow values."),(0,i.kt)("h4",{id:"has_overflow"},"has","_","overflow"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"}," | has_overflow() -> bool\n")),(0,i.kt)("p",null,"Returns True if any defined field","'","s length exceeds the overflow trigger."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returns"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bool")," - True if at least 1 field has ",'"',"overflow",'"'," content, False otherwise.")),(0,i.kt)("h2",{id:"dalazyattribute-objects"},"DALazyAttribute Objects"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class DALazyAttribute(DAObject)\n")),(0,i.kt)("p",null,"A DAObject with attributes that are reconsidered on every page load. Useful for\ncaching information on a per-page load basis."),(0,i.kt)("p",null,"Takes advantage of the way that objects are pickled in Docassemble by overriding the\n",(0,i.kt)("strong",{parentName:"p"},"getstate")," method Pickle uses."),(0,i.kt)("h2",{id:"aldocument-objects"},"ALDocument Objects"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class ALDocument(DADict)\n")),(0,i.kt)("p",null,"A dictionary of attachments, either created by a DAFile or an attachment\nblock. Typically there are three:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"The final version of a document with a signature. E.g., my_doc","['","final","']","."),(0,i.kt)("li",{parentName:"ol"},"The preview version of a document with no signature. E.g.,\nmy_doc","['","preview","']","."),(0,i.kt)("li",{parentName:"ol"},"An addendum of a document contained in the attribute ",(0,i.kt)("inlineCode",{parentName:"li"},"addendum"),". E.g.\n",(0,i.kt)("inlineCode",{parentName:"li"},"my_doc.addendum"),".")),(0,i.kt)("p",null,"There is no limit to the number of keys, but the ALDocumentBundle class\nexpects at least a ",'"',"final",'"'," key to exist, and the ",(0,i.kt)("inlineCode",{parentName:"p"},"addendum")," attribute is\nrequired if you desire to use PDF documents with text overflow. It is best\npractice to use exactly the two keys ",'"',"final",'"'," and ",'"',"preview",'"'," and the attribute\n",'"',"addendum",'"',". The ",'"',"final",'"'," and ",'"',"preview",'"'," documents will normally be the same\ntemplate, but with logic controlling the display of a particular section, such\nas the signature."),(0,i.kt)("p",null,"Each form that an interview generates should get its own ALDocument object."),(0,i.kt)("p",null,"The ",'"',"addendum",'"'," attribute can be handled in a generic object block. Multiple\ndocuments can use the same addendum template, with just the case caption\nvarying."),(0,i.kt)("p",null,"ALDocuments are designed to be used contingently as part of ALDocumentBundle\nobjects. Each ALDocument is considered to be ",'"',"enabled",'"'," or ",'"',"disabled",'"'," for a\nparticular interview user","'","s session. This allows you to always work with a\nsingle object representing all of the possible documents an interview can\ngenerate, and use encapsulated logic to trigger individual documents inclusion\non the final download screen."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Attributes"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"filename")," ",(0,i.kt)("em",{parentName:"li"},"str")," - name used for output PDF"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"title")," ",(0,i.kt)("em",{parentName:"li"},"str")," - display name for the output PDF"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"enabled")," ",(0,i.kt)("em",{parentName:"li"},"bool")," - if this document should be created. See examples."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"addendum")," ",(0,i.kt)("em",{parentName:"li"},"DAFile | DAFileCollection")," - (optional) an attachment block"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"overflow_fields")," ",(0,i.kt)("em",{parentName:"li"},"ALAddendumField")," - (optional) ALAddendumFieldDict instance. These values will be used to detect and handle overflow."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"has_addendum")," ",(0,i.kt)("em",{parentName:"li"},"bool")," - (optional) Defaults to False. Set to True if the document could have overflow, like for a PDF template.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Notes"),":"),(0,i.kt)("p",null,"  The ",(0,i.kt)("inlineCode",{parentName:"p"},"enabled")," attribute should always be defined by a code block or the\nobjects block, because by default it is considered fresh on each page\nload. If your interview logic requires that you directly ask the user\nwhether or not to include a document, you can use a single intermediate\nvariable that is posed to the interview user to work around this\nlimitation."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Examples"),":"),(0,i.kt)("p",null,"  Simple use where the document is always enabled and will have no addendum"),(0,i.kt)("hr",null),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"---\nobjects:\n- my_doc: ALDocument.using(filename=&quot;myDoc.pdf&quot;, title=&quot;myDoc&quot;, enabled=True)\n---\nattachment:\nvariable name: my_doc[i]  # This will usually be &quot;final&quot; or &quot;preview&quot;\n")),(0,i.kt)("p",null,"  Enable a document conditionally"),(0,i.kt)("hr",null),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"---\n# See that `enabled` is not defined here\nobjects:\n- affidavit_of_indigency: ALDocument.using(filename=&quot;affidavit-of-indigency.pdf&quot;, title=&quot;Affidavit of Indigency&quot;)\n---\n- `code` - |\naffidavit_of_indigency.enabled = ask_indigency_questions and is_indigent\n")),(0,i.kt)("p",null,"  An example enabling with a question posed to the interview user"),(0,i.kt)("hr",null),(0,i.kt)("p",null,"  You should always use a code block or an object block to set the ",'"',"enabled",'"'," status;\nUse an intermediate variable if you want to ask the user directly whether or not to include a document."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"---\n- `question` - |\nDo you want the extra document included?\n- `yesno` - include_extra_document\n---\n- `code` - |\nextra_document.enabled = include_extra_document\n---\nattachment:\nvariable name: extra_document[i] # This same template will be used for `final` and `preview`\ndocx template file: extra_document.docx\n")),(0,i.kt)("p",null,"  For a document that may need an addendum, you must specify this when the object is created\nor in a mandatory code block. The addendum will only be triggered if the document has ",'"',"overflow",'"',"\nin one of the fields that you specify."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"---\nobjects:\n- my_doc: ALDocument.using(filename=&quot;myDoc.pdf&quot;, title=&quot;myDoc&quot;, enabled=True, has_addendum=True)\n---\nattachment:\nvariable name: my_doc[i]\n...\n---\ngeneric object: ALDocument\nattachment:\nvariable name: x.addendum\ndocx template file: docx_addendum.docx\n---\n- `code` - |\nmy_doc.overflow_fields[&#x27;big_text_variable&#x27;].overflow_trigger = 640 # Characters\nmy_doc.overflow_fields[&#x27;big_text_variable&#x27;].label = &quot;Big text label&quot; # Optional - you may use in your addendum\nmy_doc.overflow_fields[&#x27;list_of_objects_variable&#x27;].overflow_trigger = 4 # Items in the list\nmy_doc.overflow_fields.gathered = True\n")),(0,i.kt)("h4",{id:"as_docx"},"as","_","docx"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"}," | as_docx(key: str = 'final', refresh: bool = True) -> DAFile\n")),(0,i.kt)("p",null,"Returns the assembled document as a single DOCX file, if possible. Otherwise returns a PDF."),(0,i.kt)("h4",{id:"as_list"},"as","_","list"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"}," | as_list(key: str = 'final', refresh: bool = True) -> List[DAFile]\n")),(0,i.kt)("p",null,"Returns a list of the document and its addendum, if any.\nSpecify refresh=True if you want to generate the attachment new each time.\nThis behavior is the default."),(0,i.kt)("h4",{id:"safe_value-1"},"safe","_","value"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"}," | safe_value(field_name: str, overflow_message: str = None, preserve_newlines: bool = False, input_width: int = 80)\n")),(0,i.kt)("p",null,"Shortcut syntax for accessing the ",'"',"safe",'"'," (shorter than overflow trigger)\nvalue of a field that we have specified as needing an addendum."),(0,i.kt)("h4",{id:"overflow_value-1"},"overflow","_","value"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"}," | overflow_value(field_name: str, overflow_message: str = None, preserve_newlines: bool = False, input_width: int = 80)\n")),(0,i.kt)("p",null,"Shortcut syntax for accessing the ",'"',"overflow",'"'," value (amount that exceeds overflow trigger)\nfor the given field as a string."),(0,i.kt)("p",null,"Should mirror the ",'"',"safe_value",'"'," for the same field."),(0,i.kt)("h2",{id:"alstaticdocument-objects"},"ALStaticDocument Objects"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class ALStaticDocument(DAStaticFile)\n")),(0,i.kt)("p",null,"A class that allows one-line initialization of static documents to include in an ALDocumentBundle."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Notes"),":"),(0,i.kt)("p",null,"  You should always place the static file within the /data/static folder of a package.\nALDocumentBundle relies on a publically accessible file. The /data/templates folder is private."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Attributes"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"filename(str)")," - the path to the file within /data/static/."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"title(str)")," - The title that will display as a row when invoked with ",(0,i.kt)("inlineCode",{parentName:"li"},"download_list_html()")," method\nof an ALDocumentBundle.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Examples"),":"),(0,i.kt)("p",null,"  Add a static PDF file to a document bundle.\n.. code-block:: yaml"),(0,i.kt)("hr",null),(0,i.kt)("p",null,"  objects:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h2",{parentName:"li",id:"static_test-alstaticdocumentusingtitlestatic-test-filenamestaticpdf-enabledtrue"},"static_test: ALStaticDocument.using(title=",'"',"Static Test",'"',", filename=",'"',"static.pdf",'"',", enabled=True)"),"objects:"),(0,i.kt)("li",{parentName:"ul"},"bundle: ALDocumentBundle.using(elements=","[static_test]",", filename=",'"',"bundle",'"',", title=",'"',"Documents to download now",'"',")")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Todo"),":"),(0,i.kt)("p",null,"  Handle files placed in /data/templates if that turns out to be useful. Likely by copying into\na DAFile with pdf_concatenate()."),(0,i.kt)("h4",{id:"as_docx-1"},"as","_","docx"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"}," | as_docx(key: str = 'final', refresh: bool = True) -> Union[DAStaticFile, DAFile]\n")),(0,i.kt)("p",null,"Returns the assembled document as a single DOCX file, if possible. Otherwise returns a PDF."),(0,i.kt)("h2",{id:"aldocumentbundle-objects"},"ALDocumentBundle Objects"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class ALDocumentBundle(DAList)\n")),(0,i.kt)("p",null,"DAList of ALDocuments or nested ALDocumentBundles."),(0,i.kt)("p",null,"Use case: providing a list of documents in a specific order."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Cover page")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Main motion form")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Notice of Interpreter Request"),(0,i.kt)("p",{parentName:"li"},"E.g., you may bundle documents one way for the court, one way for the user, one way for the\nopposing party. ALDocuments can separately be ",'"',"enabled",'"'," or ",'"',"disabled",'"'," for a particular run, which\nwill affect their inclusion in all bundles."),(0,i.kt)("p",{parentName:"li"},"A bundle can be returned as one PDF or as a list of documents. If the list contains nested\nbundles, each nested bundle can similarly be returned as a combined PDF or a list of documents."),(0,i.kt)("p",{parentName:"li"},"required attributes:")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"filename")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"title\noptional attribute: enabled"))),(0,i.kt)("h4",{id:"as_zip"},"as","_","zip"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"}," | as_zip(key: str = 'final', refresh: bool = True, title: str = '') -> DAFile\n")),(0,i.kt)("p",null,"Returns a zip file containing the whole bundle"),(0,i.kt)("h4",{id:"enabled_documents"},"enabled","_","documents"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"}," | enabled_documents(refresh: bool = True) -> List[Any]\n")),(0,i.kt)("p",null,"Returns the enabled documents"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"refresh(bool)")," - Controls whether the ","'","enabled","'"," attribute is reconsidered.")),(0,i.kt)("h4",{id:"as_flat_list"},"as","_","flat","_","list"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"}," | as_flat_list(key: str = 'final', refresh: bool = True) -> List[DAFile]\n")),(0,i.kt)("p",null,"Returns the nested bundle as a single flat list. This could be the preferred way to deliver forms to the\ncourt, e.g.--one file per court form/cover letter."),(0,i.kt)("h4",{id:"get_titles"},"get","_","titles"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"}," | get_titles(key: str = 'final') -> List[str]\n")),(0,i.kt)("p",null,"Gets all of titles of the documents in a list"),(0,i.kt)("h4",{id:"as_pdf_list"},"as","_","pdf","_","list"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"}," | as_pdf_list(key: str = 'final', refresh: bool = True) -> List[DAFile]\n")),(0,i.kt)("p",null,"Returns the nested bundles as a list of PDFs that is only one level deep."),(0,i.kt)("h4",{id:"as_editable_list"},"as","_","editable","_","list"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"}," | as_editable_list(key: str = 'final', refresh: bool = True) -> List[DAFile]\n")),(0,i.kt)("p",null,"Return a flat list of the editable versions of the docs in this bundle.\nNot yet tested with editable PDFs."),(0,i.kt)("h4",{id:"download_list_html"},"download","_","list","_","html"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},' | download_list_html(key: str = \'final\', format: str = \'pdf\', view: bool = True, refresh: bool = True, include_zip: bool = True, view_label="View", view_icon: str = "eye", download_label: str = "Download", download_icon: str = "download", zip_label: str = "Download zip", zip_icon: str = "file-archive") -> str\n')),(0,i.kt)("p",null,"Returns string of a table to display a list\nof pdfs with ","'","view","'"," and ","'","download","'"," buttons."),(0,i.kt)("h4",{id:"download_html"},"download","_","html"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"}," | download_html(key: str = 'final', format: str = 'pdf', view: bool = True, refresh: bool = True) -> str\n")),(0,i.kt)("p",null,"Returns an HTML string of a table to display all the docs\ncombined into one pdf with ","'","view","'"," and ","'","download","'"," buttons."),(0,i.kt)("h4",{id:"send_button_html"},"send","_","button","_","html"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"}," | send_button_html(key: str = 'final', show_editable_checkbox: bool = True) -> str\n")),(0,i.kt)("p",null,"Generate HTML for an input box and button that allows someone to send\nthe bundle to the specified email address."),(0,i.kt)("p",null,"Optionally, display a checkbox that allows someone to decide whether or not to\ninclude an editable (Word) copy of the file, iff it is available."),(0,i.kt)("h4",{id:"send_email"},"send","_","email"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"}," | send_email(to: any = None, key: str = 'final', editable: bool = False, template: any = None, **kwargs) -> bool\n")),(0,i.kt)("p",null,"Send an email with the current bundle as a single flat pdf or as editable documents.\nCan be used the same as ",(0,i.kt)("a",{parentName:"p",href:"https://docassemble.org/docs/functions.html#send_email"},"https://docassemble.org/docs/functions.html#send_email")," with\ntwo optional additional params."),(0,i.kt)("p",null,"keyword arguments:\n@param to {string} - Same as da send_email ",(0,i.kt)("inlineCode",{parentName:"p"},"to")," - email address(es) or objects with such.\n@param ","[key]"," {string} - Optional. Which version of the doc. Default: ","'","final","'","\n@param ","[editable]"," {bool} - Optional. User wants the editable docs. Default: False\n@param template {object} - Same as da ",(0,i.kt)("inlineCode",{parentName:"p"},"send_email")," ",(0,i.kt)("inlineCode",{parentName:"p"},"template")," variable.\n@param ",(0,i.kt)("em",{parentName:"p"}," {"),"} - Any other parameters you","'","d send to a da ",(0,i.kt)("inlineCode",{parentName:"p"},"send_email")," function"),(0,i.kt)("h4",{id:"table_css"},"table","_","css"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"}," | table_css()\n")),(0,i.kt)("p",null,"Return the css styles for the view/download table.\nThis will be hard to develop with and it will be a bit\nharder to override for developers using this module."),(0,i.kt)("h2",{id:"aldocumentbundledict-objects"},"ALDocumentBundleDict Objects"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class ALDocumentBundleDict(DADict)\n")),(0,i.kt)("p",null,"A dictionary with named bundles of ALDocuments.\nIn the assembly line, we expect to find two predetermined bundles:\ncourt_bundle and user_bundle."),(0,i.kt)("p",null,"It may be helpful in some circumstances to have a ",'"',"bundle",'"'," of bundles. E.g.,\nyou may want to present the user multiple combinations of documents for\ndifferent scenarios."),(0,i.kt)("h4",{id:"preview"},"preview"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"}," | preview(format: str = 'PDF', bundle: str = 'user_bundle') -> DAFile\n")),(0,i.kt)("p",null,"Create a copy of the document as a single PDF that is suitable for a preview version of the\ndocument (before signature is added)."),(0,i.kt)("h4",{id:"as_attachment"},"as","_","attachment"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"}," | as_attachment(format: str = 'PDF', bundle: str = 'court_bundle') -> List[DAFile]\n")),(0,i.kt)("p",null,"Return a list of PDF-ified documents, suitable to make an attachment to send_mail."))}p.isMDXComponent=!0}}]);