"use strict";(self.webpackChunkdocassemble_assembly_line_documentation=self.webpackChunkdocassemble_assembly_line_documentation||[]).push([[1460],{4137:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",_={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,s=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(n),d=i,f=u["".concat(l,".").concat(d)]||u[d]||_[d]||s;return n?r.createElement(f,a(a({ref:t},c),{},{components:n})):r.createElement(f,a({ref:t},c))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=n.length,a=new Array(s);a[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:i,a[1]=o;for(var p=2;p<s;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5554:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>p});var r=n(7462),i=(n(7294),n(4137));const s={sidebar_label:"py_efsp_client",title:"EFSPIntegration.py_efsp_client"},a=void 0,o={unversionedId:"reference/EFSPIntegration/py_efsp_client",id:"reference/EFSPIntegration/py_efsp_client",title:"EFSPIntegration.py_efsp_client",description:"The base python client used to communicate with the E-file proxy server.",source:"@site/docs/reference/EFSPIntegration/py_efsp_client.md",sourceDirName:"reference/EFSPIntegration",slug:"/reference/EFSPIntegration/py_efsp_client",permalink:"/docassemble-AssemblyLine-documentation/docs/reference/EFSPIntegration/py_efsp_client",draft:!1,editUrl:"https://github.com/SuffolkLITLab/docassemble-AssemblyLine-documentation/edit/main/docs/reference/EFSPIntegration/py_efsp_client.md",tags:[],version:"current",frontMatter:{sidebar_label:"py_efsp_client",title:"EFSPIntegration.py_efsp_client"},sidebar:"api",previous:{title:"interview_logic",permalink:"/docassemble-AssemblyLine-documentation/docs/reference/EFSPIntegration/interview_logic"},next:{title:"lit_explorer",permalink:"/docassemble-AssemblyLine-documentation/docs/reference/formfyxer/lit_explorer"}},l={},p=[{value:"EfspConnection Objects",id:"efspconnection-objects",level:2},{value:"__init__",id:"__init__",level:4},{value:"authenticate_user",id:"authenticate_user",level:4},{value:"register_user",id:"register_user",level:4},{value:"get_password_rules",id:"get_password_rules",level:4},{value:"get_notification_options",id:"get_notification_options",level:4},{value:"get_firm",id:"get_firm",level:4},{value:"update_firm",id:"update_firm",level:4},{value:"get_courts",id:"get_courts",level:4},{value:"get_court",id:"get_court",level:4},{value:"get_court_list",id:"get_court_list",level:4},{value:"get_filing_list",id:"get_filing_list",level:4},{value:"get_service_types",id:"get_service_types",level:4},{value:"get_cases_raw",id:"get_cases_raw",level:4}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The base python client used to communicate with the E-file proxy server."),(0,i.kt)("p",null,"Doesn","'","t include anything from docassemble, and can be used without having it installed."),(0,i.kt)("h2",{id:"efspconnection-objects"},"EfspConnection Objects"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class EfspConnection()\n")),(0,i.kt)("p",null,"A python client that communicates with the E-file proxy server."),(0,i.kt)("h4",{id:"__init__"},"_","_","init","_","_"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(*, url: str, api_key: str, default_jurisdiction: str = None)\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,i.kt)("p",null,"  url (str)\napi_key (str)\ndefault_jurisdiction (str)"),(0,i.kt)("h4",{id:"authenticate_user"},"authenticate","_","user"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def authenticate_user(*,\n                      tyler_email: Optional[str] = None,\n                      tyler_password: Optional[str] = None,\n                      jeffnet_key: Optional[str] = None,\n                      jurisdiction: str = None) -> ApiResponse\n")),(0,i.kt)("p",null,"Authenticates the user with the EFM server (not the E-file proxy)."),(0,i.kt)("h4",{id:"register_user"},"register","_","user"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def register_user(person: dict,\n                  registration_type: str,\n                  *,\n                  password: str = None,\n                  firm_name_or_id: str = None) -> ApiResponse\n")),(0,i.kt)("p",null,"registration_type needs to be INDIVIDUAL, FIRM_ADMINISTRATOR, or FIRM_ADMIN_NEW_MEMBER.\nIf registration_type is INDIVIDUAL or FIRM_ADMINISTRATOR, you need a password.\nIf it","'","s FIRM_ADMINISTRATOR or FIRM_ADMIN_NEW_MEMBER, you need a firm_name_or_id"),(0,i.kt)("h4",{id:"get_password_rules"},"get","_","password","_","rules"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def get_password_rules() -> ApiResponse\n")),(0,i.kt)("p",null,"Password rules are stored in the global court, id 0."),(0,i.kt)("p",null,"TODO: They","'","re in other courts too, including 1. Could they ever be different?"),(0,i.kt)("h4",{id:"get_notification_options"},"get","_","notification","_","options"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def get_notification_options() -> ApiResponse\n")),(0,i.kt)("p",null,"AKA NotificationPreferencesList"),(0,i.kt)("h4",{id:"get_firm"},"get","_","firm"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def get_firm() -> ApiResponse\n")),(0,i.kt)("p",null,"Gets info about the ",'"',"firm",'"'," for an associated user. If a user is a pro-se, this\ncontains their address information."),(0,i.kt)("h4",{id:"update_firm"},"update","_","firm"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def update_firm(firm: dict) -> ApiResponse\n")),(0,i.kt)("p",null,"firm should have the below keys:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"firstName, middleName, lastName if it","'","s a person"),(0,i.kt)("li",{parentName:"ul"},"firmName if it","'","s a business"),(0,i.kt)("li",{parentName:"ul"},"address (a dict), with keys addressLine1 addressLine2, city, state, zipCode, country"),(0,i.kt)("li",{parentName:"ul"},"phoneNumber"),(0,i.kt)("li",{parentName:"ul"},"email")),(0,i.kt)("h4",{id:"get_courts"},"get","_","courts"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def get_courts(fileable_only: bool = False,\n               with_names: bool = False) -> ApiResponse\n")),(0,i.kt)("p",null,"Gets the list of courts."),(0,i.kt)("h4",{id:"get_court"},"get","_","court"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def get_court(court_id: str) -> ApiResponse\n")),(0,i.kt)("p",null,"Gets codes for a specific court"),(0,i.kt)("h4",{id:"get_court_list"},"get","_","court","_","list"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def get_court_list() -> ApiResponse\n")),(0,i.kt)("p",null,"Gets a list of all of the courts that you can file into. Slightly more limited than\n",(0,i.kt)("a",{parentName:"p",href:"#get_courts"},"get_courts")),(0,i.kt)("h4",{id:"get_filing_list"},"get","_","filing","_","list"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def get_filing_list(court_id: str,\n                    user_id: str = None,\n                    start_date: datetime = None,\n                    before_date: datetime = None) -> ApiResponse\n")),(0,i.kt)("p",null,"Returns a list of filings that a particular user has made with a court."),(0,i.kt)("h4",{id:"get_service_types"},"get","_","service","_","types"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def get_service_types(court_id: str, all_vars: dict = None) -> ApiResponse\n")),(0,i.kt)("p",null,"Checks the court info: if it has conditional service types, call a special API with all filing info so far to get service types"),(0,i.kt)("h4",{id:"get_cases_raw"},"get","_","cases","_","raw"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def get_cases_raw(court_id: str,\n                  *,\n                  person_name: dict = None,\n                  business_name: str = None,\n                  docket_number: str = None) -> ApiResponse\n")),(0,i.kt)("p",null,"Finds existing cases at a particular court. Only one of person_name, business_name, or docket_number should be\nprovided at a time.\nParams:\ncourt_id (str)\nperson_name (dict)\nbuisness_name (str)\ndocket_number (str)"))}u.isMDXComponent=!0}}]);