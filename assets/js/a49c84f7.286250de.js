"use strict";(self.webpackChunkdocassemble_assembly_line_documentation=self.webpackChunkdocassemble_assembly_line_documentation||[]).push([[1529],{636:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>o,toc:()=>d});var i=n(4848),t=n(8453);const l={sidebar_label:"sessions",title:"AssemblyLine.sessions"},r=void 0,o={id:"reference/AssemblyLine/sessions",title:"AssemblyLine.sessions",description:"is\\file\\like",source:"@site/docs/reference/AssemblyLine/sessions.md",sourceDirName:"reference/AssemblyLine",slug:"/reference/AssemblyLine/sessions",permalink:"/docassemble-AssemblyLine-documentation/docs/reference/AssemblyLine/sessions",draft:!1,unlisted:!1,editUrl:"https://github.com/SuffolkLITLab/docassemble-AssemblyLine-documentation/edit/main/docs/reference/AssemblyLine/sessions.md",tags:[],version:"current",frontMatter:{sidebar_label:"sessions",title:"AssemblyLine.sessions"},sidebar:"docs",previous:{title:"Scheduled reminders",permalink:"/docassemble-AssemblyLine-documentation/docs/framework/alreminders"},next:{title:"Answer Sets: save and reuse answers across interviews\n",permalink:"/docassemble-AssemblyLine-documentation/docs/framework/answer_sets"}},a={},d=[{value:"is_file_like",id:"is_file_like",level:4},{value:"set_interview_metadata",id:"set_interview_metadata",level:4},{value:"get_interview_metadata",id:"get_interview_metadata",level:4},{value:"get_saved_interview_list",id:"get_saved_interview_list",level:4},{value:"delete_interview_sessions",id:"delete_interview_sessions",level:4},{value:"interview_list_html",id:"interview_list_html",level:4},{value:"nice_interview_title",id:"nice_interview_title",level:4},{value:"pascal_to_zwspace",id:"pascal_to_zwspace",level:4},{value:"nice_interview_subtitle",id:"nice_interview_subtitle",level:4},{value:"radial_progress",id:"radial_progress",level:4},{value:"local_date",id:"local_date",level:4},{value:"session_list_html",id:"session_list_html",level:4},{value:"rename_interview_answers",id:"rename_interview_answers",level:4},{value:"set_current_session_metadata",id:"set_current_session_metadata",level:4},{value:"rename_current_session",id:"rename_current_session",level:4},{value:"save_interview_answers",id:"save_interview_answers",level:4},{value:"get_filtered_session_variables",id:"get_filtered_session_variables",level:4},{value:"get_filtered_session_variables_string",id:"get_filtered_session_variables_string",level:4},{value:"load_interview_answers",id:"load_interview_answers",level:4},{value:"load_interview_json",id:"load_interview_json",level:4},{value:"export_interview_variables",id:"export_interview_variables",level:4},{value:"is_valid_json",id:"is_valid_json",level:4},{value:"config_with_language_fallback",id:"config_with_language_fallback",level:4}];function c(e){const s={code:"code",em:"em",h4:"h4",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.h4,{id:"is_file_like",children:"is_file_like"}),"\n",(0,i.jsx)(s.p,{children:"Return True if the object is a file-like object."}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"obj"})," ",(0,i.jsx)(s.em,{children:"Any"})," - The object to test"]}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Returns"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"bool"})," - True if the object is a file-like object."]}),"\n"]}),"\n",(0,i.jsx)(s.h4,{id:"set_interview_metadata",children:"set_interview_metadata"}),"\n",(0,i.jsx)(s.p,{children:"Add searchable interview metadata for the specified filename and session ID.\nIntended to be used to add an interview title, etc.\nStandardized metadata dictionary:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"title"}),"\n",(0,i.jsx)(s.li,{children:"subtitle"}),"\n",(0,i.jsx)(s.li,{children:"original_interview_filename"}),"\n",(0,i.jsx)(s.li,{children:"variable_count"}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"filename"})," ",(0,i.jsx)(s.em,{children:"str"})," - The filename of the interview to add metadata for"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"session_id"})," ",(0,i.jsx)(s.em,{children:"int"})," - The session ID of the interview to add metadata for"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"data"})," ",(0,i.jsx)(s.em,{children:"Dict"})," - The metadata to add"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"metadata_key_name"})," ",(0,i.jsx)(s.em,{children:"str, optional"}),' - The name of the metadata key. Defaults to "metadata".']}),"\n"]}),"\n",(0,i.jsx)(s.h4,{id:"get_interview_metadata",children:"get_interview_metadata"}),"\n",(0,i.jsxs)(s.p,{children:["Retrieve the unencrypted metadata associated with an interview.\nWe implement this with the docassemble jsonstorage table and a dedicated ",(0,i.jsx)(s.code,{children:"tag"})," which defaults to ",(0,i.jsx)(s.code,{children:"metadata"}),"."]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"filename"})," ",(0,i.jsx)(s.em,{children:"str"})," - The filename of the interview to retrieve metadata for"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"session_id"})," ",(0,i.jsx)(s.em,{children:"int"})," - The session ID of the interview to retrieve metadata for"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"metadata_key_name"})," ",(0,i.jsx)(s.em,{children:"str, optional"}),' - The name of the metadata key. Defaults to "metadata".']}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Returns"}),":"]}),"\n",(0,i.jsx)(s.p,{children:"Dict[str, Any]: The metadata associated with the interview"}),"\n",(0,i.jsx)(s.h4,{id:"get_saved_interview_list",children:"get_saved_interview_list"}),"\n",(0,i.jsx)(s.p,{children:"Get a list of saved sessions for the specified filename. If the save_interview_answers function was used\nto add metadata, the result list will include columns containing the metadata.\nIf the user is a developer or administrator, setting user_id = None will list all interviews on the server. Otherwise,\nthe user is limited to their own sessions."}),"\n",(0,i.jsxs)(s.p,{children:["Setting ",(0,i.jsx)(s.code,{children:"exclude_newly_started_sessions"}),' to True will exclude any results from the list that are still on\n"step 1". Note that while this may be useful to filter out interviews that were accidentally started\nand likely do not need to be resumed, it will also have the side effect of excluding all answer sets from the\nresults. Answer sets generally have exactly one "step", which is the step where information was copied from\nan existing interview to the answer set.']}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"filename"})," ",(0,i.jsx)(s.em,{children:"str, optional"})," - The filename of the interview to retrieve sessions for. Defaults to al_session_store_default_filename."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"user_id"})," ",(0,i.jsx)(s.em,{children:"Union[int, str, None], optional"})," - The user ID to retrieve sessions for. Defaults to None."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"metadata_key_name"})," ",(0,i.jsx)(s.em,{children:"str, optional"}),' - The name of the metadata key. Defaults to "metadata".']}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"limit"})," ",(0,i.jsx)(s.em,{children:"int, optional"})," - The maximum number of results to return. Defaults to 50."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"offset"})," ",(0,i.jsx)(s.em,{children:"int, optional"})," - The offset to start returning results from. Defaults to 0."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"filename_to_exclude"})," ",(0,i.jsx)(s.em,{children:"str, optional"}),' - The filename to exclude from the results. Defaults to "".']}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"exclude_current_filename"})," ",(0,i.jsx)(s.em,{children:"bool, optional"})," - Whether to exclude the current filename from the results. Defaults to True."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"exclude_filenames"})," ",(0,i.jsx)(s.em,{children:"Optional[List[str]], optional"})," - A list of filenames to exclude from the results. Defaults to None."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"exclude_newly_started_sessions"})," ",(0,i.jsx)(s.em,{children:"bool, optional"}),' - Whether to exclude sessions that are still on "step 1". Defaults to False.']}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Returns"}),":"]}),"\n",(0,i.jsx)(s.p,{children:"List[Dict[str, Any]]: A list of saved sessions for the specified filename."}),"\n",(0,i.jsx)(s.h4,{id:"delete_interview_sessions",children:"delete_interview_sessions"}),"\n",(0,i.jsx)(s.p,{children:'Delete all sessions for the specified user, excluding the current filename\nand by default, the intentionally saved "answer sets". Created because\ninterview_list(action="delete_all") is both quite slow and because it deletes answer sets.'}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"user_id"})," ",(0,i.jsx)(s.em,{children:"Optional[int], optional"})," - The user ID to delete sessions for. Defaults to None."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"filename_to_exclude"})," ",(0,i.jsx)(s.em,{children:"str, optional"})," - The filename to exclude from the results. Defaults to al_session_store_default_filename."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"exclude_current_filename"})," ",(0,i.jsx)(s.em,{children:"bool, optional"})," - Whether to exclude the current filename from the results. Defaults to True."]}),"\n"]}),"\n",(0,i.jsx)(s.h4,{id:"interview_list_html",children:"interview_list_html"}),"\n",(0,i.jsx)(s.p,{children:"Return a string containing an HTML-formatted table with the list of saved answers\nassociated with the specified filename."}),"\n",(0,i.jsx)(s.p,{children:'Designed to return a list of "answer sets" and by default clicking a title will\ntrigger an action to load the answers into the current session. This only works as\ndesigned when inside an AssemblyLine line interview.'}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"exclude_newly_started_sessions"}),' should almost always be set to False, because most answer sets\nare on "page 1" (exactly 1 step was taken to copy the answers and the user isn\'t able to interact with the answer set\nitself in a way that adds additional steps)']}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"filename"})," ",(0,i.jsx)(s.em,{children:"str, optional"})," - Name of the file. Defaults to ",(0,i.jsx)(s.code,{children:"al_session_store_default_filename"}),"."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"user_id"})," ",(0,i.jsx)(s.em,{children:"Union[int, str, None], optional"})," - User's ID. Defaults to None."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"metadata_key_name"})," ",(0,i.jsx)(s.em,{children:"str, optional"}),' - Name of the metadata key. Defaults to "metadata".']}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"exclude_newly_started_sessions"})," ",(0,i.jsx)(s.em,{children:"bool, optional"})," - If True, newly started sessions are excluded. Defaults to False."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"date_label"})," ",(0,i.jsx)(s.em,{children:"str, optional"}),' - Label for the date column. Defaults to translated word "Date".']}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"details_label"})," ",(0,i.jsx)(s.em,{children:"str, optional"}),' - Label for the details column. Defaults to translated word "Details".']}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"actions_label"})," ",(0,i.jsx)(s.em,{children:"str, optional"}),' - Label for the actions column. Defaults to translated word "Actions".']}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"delete_label"})," ",(0,i.jsx)(s.em,{children:"str, optional"}),' - Label for the delete action. Defaults to translated word "Delete".']}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"view_label"})," ",(0,i.jsx)(s.em,{children:"str, optional"}),' - Label for the view action. Defaults to translated word "View".']}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"load_action"})," ",(0,i.jsx)(s.em,{children:"str, optional"}),' - Name of the load action. Defaults to "al_sessions_fast_forward_session".']}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"delete_action"})," ",(0,i.jsx)(s.em,{children:"str, optional"}),' - Name of the delete action. Defaults to "al_sessions_delete_session".']}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"view_only"})," ",(0,i.jsx)(s.em,{children:"bool, optional"})," - If True, only view is allowed. Defaults to False."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"limit"})," ",(0,i.jsx)(s.em,{children:"int, optional"})," - Limit for the number of sessions returned. Defaults to 50."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"offset"})," ",(0,i.jsx)(s.em,{children:"int, optional"})," - Offset for the session list. Defaults to 0."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"display_interview_title"})," ",(0,i.jsx)(s.em,{children:"bool, optional"})," - If True, displays the title of the interview. Defaults to True."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"show_view_button"})," ",(0,i.jsx)(s.em,{children:"bool, optional"})," - If True, shows the view button. Defaults to True."]}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Returns"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"str"})," - HTML-formatted table containing the list of saved answers."]}),"\n"]}),"\n",(0,i.jsx)(s.h4,{id:"nice_interview_title",children:"nice_interview_title"}),"\n",(0,i.jsx)(s.p,{children:"Return a human readable version of the interview name. Will try several strategies\nin descending priority order."}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsxs)(s.li,{children:["Try looking up the interview title from the ",(0,i.jsx)(s.code,{children:"dispatch"})," directive"]}),"\n",(0,i.jsx)(s.li,{children:"Try removing the package and path from the filename and replace _ with spaces."}),"\n",(0,i.jsx)(s.li,{children:'Finally, return "Untitled interview" or translated phrase from system-wide words.yml'}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"answer"})," ",(0,i.jsx)(s.em,{children:"Dict[str, str]"})," - The answer dictionary to get the interview title from"]}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Returns"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"str"})," - The human readable interview title"]}),"\n"]}),"\n",(0,i.jsx)(s.h4,{id:"pascal_to_zwspace",children:"pascal_to_zwspace"}),"\n",(0,i.jsx)(s.p,{children:"Insert a zero-width space into words that are PascalCased to help\nwith word breaks on small viewports."}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"text"})," ",(0,i.jsx)(s.em,{children:"str"})," - The text to insert zero-width spaces into"]}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Returns"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"str"})," - The text with zero-width spaces inserted"]}),"\n"]}),"\n",(0,i.jsx)(s.h4,{id:"nice_interview_subtitle",children:"nice_interview_subtitle"}),"\n",(0,i.jsx)(s.p,{children:'Return first defined of the "title" metadata, the "auto_title" metadata, or empty string.'}),"\n",(0,i.jsx)(s.p,{children:"If exclude_identical, return empty string when title is the same as the subtitle."}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"answer"})," ",(0,i.jsx)(s.em,{children:"Dict[str, str]"})," - The answer dictionary to get the interview subtitle from"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"exclude_identical"})," ",(0,i.jsx)(s.em,{children:"bool, optional"})," - If True, excludes the subtitle if it is identical to the title. Defaults to True."]}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Returns"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"str"})," - The human readable interview subtitle"]}),"\n"]}),"\n",(0,i.jsx)(s.h4,{id:"radial_progress",children:"radial_progress"}),"\n",(0,i.jsx)(s.p,{children:"Return HTML for a radial progress bar, or the number of steps if progress isn't available in the metadata."}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"answer"})," ",(0,i.jsx)(s.em,{children:"Dict[str, Union[str, int]]"})," - The answer dictionary to get the interview progress from"]}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Returns"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"str"})," - the HTML as a string"]}),"\n"]}),"\n",(0,i.jsx)(s.h4,{id:"local_date",children:"local_date"}),"\n",(0,i.jsx)(s.p,{children:"Return a localized date from a UTC string."}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"utcstring"})," ",(0,i.jsx)(s.em,{children:"Optional[str]"})," - The UTC string to convert to a localized date"]}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Returns"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"DADateTime"})," - The localized date"]}),"\n"]}),"\n",(0,i.jsx)(s.h4,{id:"session_list_html",children:"session_list_html"}),"\n",(0,i.jsx)(s.p,{children:"Return a string containing an HTML-formatted table with the list of user sessions.\nWhile interview_list_html() is for answer sets, this feature is for standard\nuser sessions. The results exclude the answer set filename by default."}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"filename"})," ",(0,i.jsx)(s.em,{children:"Optional[str], optional"})," - Name of the file. Defaults to None."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"user_id"})," ",(0,i.jsx)(s.em,{children:"Union[int, str, None], optional"})," - User's ID. Defaults to None."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"metadata_key_name"})," ",(0,i.jsx)(s.em,{children:"str, optional"}),' - Name of the metadata key. Defaults to "metadata".']}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"filename_to_exclude"})," ",(0,i.jsx)(s.em,{children:"str, optional"})," - Name of the file to exclude. Defaults to ",(0,i.jsx)(s.code,{children:"al_session_store_default_filename"}),"."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"exclude_current_filename"})," ",(0,i.jsx)(s.em,{children:"bool, optional"})," - If True, excludes the current filename. Defaults to True."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"exclude_filenames"})," ",(0,i.jsx)(s.em,{children:"Optional[List[str]], optional"})," - List of filenames to exclude. Defaults to None."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"exclude_newly_started_sessions"})," ",(0,i.jsx)(s.em,{children:"bool, optional"})," - If True, excludes newly started sessions. Defaults to False."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"name_label"})," ",(0,i.jsx)(s.em,{children:"str, optional"}),' - Label for the session name/title. Defaults to translated word "Title".']}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"date_label"})," ",(0,i.jsx)(s.em,{children:"str, optional"}),' - Label for the date column. Defaults to translated word "Date modified".']}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"details_label"})," ",(0,i.jsx)(s.em,{children:"str, optional"}),' - Label describing the progress of the session. Defaults to translated word "Progress".']}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"actions_label"})," ",(0,i.jsx)(s.em,{children:"str, optional"}),' - Label for actions applicable to the session. Defaults to translated word "Actions".']}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"delete_label"})," ",(0,i.jsx)(s.em,{children:"str, optional"}),' - Label for the delete action. Defaults to translated word "Delete".']}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"rename_label"})," ",(0,i.jsx)(s.em,{children:"str, optional"}),' - Label for the rename action. Defaults to translated word "Rename".']}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"rename_action"})," ",(0,i.jsx)(s.em,{children:"str, optional"}),' - Name of the rename action. Defaults to "interview_list_rename_action".']}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"delete_action"})," ",(0,i.jsx)(s.em,{children:"str, optional"}),' - Name of the delete action. Defaults to "interview_list_delete_session".']}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"copy_action"})," ",(0,i.jsx)(s.em,{children:"str, optional"}),' - Name of the copy action. Defaults to "interview_list_copy_action".']}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"clone_label"})," ",(0,i.jsx)(s.em,{children:"str, optional"}),' - Label for the action to copy as an answer set. Defaults to translated word "Copy as answer set".']}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"show_title"})," ",(0,i.jsx)(s.em,{children:"bool, optional"})," - If True, shows the title of the session. Defaults to True."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"show_copy_button"})," ",(0,i.jsx)(s.em,{children:"bool, optional"})," - If True, show a copy button for answer sets. Defaults to True."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"limit"})," ",(0,i.jsx)(s.em,{children:"int, optional"})," - Limit for the number of sessions returned. Defaults to 50."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"offset"})," ",(0,i.jsx)(s.em,{children:"int, optional"})," - Offset for the session list. Defaults to 0."]}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Returns"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"str"})," - HTML-formatted table containing the list of user sessions."]}),"\n"]}),"\n",(0,i.jsx)(s.h4,{id:"rename_interview_answers",children:"rename_interview_answers"}),"\n",(0,i.jsxs)(s.p,{children:["Update the 'title' metadata of an interview, as stored in the dedicated ",(0,i.jsx)(s.code,{children:"metadata"})," column, without touching other\nmetadata that may be present."]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"filename"})," ",(0,i.jsx)(s.em,{children:"str"})," - The filename of the interview to rename"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"session_id"})," ",(0,i.jsx)(s.em,{children:"int"})," - The session ID of the interview to rename"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"new_name"})," ",(0,i.jsx)(s.em,{children:"str"})," - The new name to set for the interview"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"metadata_key_name"})," ",(0,i.jsx)(s.em,{children:"str, optional"}),' - The name of the metadata key. Defaults to "metadata".']}),"\n",(0,i.jsx)(s.p,{children:"If exception is raised in set_session_variables, this will silently fail but log the error."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.h4,{id:"set_current_session_metadata",children:"set_current_session_metadata"}),"\n",(0,i.jsx)(s.p,{children:"Set metadata for the current session, such as the title, in an unencrypted database entry."}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"data"})," ",(0,i.jsx)(s.em,{children:"Dict[str, Any]"})," - The metadata to set"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"metadata_key_name"})," ",(0,i.jsx)(s.em,{children:"str, optional"}),' - The name of the metadata key. Defaults to "metadata".']}),"\n"]}),"\n",(0,i.jsx)(s.h4,{id:"rename_current_session",children:"rename_current_session"}),"\n",(0,i.jsx)(s.p,{children:'Update the "title" metadata entry for the current session without changing any other\nmetadata that might be present.'}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"new_name"})," ",(0,i.jsx)(s.em,{children:"str"})," - The new name to set for the interview"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"metadata_key_name"})," ",(0,i.jsx)(s.em,{children:"str, optional"}),' - The name of the metadata key. Defaults to "metadata".']}),"\n"]}),"\n",(0,i.jsx)(s.h4,{id:"save_interview_answers",children:"save_interview_answers"}),"\n",(0,i.jsx)(s.p,{children:"Copies the answers from a given session into a new session with a specified interview filename."}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"filename"})," ",(0,i.jsx)(s.em,{children:"str, optional"})," - The desired filename for the new session. Defaults to ",(0,i.jsx)(s.code,{children:"al_session_store_default_filename"}),"."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"variables_to_filter"})," ",(0,i.jsx)(s.em,{children:"Union[Set[str], List[str], None], optional"}),' - The "base" list or set of variables to filter out. Defaults to ',(0,i.jsx)(s.code,{children:"al_sessions_variables_to_remove"}),". There's usually no reason to change this and changing it might break sessions."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"metadata"})," ",(0,i.jsx)(s.em,{children:"Optional[Dict], optional"})," - Dictionary containing metadata. Defaults to an empty dictionary."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"metadata_key_name"})," ",(0,i.jsx)(s.em,{children:"str, optional"}),' - Key name for metadata storage. Defaults to "metadata".']}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"original_interview_filename"})," ",(0,i.jsx)(s.em,{children:"str, optional"})," - Original filename of the interview. Defaults to None."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"source_filename"})," ",(0,i.jsx)(s.em,{children:"str, optional"})," - Source filename to get session variables from. Defaults to None."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"source_session"})," ",(0,i.jsx)(s.em,{children:"str, optional"})," - Session ID of the source file. Defaults to None."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"additional_variables_to_filter"})," ",(0,i.jsx)(s.em,{children:"Union[Set[str], List[str], None], optional"})," - List or set of variables to filter out. Defaults to None."]}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Returns"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"str"})," - ID of the new session."]}),"\n"]}),"\n",(0,i.jsx)(s.h4,{id:"get_filtered_session_variables",children:"get_filtered_session_variables"}),"\n",(0,i.jsx)(s.p,{children:"Retrieves a filtered subset of variables from a specified interview and session.\nIf no filename and session ID are given, it will return a filtered list of variables\nfrom the current interview."}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"filename"})," ",(0,i.jsx)(s.em,{children:"Optional[str], optional"})," - Filename of the session. Defaults to None."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"session_id"})," ",(0,i.jsx)(s.em,{children:"Optional[int], optional"})," - Session ID to retrieve variables from. Defaults to None."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"variables_to_filter"})," ",(0,i.jsx)(s.em,{children:"Union[Set[str], List[str], None], optional"})," - List or set of variables to exclude. Defaults to ",(0,i.jsx)(s.code,{children:"al_sessions_variables_to_remove"}),"."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"additional_variables_to_filter"})," ",(0,i.jsx)(s.em,{children:"Union[Set[str], List[str], None], optional"})," - List or set of additional variables to exclude. Defaults to None."]}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Returns"}),":"]}),"\n",(0,i.jsx)(s.p,{children:"Dict[str, Any]: A dictionary of filtered session variables."}),"\n",(0,i.jsx)(s.h4,{id:"get_filtered_session_variables_string",children:"get_filtered_session_variables_string"}),"\n",(0,i.jsx)(s.p,{children:"Returns a JSON string that represents the filtered contents of a specified filename and session ID.\nIf no filename and session ID are provided, the current session's variables will be used."}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"filename"})," ",(0,i.jsx)(s.em,{children:"Optional[str], optional"})," - Filename of the session. Defaults to None."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"session_id"})," ",(0,i.jsx)(s.em,{children:"Optional[int], optional"})," - Session ID to retrieve variables from. Defaults to None."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"variables_to_filter"})," ",(0,i.jsx)(s.em,{children:"Union[Set[str], List[str], None], optional"})," - List or set of variables to exclude. Defaults to ",(0,i.jsx)(s.code,{children:"al_sessions_variables_to_remove"}),"."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"additional_variables_to_filter"})," ",(0,i.jsx)(s.em,{children:"Union[Set[str], List[str], None], optional"})," - List or set of additional variables to exclude. Defaults to None."]}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Returns"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"str"})," - A JSON-formatted string of filtered session variables."]}),"\n"]}),"\n",(0,i.jsx)(s.h4,{id:"load_interview_answers",children:"load_interview_answers"}),"\n",(0,i.jsxs)(s.p,{children:["Loads answers from a specified session. If the parameter ",(0,i.jsx)(s.code,{children:"new_session"})," is set to True, it will create\na new session with the provided or current interview filename. Otherwise, it will load the answers into\nthe active session. This function is primarily used for migrating answers between sessions."]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"old_interview_filename"})," ",(0,i.jsx)(s.em,{children:"str"})," - Filename of the old interview."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"old_session_id"})," ",(0,i.jsx)(s.em,{children:"int"})," - Session ID of the old interview."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"new_session"})," ",(0,i.jsx)(s.em,{children:"bool, optional"})," - Determines whether to create a new session. Defaults to False."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"new_interview_filename"})," ",(0,i.jsx)(s.em,{children:"Optional[str], optional"})," - Filename for the new session. Defaults to None."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"variables_to_filter"})," ",(0,i.jsx)(s.em,{children:"Optional[List[str]], optional"})," - List of variables to exclude. Defaults to None."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"additional_variables_to_filter"})," ",(0,i.jsx)(s.em,{children:"Optional[List[str]], optional"})," - List of additional variables to exclude. Defaults to None."]}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Returns"}),":"]}),"\n",(0,i.jsxs)(s.p,{children:["Optional[Union[int, bool]]: ID of the newly created session if ",(0,i.jsx)(s.code,{children:"new_session"})," is True, otherwise True or False based on success."]}),"\n",(0,i.jsx)(s.h4,{id:"load_interview_json",children:"load_interview_json"}),"\n",(0,i.jsxs)(s.p,{children:["Given a JSON string, this function loads the specified variables into a Docassemble session.\nJSON strings containing annotated class names will be transformed into Docassemble objects.\nIf the ",(0,i.jsx)(s.code,{children:"new_session"})," argument is not set, the JSON answers will be loaded into the current interview."]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"json_string"})," ",(0,i.jsx)(s.em,{children:"str"})," - A JSON-formatted string containing session variables."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"new_session"})," ",(0,i.jsx)(s.em,{children:"bool, optional"})," - Specifies whether to create a new session or load into the current one. Defaults to False."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"new_interview_filename"})," ",(0,i.jsx)(s.em,{children:"Optional[str], optional"})," - Filename for the new session. Defaults to None."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"variables_to_filter"})," ",(0,i.jsx)(s.em,{children:"Optional[List[str]], optional"})," - List of variables to exclude. Defaults to None."]}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Returns"}),":"]}),"\n",(0,i.jsxs)(s.p,{children:["Optional[Union[int, bool]]: ID of the newly created session if ",(0,i.jsx)(s.code,{children:"new_session"})," is True, otherwise True or False based on success."]}),"\n",(0,i.jsx)(s.h4,{id:"export_interview_variables",children:"export_interview_variables"}),"\n",(0,i.jsxs)(s.p,{children:["Generates a DAFile containing a JSON representation of a specified session's interview answers.\nThe resultant output is compatible with ",(0,i.jsx)(s.code,{children:"set_session_variables(process_objects=True)"})," and\n",(0,i.jsx)(s.code,{children:"set_variables(process_objects=True)"})," methods."]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"filename"})," ",(0,i.jsx)(s.em,{children:"Optional[str], optional"})," - Filename of the session. Defaults to None."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"session_id"})," ",(0,i.jsx)(s.em,{children:"Optional[int], optional"})," - Session ID to retrieve variables from. Defaults to None."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"variables_to_filter"})," ",(0,i.jsx)(s.em,{children:"Union[Set, List[str], None], optional"})," - List or set of variables to exclude. Defaults to None."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"output"})," ",(0,i.jsx)(s.em,{children:"DAFile, optional"})," - DAFile to write the JSON output to. If None, a new DAFile is created."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"additional_variables_to_filter"})," ",(0,i.jsx)(s.em,{children:"Union[Set, List[str], None], optional"})," - List or set of additional variables to exclude. Defaults to None."]}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Returns"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"DAFile"})," - DAFile with a JSON representation of the answers"]}),"\n"]}),"\n",(0,i.jsx)(s.h4,{id:"is_valid_json",children:"is_valid_json"}),"\n",(0,i.jsx)(s.p,{children:"Checks if the provided string is a valid JSON-formatted string."}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"json_string"})," ",(0,i.jsx)(s.em,{children:"str"})," - The string to be checked for JSON validity."]}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Returns"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"bool"})," - True if the string is a valid JSON, otherwise it raises a validation error and returns False."]}),"\n"]}),"\n",(0,i.jsx)(s.h4,{id:"config_with_language_fallback",children:"config_with_language_fallback"}),"\n",(0,i.jsxs)(s.p,{children:["Returns the value of a config key under ",(0,i.jsx)(s.code,{children:"assembly line"})," ",(0,i.jsx)(s.code,{children:"interview list"})," with options to fallback\nto an alternative key at the top level of the global configuration."]}),"\n",(0,i.jsx)(s.p,{children:"Used in interview_list.yml to allow overriding some of the labels in the interview list\nwith options specified in the global configuration. top_level_config should be reserved\nto handle backwards compatibility (e.g., changed location of some configuration keys)"}),"\n",(0,i.jsx)(s.p,{children:"Example configuration, showing both the single-string and language-specific string options:\nassembly line:\ninterview list:\ntitle:\nen: In progress forms\nes: Formularios en progreso\nshort title: My forms"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"config_key"})," ",(0,i.jsx)(s.em,{children:"str"})," - The config key to look up. The config can be a single string or a dictionary with language keys."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"top_level_config_key"})," ",(0,i.jsx)(s.em,{children:"str, optional"})," - Optional, alternative top-level config key to look up. Defaults to None."]}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Returns"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"str"})," - The value of the config key, or the alternative key, or None."]}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>r,x:()=>o});var i=n(6540);const t={},l=i.createContext(t);function r(e){const s=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(l.Provider,{value:s},e.children)}}}]);